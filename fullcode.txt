Please analyze this code for: Error handling, Edge cases, Performance optimization, Best practices, Please do not unnecessarily remove any comments or code. Generate the code with clear comments explaining the logic.

.augment\rules\rule.md:
<code>
---
type: "always_apply"
---

After implementing and pushing the fix, verify that the solution is working correctly by following this validation process:

1. **Push changes and wait for deployment**: Commit and push your code changes to GitHub, then wait exactly 10 minutes (5 minutes for Vercel deployment + 5 minutes safety buffer) for the deployment to complete.

2. **Test the live application**: Navigate to https://neatrepo.vercel.app/dashboard using browser automation and perform a hard refresh (Ctrl+F5 or equivalent) to bypass any caching issues.

3. **Verify the fix worked**: Check that:
   - The dashboard header no longer shows "No account" and instead displays the authenticated user information
   - The repository count shows the actual number of repositories (not 0) for the authenticated GitHub user
   - The loading state resolves properly without getting stuck in "Getting ready..." or "Loading..." indefinitely

4. **If validation fails**: If either the header still shows "No account" OR the repository count remains at 0, then the task has failed. In this case:
   - Immediately restart the debugging cycle: analyze → implement → push → wait → test → repeat
   - Use sequential thinking to identify the root cause of the remaining authentication or repository fetching issues
   - Continue iterating until both the authentication state AND repository display are working correctly

5. **Success criteria**: The fix is only considered complete when BOTH conditions are met:
   - User authentication is properly displayed in the header
   - Actual repository data is loaded and displayed (non-zero count for users with repositories)

Never implement temporary workarounds, patches, or band-aid solutions. This is a production-ready web application that will serve many users, so all fixes must be:

1. **Production-grade**: Implement proper, permanent solutions that address root causes rather than symptoms
2. **Scalable**: Solutions must work reliably under load with multiple concurrent users
3. **Maintainable**: Code should be clean, well-documented, and follow established patterns
4. **Robust**: Include proper error handling, validation, and edge case management
5. **Security-conscious**: Follow security best practices and never compromise user data or system integrity

When debugging issues like the OAuth authentication flow or repository display problems, identify and fix the underlying architectural or logic problems rather than adding timeouts, bypasses, or temporary patches. The goal is to create a stable, professional application that users can depend on.

CRITICAL DEBUGGING AND IMPLEMENTATION RULES:

1. **NO SUMMARY-ONLY RESPONSES**: Never provide analysis or explanations without implementing actual fixes. If you identify an issue, you MUST implement the solution.

make sure you push it first, you often forgot

2. **MANDATORY DEBUGGING PROCESS**: When encountering any problem, you MUST follow this exact sequence:
   - Use `sequentialthinking_Sequential_thinking` to analyze the root cause thoroughly
   - Use `codebase-retrieval` to gather all relevant code context and implementation details
   - Implement the fix using `str-replace-editor` 
   - Push changes to GitHub using git commands
   - Wait exactly 5 minutes for Vercel deployment, then wait another 5 minutes for safety
   - Test the fix using browser automation to verify it works

3. **DEPLOYMENT AND TESTING CYCLE**: After every code change:
   - Commit and push to GitHub immediately
   - Wait 10 minutes total (5 + 5) for Vercel auto-deployment
   - Test the live application at https://neatrepo.vercel.app using browser tools
   - If the fix doesn't work, repeat the entire debugging cycle

4. **NO SHORTCUTS**: Do not skip any step in the debugging process. Do not assume fixes work without testing them on the live deployment.

5. **ITERATIVE APPROACH**: If the first fix attempt fails, immediately start the cycle again: debug → implement → push → wait → test → repeat until resolved.

This applies to all technical issues, especially OAuth authentication, database connectivity, and UI state synchronization problems.

</code>

.git_disabled\hooks\applypatch-msg.sample:
<code>
#!/bin/sh
#
# An example hook script to check the commit log message taken by
# applypatch from an e-mail message.
#
# The hook should exit with non-zero status after issuing an
# appropriate message if it wants to stop the commit.  The hook is
# allowed to edit the commit message file.
#
# To enable this hook, rename this file to "applypatch-msg".

. git-sh-setup
commitmsg="$(git rev-parse --git-path hooks/commit-msg)"
test -x "$commitmsg" && exec "$commitmsg" ${1+"$@"}
:

</code>

.git_disabled\hooks\commit-msg.sample:
<code>
#!/bin/sh
#
# An example hook script to check the commit log message.
# Called by "git commit" with one argument, the name of the file
# that has the commit message.  The hook should exit with non-zero
# status after issuing an appropriate message if it wants to stop the
# commit.  The hook is allowed to edit the commit message file.
#
# To enable this hook, rename this file to "commit-msg".

# Uncomment the below to add a Signed-off-by line to the message.
# Doing this in a hook is a bad idea in general, but the prepare-commit-msg
# hook is more suited to it.
#
# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
# grep -qs "^$SOB" "$1" || echo "$SOB" >> "$1"

# This example catches duplicate Signed-off-by lines.

test "" = "$(grep '^Signed-off-by: ' "$1" |
	 sort | uniq -c | sed -e '/^[ 	]*1[ 	]/d')" || {
	echo >&2 Duplicate Signed-off-by lines.
	exit 1
}

</code>

.git_disabled\hooks\fsmonitor-watchman.sample:
<code>
#!/usr/bin/perl

use strict;
use warnings;
use IPC::Open2;

# An example hook script to integrate Watchman
# (https://facebook.github.io/watchman/) with git to speed up detecting
# new and modified files.
#
# The hook is passed a version (currently 2) and last update token
# formatted as a string and outputs to stdout a new update token and
# all files that have been modified since the update token. Paths must
# be relative to the root of the working tree and separated by a single NUL.
#
# To enable this hook, rename this file to "query-watchman" and set
# 'git config core.fsmonitor .git/hooks/query-watchman'
#
my ($version, $last_update_token) = @ARGV;

# Uncomment for debugging
# print STDERR "$0 $version $last_update_token\n";

# Check the hook interface version
if ($version ne 2) {
	die "Unsupported query-fsmonitor hook version '$version'.\n" .
	    "Falling back to scanning...\n";
}

my $git_work_tree = get_working_dir();

my $retry = 1;

my $json_pkg;
eval {
	require JSON::XS;
	$json_pkg = "JSON::XS";
	1;
} or do {
	require JSON::PP;
	$json_pkg = "JSON::PP";
};

launch_watchman();

sub launch_watchman {
	my $o = watchman_query();
	if (is_work_tree_watched($o)) {
		output_result($o->{clock}, @{$o->{files}});
	}
}

sub output_result {
	my ($clockid, @files) = @_;

	# Uncomment for debugging watchman output
	# open (my $fh, ">", ".git/watchman-output.out");
	# binmode $fh, ":utf8";
	# print $fh "$clockid\n@files\n";
	# close $fh;

	binmode STDOUT, ":utf8";
	print $clockid;
	print "\0";
	local $, = "\0";
	print @files;
}

sub watchman_clock {
	my $response = qx/watchman clock "$git_work_tree"/;
	die "Failed to get clock id on '$git_work_tree'.\n" .
		"Falling back to scanning...\n" if $? != 0;

	return $json_pkg->new->utf8->decode($response);
}

sub watchman_query {
	my $pid = open2(\*CHLD_OUT, \*CHLD_IN, 'watchman -j --no-pretty')
	or die "open2() failed: $!\n" .
	"Falling back to scanning...\n";

	# In the query expression below we're asking for names of files that
	# changed since $last_update_token but not from the .git folder.
	#
	# To accomplish this, we're using the "since" generator to use the
	# recency index to select candidate nodes and "fields" to limit the
	# output to file names only. Then we're using the "expression" term to
	# further constrain the results.
	my $last_update_line = "";
	if (substr($last_update_token, 0, 1) eq "c") {
		$last_update_token = "\"$last_update_token\"";
		$last_update_line = qq[\n"since": $last_update_token,];
	}
	my $query = <<"	END";
		["query", "$git_work_tree", {$last_update_line
			"fields": ["name"],
			"expression": ["not", ["dirname", ".git"]]
		}]
	END

	# Uncomment for debugging the watchman query
	# open (my $fh, ">", ".git/watchman-query.json");
	# print $fh $query;
	# close $fh;

	print CHLD_IN $query;
	close CHLD_IN;
	my $response = do {local $/; <CHLD_OUT>};

	# Uncomment for debugging the watch response
	# open ($fh, ">", ".git/watchman-response.json");
	# print $fh $response;
	# close $fh;

	die "Watchman: command returned no output.\n" .
	"Falling back to scanning...\n" if $response eq "";
	die "Watchman: command returned invalid output: $response\n" .
	"Falling back to scanning...\n" unless $response =~ /^\{/;

	return $json_pkg->new->utf8->decode($response);
}

sub is_work_tree_watched {
	my ($output) = @_;
	my $error = $output->{error};
	if ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {
		$retry--;
		my $response = qx/watchman watch "$git_work_tree"/;
		die "Failed to make watchman watch '$git_work_tree'.\n" .
		    "Falling back to scanning...\n" if $? != 0;
		$output = $json_pkg->new->utf8->decode($response);
		$error = $output->{error};
		die "Watchman: $error.\n" .
		"Falling back to scanning...\n" if $error;

		# Uncomment for debugging watchman output
		# open (my $fh, ">", ".git/watchman-output.out");
		# close $fh;

		# Watchman will always return all files on the first query so
		# return the fast "everything is dirty" flag to git and do the
		# Watchman query just to get it over with now so we won't pay
		# the cost in git to look up each individual file.
		my $o = watchman_clock();
		$error = $output->{error};

		die "Watchman: $error.\n" .
		"Falling back to scanning...\n" if $error;

		output_result($o->{clock}, ("/"));
		$last_update_token = $o->{clock};

		eval { launch_watchman() };
		return 0;
	}

	die "Watchman: $error.\n" .
	"Falling back to scanning...\n" if $error;

	return 1;
}

sub get_working_dir {
	my $working_dir;
	if ($^O =~ 'msys' || $^O =~ 'cygwin') {
		$working_dir = Win32::GetCwd();
		$working_dir =~ tr/\\/\//;
	} else {
		require Cwd;
		$working_dir = Cwd::cwd();
	}

	return $working_dir;
}

</code>

.git_disabled\hooks\post-update.sample:
<code>
#!/bin/sh
#
# An example hook script to prepare a packed repository for use over
# dumb transports.
#
# To enable this hook, rename this file to "post-update".

exec git update-server-info

</code>

.git_disabled\hooks\pre-applypatch.sample:
<code>
#!/bin/sh
#
# An example hook script to verify what is about to be committed
# by applypatch from an e-mail message.
#
# The hook should exit with non-zero status after issuing an
# appropriate message if it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-applypatch".

. git-sh-setup
precommit="$(git rev-parse --git-path hooks/pre-commit)"
test -x "$precommit" && exec "$precommit" ${1+"$@"}
:

</code>

.git_disabled\hooks\pre-commit.sample:
<code>
#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git commit" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message if
# it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-commit".

if git rev-parse --verify HEAD >/dev/null 2>&1
then
	against=HEAD
else
	# Initial commit: diff against an empty tree object
	against=$(git hash-object -t tree /dev/null)
fi

# If you want to allow non-ASCII filenames set this variable to true.
allownonascii=$(git config --type=bool hooks.allownonascii)

# Redirect output to stderr.
exec 1>&2

# Cross platform projects tend to avoid non-ASCII filenames; prevent
# them from being added to the repository. We exploit the fact that the
# printable range starts at the space character and ends with tilde.
if [ "$allownonascii" != "true" ] &&
	# Note that the use of brackets around a tr range is ok here, (it's
	# even required, for portability to Solaris 10's /usr/bin/tr), since
	# the square bracket bytes happen to fall in the designated range.
	test $(git diff-index --cached --name-only --diff-filter=A -z $against |
	  LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
then
	cat <<\EOF
Error: Attempt to add a non-ASCII file name.

This can cause problems if you want to work with people on other platforms.

To be portable it is advisable to rename the file.

If you know what you are doing you can disable this check using:

  git config hooks.allownonascii true
EOF
	exit 1
fi

# If there are whitespace errors, print the offending file names and fail.
exec git diff-index --check --cached $against --

</code>

.git_disabled\hooks\pre-merge-commit.sample:
<code>
#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git merge" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message to
# stderr if it wants to stop the merge commit.
#
# To enable this hook, rename this file to "pre-merge-commit".

. git-sh-setup
test -x "$GIT_DIR/hooks/pre-commit" &&
        exec "$GIT_DIR/hooks/pre-commit"
:

</code>

.git_disabled\hooks\pre-push.sample:
<code>
#!/bin/sh

# An example hook script to verify what is about to be pushed.  Called by "git
# push" after it has checked the remote status, but before anything has been
# pushed.  If this script exits with a non-zero status nothing will be pushed.
#
# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local oid> <remote ref> <remote oid>
#
# This sample shows how to prevent push of commits where the log message starts
# with "WIP" (work in progress).

remote="$1"
url="$2"

zero=$(git hash-object --stdin </dev/null | tr '[0-9a-f]' '0')

while read local_ref local_oid remote_ref remote_oid
do
	if test "$local_oid" = "$zero"
	then
		# Handle delete
		:
	else
		if test "$remote_oid" = "$zero"
		then
			# New branch, examine all commits
			range="$local_oid"
		else
			# Update to existing branch, examine new commits
			range="$remote_oid..$local_oid"
		fi

		# Check for WIP commit
		commit=$(git rev-list -n 1 --grep '^WIP' "$range")
		if test -n "$commit"
		then
			echo >&2 "Found WIP commit in $local_ref, not pushing"
			exit 1
		fi
	fi
done

exit 0

</code>

.git_disabled\hooks\pre-rebase.sample:
<code>
#!/bin/sh
#
# Copyright (c) 2006, 2008 Junio C Hamano
#
# The "pre-rebase" hook is run just before "git rebase" starts doing
# its job, and can prevent the command from running by exiting with
# non-zero status.
#
# The hook is called with the following parameters:
#
# $1 -- the upstream the series was forked from.
# $2 -- the branch being rebased (or empty when rebasing the current branch).
#
# This sample shows how to prevent topic branches that are already
# merged to 'next' branch from getting rebased, because allowing it
# would result in rebasing already published history.

publish=next
basebranch="$1"
if test "$#" = 2
then
	topic="refs/heads/$2"
else
	topic=`git symbolic-ref HEAD` ||
	exit 0 ;# we do not interrupt rebasing detached HEAD
fi

case "$topic" in
refs/heads/??/*)
	;;
*)
	exit 0 ;# we do not interrupt others.
	;;
esac

# Now we are dealing with a topic branch being rebased
# on top of master.  Is it OK to rebase it?

# Does the topic really exist?
git show-ref -q "$topic" || {
	echo >&2 "No such branch $topic"
	exit 1
}

# Is topic fully merged to master?
not_in_master=`git rev-list --pretty=oneline ^master "$topic"`
if test -z "$not_in_master"
then
	echo >&2 "$topic is fully merged to master; better remove it."
	exit 1 ;# we could allow it, but there is no point.
fi

# Is topic ever merged to next?  If so you should not be rebasing it.
only_next_1=`git rev-list ^master "^$topic" ${publish} | sort`
only_next_2=`git rev-list ^master           ${publish} | sort`
if test "$only_next_1" = "$only_next_2"
then
	not_in_topic=`git rev-list "^$topic" master`
	if test -z "$not_in_topic"
	then
		echo >&2 "$topic is already up to date with master"
		exit 1 ;# we could allow it, but there is no point.
	else
		exit 0
	fi
else
	not_in_next=`git rev-list --pretty=oneline ^${publish} "$topic"`
	/usr/bin/perl -e '
		my $topic = $ARGV[0];
		my $msg = "* $topic has commits already merged to public branch:\n";
		my (%not_in_next) = map {
			/^([0-9a-f]+) /;
			($1 => 1);
		} split(/\n/, $ARGV[1]);
		for my $elem (map {
				/^([0-9a-f]+) (.*)$/;
				[$1 => $2];
			} split(/\n/, $ARGV[2])) {
			if (!exists $not_in_next{$elem->[0]}) {
				if ($msg) {
					print STDERR $msg;
					undef $msg;
				}
				print STDERR " $elem->[1]\n";
			}
		}
	' "$topic" "$not_in_next" "$not_in_master"
	exit 1
fi

<<\DOC_END

This sample hook safeguards topic branches that have been
published from being rewound.

The workflow assumed here is:

 * Once a topic branch forks from "master", "master" is never
   merged into it again (either directly or indirectly).

 * Once a topic branch is fully cooked and merged into "master",
   it is deleted.  If you need to build on top of it to correct
   earlier mistakes, a new topic branch is created by forking at
   the tip of the "master".  This is not strictly necessary, but
   it makes it easier to keep your history simple.

 * Whenever you need to test or publish your changes to topic
   branches, merge them into "next" branch.

The script, being an example, hardcodes the publish branch name
to be "next", but it is trivial to make it configurable via
$GIT_DIR/config mechanism.

With this workflow, you would want to know:

(1) ... if a topic branch has ever been merged to "next".  Young
    topic branches can have stupid mistakes you would rather
    clean up before publishing, and things that have not been
    merged into other branches can be easily rebased without
    affecting other people.  But once it is published, you would
    not want to rewind it.

(2) ... if a topic branch has been fully merged to "master".
    Then you can delete it.  More importantly, you should not
    build on top of it -- other people may already want to
    change things related to the topic as patches against your
    "master", so if you need further changes, it is better to
    fork the topic (perhaps with the same name) afresh from the
    tip of "master".

Let's look at this example:

		   o---o---o---o---o---o---o---o---o---o "next"
		  /       /           /           /
		 /   a---a---b A     /           /
		/   /               /           /
	       /   /   c---c---c---c B         /
	      /   /   /             \         /
	     /   /   /   b---b C     \       /
	    /   /   /   /             \     /
    ---o---o---o---o---o---o---o---o---o---o---o "master"


A, B and C are topic branches.

 * A has one fix since it was merged up to "next".

 * B has finished.  It has been fully merged up to "master" and "next",
   and is ready to be deleted.

 * C has not merged to "next" at all.

We would want to allow C to be rebased, refuse A, and encourage
B to be deleted.

To compute (1):

	git rev-list ^master ^topic next
	git rev-list ^master        next

	if these match, topic has not merged in next at all.

To compute (2):

	git rev-list master..topic

	if this is empty, it is fully merged to "master".

DOC_END

</code>

.git_disabled\hooks\pre-receive.sample:
<code>
#!/bin/sh
#
# An example hook script to make use of push options.
# The example simply echoes all push options that start with 'echoback='
# and rejects all pushes when the "reject" push option is used.
#
# To enable this hook, rename this file to "pre-receive".

if test -n "$GIT_PUSH_OPTION_COUNT"
then
	i=0
	while test "$i" -lt "$GIT_PUSH_OPTION_COUNT"
	do
		eval "value=\$GIT_PUSH_OPTION_$i"
		case "$value" in
		echoback=*)
			echo "echo from the pre-receive-hook: ${value#*=}" >&2
			;;
		reject)
			exit 1
		esac
		i=$((i + 1))
	done
fi

</code>

.git_disabled\hooks\prepare-commit-msg.sample:
<code>
#!/bin/sh
#
# An example hook script to prepare the commit log message.
# Called by "git commit" with the name of the file that has the
# commit message, followed by the description of the commit
# message's source.  The hook's purpose is to edit the commit
# message file.  If the hook fails with a non-zero status,
# the commit is aborted.
#
# To enable this hook, rename this file to "prepare-commit-msg".

# This hook includes three examples. The first one removes the
# "# Please enter the commit message..." help message.
#
# The second includes the output of "git diff --name-status -r"
# into the message, just before the "git status" output.  It is
# commented because it doesn't cope with --amend or with squashed
# commits.
#
# The third example adds a Signed-off-by line to the message, that can
# still be edited.  This is rarely a good idea.

COMMIT_MSG_FILE=$1
COMMIT_SOURCE=$2
SHA1=$3

/usr/bin/perl -i.bak -ne 'print unless(m/^. Please enter the commit message/..m/^#$/)' "$COMMIT_MSG_FILE"

# case "$COMMIT_SOURCE,$SHA1" in
#  ,|template,)
#    /usr/bin/perl -i.bak -pe '
#       print "\n" . `git diff --cached --name-status -r`
# 	 if /^#/ && $first++ == 0' "$COMMIT_MSG_FILE" ;;
#  *) ;;
# esac

# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
# git interpret-trailers --in-place --trailer "$SOB" "$COMMIT_MSG_FILE"
# if test -z "$COMMIT_SOURCE"
# then
#   /usr/bin/perl -i.bak -pe 'print "\n" if !$first_line++' "$COMMIT_MSG_FILE"
# fi

</code>

.git_disabled\hooks\push-to-checkout.sample:
<code>
#!/bin/sh

# An example hook script to update a checked-out tree on a git push.
#
# This hook is invoked by git-receive-pack(1) when it reacts to git
# push and updates reference(s) in its repository, and when the push
# tries to update the branch that is currently checked out and the
# receive.denyCurrentBranch configuration variable is set to
# updateInstead.
#
# By default, such a push is refused if the working tree and the index
# of the remote repository has any difference from the currently
# checked out commit; when both the working tree and the index match
# the current commit, they are updated to match the newly pushed tip
# of the branch. This hook is to be used to override the default
# behaviour; however the code below reimplements the default behaviour
# as a starting point for convenient modification.
#
# The hook receives the commit with which the tip of the current
# branch is going to be updated:
commit=$1

# It can exit with a non-zero status to refuse the push (when it does
# so, it must not modify the index or the working tree).
die () {
	echo >&2 "$*"
	exit 1
}

# Or it can make any necessary changes to the working tree and to the
# index to bring them to the desired state when the tip of the current
# branch is updated to the new commit, and exit with a zero status.
#
# For example, the hook can simply run git read-tree -u -m HEAD "$1"
# in order to emulate git fetch that is run in the reverse direction
# with git push, as the two-tree form of git read-tree -u -m is
# essentially the same as git switch or git checkout that switches
# branches while keeping the local changes in the working tree that do
# not interfere with the difference between the branches.

# The below is a more-or-less exact translation to shell of the C code
# for the default behaviour for git's push-to-checkout hook defined in
# the push_to_deploy() function in builtin/receive-pack.c.
#
# Note that the hook will be executed from the repository directory,
# not from the working tree, so if you want to perform operations on
# the working tree, you will have to adapt your code accordingly, e.g.
# by adding "cd .." or using relative paths.

if ! git update-index -q --ignore-submodules --refresh
then
	die "Up-to-date check failed"
fi

if ! git diff-files --quiet --ignore-submodules --
then
	die "Working directory has unstaged changes"
fi

# This is a rough translation of:
#
#   head_has_history() ? "HEAD" : EMPTY_TREE_SHA1_HEX
if git cat-file -e HEAD 2>/dev/null
then
	head=HEAD
else
	head=$(git hash-object -t tree --stdin </dev/null)
fi

if ! git diff-index --quiet --cached --ignore-submodules $head --
then
	die "Working directory has staged changes"
fi

if ! git read-tree -u -m "$commit"
then
	die "Could not update working tree to new HEAD"
fi

</code>

.git_disabled\hooks\sendemail-validate.sample:
<code>
#!/bin/sh

# An example hook script to validate a patch (and/or patch series) before
# sending it via email.
#
# The hook should exit with non-zero status after issuing an appropriate
# message if it wants to prevent the email(s) from being sent.
#
# To enable this hook, rename this file to "sendemail-validate".
#
# By default, it will only check that the patch(es) can be applied on top of
# the default upstream branch without conflicts in a secondary worktree. After
# validation (successful or not) of the last patch of a series, the worktree
# will be deleted.
#
# The following config variables can be set to change the default remote and
# remote ref that are used to apply the patches against:
#
#   sendemail.validateRemote (default: origin)
#   sendemail.validateRemoteRef (default: HEAD)
#
# Replace the TODO placeholders with appropriate checks according to your
# needs.

validate_cover_letter () {
	file="$1"
	# TODO: Replace with appropriate checks (e.g. spell checking).
	true
}

validate_patch () {
	file="$1"
	# Ensure that the patch applies without conflicts.
	git am -3 "$file" || return
	# TODO: Replace with appropriate checks for this patch
	# (e.g. checkpatch.pl).
	true
}

validate_series () {
	# TODO: Replace with appropriate checks for the whole series
	# (e.g. quick build, coding style checks, etc.).
	true
}

# main -------------------------------------------------------------------------

if test "$GIT_SENDEMAIL_FILE_COUNTER" = 1
then
	remote=$(git config --default origin --get sendemail.validateRemote) &&
	ref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&
	worktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&
	git worktree add -fd --checkout "$worktree" "refs/remotes/$remote/$ref" &&
	git config --replace-all sendemail.validateWorktree "$worktree"
else
	worktree=$(git config --get sendemail.validateWorktree)
fi || {
	echo "sendemail-validate: error: failed to prepare worktree" >&2
	exit 1
}

unset GIT_DIR GIT_WORK_TREE
cd "$worktree" &&

if grep -q "^diff --git " "$1"
then
	validate_patch "$1"
else
	validate_cover_letter "$1"
fi &&

if test "$GIT_SENDEMAIL_FILE_COUNTER" = "$GIT_SENDEMAIL_FILE_TOTAL"
then
	git config --unset-all sendemail.validateWorktree &&
	trap 'git worktree remove -ff "$worktree"' EXIT &&
	validate_series
fi

</code>

.git_disabled\hooks\update.sample:
<code>
#!/bin/sh
#
# An example hook script to block unannotated tags from entering.
# Called by "git receive-pack" with arguments: refname sha1-old sha1-new
#
# To enable this hook, rename this file to "update".
#
# Config
# ------
# hooks.allowunannotated
#   This boolean sets whether unannotated tags will be allowed into the
#   repository.  By default they won't be.
# hooks.allowdeletetag
#   This boolean sets whether deleting tags will be allowed in the
#   repository.  By default they won't be.
# hooks.allowmodifytag
#   This boolean sets whether a tag may be modified after creation. By default
#   it won't be.
# hooks.allowdeletebranch
#   This boolean sets whether deleting branches will be allowed in the
#   repository.  By default they won't be.
# hooks.denycreatebranch
#   This boolean sets whether remotely creating branches will be denied
#   in the repository.  By default this is allowed.
#

# --- Command line
refname="$1"
oldrev="$2"
newrev="$3"

# --- Safety check
if [ -z "$GIT_DIR" ]; then
	echo "Don't run this script from the command line." >&2
	echo " (if you want, you could supply GIT_DIR then run" >&2
	echo "  $0 <ref> <oldrev> <newrev>)" >&2
	exit 1
fi

if [ -z "$refname" -o -z "$oldrev" -o -z "$newrev" ]; then
	echo "usage: $0 <ref> <oldrev> <newrev>" >&2
	exit 1
fi

# --- Config
allowunannotated=$(git config --type=bool hooks.allowunannotated)
allowdeletebranch=$(git config --type=bool hooks.allowdeletebranch)
denycreatebranch=$(git config --type=bool hooks.denycreatebranch)
allowdeletetag=$(git config --type=bool hooks.allowdeletetag)
allowmodifytag=$(git config --type=bool hooks.allowmodifytag)

# check for no description
projectdesc=$(sed -e '1q' "$GIT_DIR/description")
case "$projectdesc" in
"Unnamed repository"* | "")
	echo "*** Project description file hasn't been set" >&2
	exit 1
	;;
esac

# --- Check types
# if $newrev is 0000...0000, it's a commit to delete a ref.
zero=$(git hash-object --stdin </dev/null | tr '[0-9a-f]' '0')
if [ "$newrev" = "$zero" ]; then
	newrev_type=delete
else
	newrev_type=$(git cat-file -t $newrev)
fi

case "$refname","$newrev_type" in
	refs/tags/*,commit)
		# un-annotated tag
		short_refname=${refname##refs/tags/}
		if [ "$allowunannotated" != "true" ]; then
			echo "*** The un-annotated tag, $short_refname, is not allowed in this repository" >&2
			echo "*** Use 'git tag [ -a | -s ]' for tags you want to propagate." >&2
			exit 1
		fi
		;;
	refs/tags/*,delete)
		# delete tag
		if [ "$allowdeletetag" != "true" ]; then
			echo "*** Deleting a tag is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/tags/*,tag)
		# annotated tag
		if [ "$allowmodifytag" != "true" ] && git rev-parse $refname > /dev/null 2>&1
		then
			echo "*** Tag '$refname' already exists." >&2
			echo "*** Modifying a tag is not allowed in this repository." >&2
			exit 1
		fi
		;;
	refs/heads/*,commit)
		# branch
		if [ "$oldrev" = "$zero" -a "$denycreatebranch" = "true" ]; then
			echo "*** Creating a branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/heads/*,delete)
		# delete branch
		if [ "$allowdeletebranch" != "true" ]; then
			echo "*** Deleting a branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/remotes/*,commit)
		# tracking branch
		;;
	refs/remotes/*,delete)
		# delete tracking branch
		if [ "$allowdeletebranch" != "true" ]; then
			echo "*** Deleting a tracking branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	*)
		# Anything else (is there anything else?)
		echo "*** Update hook: unknown type of update to ref $refname of type $newrev_type" >&2
		exit 1
		;;
esac

# --- Finished
exit 0

</code>

.git_disabled\info\exclude:
<code>
# git ls-files --others --exclude-from=.git/info/exclude
# Lines that start with '#' are comments.
# For a project mostly in C, the following would be a good set of
# exclude patterns (uncomment them if you want to use them):
# *.[oa]
# *~

</code>

.git_disabled\objects\1a\d487a68883d1605eb03d9f70cf88c1979c47a8:
<code>
xA0EgSx_&vXP\E6U?CރϽ]C8g MΘ|AI%G!M-/>8)Btm%hÅ#Q>ՇV~Ko{pS9	߳~Lׇu+f7XE*_$L~vG`{E>зP
</code>

.git_disabled\objects\38\14c19270084a4c52df0ec8e83ceb270a020764:
<code>
x}j@ECԊz)*M@Iq /U!+yRoUM[ivB)g3SOos!sxiWB/[&+4.IxD9;k8#&	mF_Y@:|P=9`'Am7',+g( YVJR`z}
KqnǿXh~U,[lH"jzF5$<A@z߫ўkRa:ki#}P*hG:/|q
6T3FaG8rPsH{qL+
|4و#gTc&gwƧ6cYq{ÞwKO	hu
</code>

.git_disabled\objects\38\79c356906d2d64a619180e7b613172b37a7128:
<code>
xKn D)z?ƸAE9D.c|hrlW|lvS,kBE)\G;;^PP
$^
fQ,7xiL#W+ğSop/frܯY#y>/UZnnF:D[byBå?Jek^A	(1qԯ/M_h
</code>

.git_disabled\objects\4b\6ee9970b85fc6f1e120251b74076181c9c4cf6:
<code>
x+)JMU04d040031QNM-`x6M9{wk+qIODļĜʪT܂Ԋ̒Jb_Z~\~_͝[w@'&e椂oJIVycL9sQ.?j]MC椖Sh^@aa]ڡUꞚZZ\WvE@_[l?(uEg^IjQYfjc^qyjA;ԵwWYU9IzRssSR@*+ox2g|櫏?
_=rb"$ޅƹf3.3f}kg8nkŵ&'	慹`.).I,*;d(M>4Dqڊ/l
Pɵ
</code>

.git_disabled\objects\ab\efc49e32ba319887e9bd0c75c5413d2c42d0a5:
<code>
xMN0YxJ4!~h(M%=axa	yTw+,L[o4[g
7Ώd`RHztdd%ҹ"4y6-[=g[rClT*Fvmu?hU{am߅C]K5gOɩW;.p<yLSgs	kK
</code>

.git_disabled\objects\b7\da425dc322b1df4b0abf0e53bdcc0c392f4630:
<code>
xIj0@Ѭuڇ6%UirҔX12;/?1c]B9;ՖIǖ(,*NHEk)W=Fn>69Z;a2%zd(2{yIMR
oyoRtڰOU_A@:䧬4?"#L
</code>

.git_disabled\objects\c0\eb4e747f9702194708cb28c3964e99b85152d5:
<code>
xώ09)nDBe	&$63NiGn=o~3ҎPի5\<H!7%
ת QU۶&tdYTTUbDV-aslQ(T15^Y*\bջnD=,B)uP^r@ah$)J[|m?~ްQ	>(w\@?wda\ޣr.<LlU hLH>hk<H{$MGZ@oF_J6:CK&gIS3xp$l,g}S~kA:-=j{uޞ<$Ԑd)vNW\H蹶u;I3P!C\6r3
xh_"MMgrϣc؆D<B2caI|d>63p"2p$+&i(1Mlǆ#B+
</code>

.git_disabled\objects\c3\46919b74899913af4d0b53c230e30f1aa86ee0:
<code>
x+)JMU00e040031Q(-NuH,q,.,.I++)fNuWȮ#$g$'2Z6Y@".mRĜb;OmvX|gCڞ9l
Ař%E`{{N5p=/~c>	uL
</code>

.git_disabled\objects\dc\d8a912d836112d2dd2db831bba1d9e939348ec:
<code>
x=j0S[&!59zzؒd)fo(G 'T330.dVIogi3X3
Γi5([GVN{ZN[ʀ]W3Ww탰>P:a\B@+c}mXTsnD=d>w$bϏP߱+rfVJ`Ùq)Mx n9l
</code>

.git_disabled\objects\e0\9ad5cde4c6a3188db26f322664768467f3bd71:
<code>
x9n0@: 
%R5En9.`{l)Qm(>ޤcNWnꁋObtw7j=F/&HrVx}.c̓>hpJױ=p?6'\	:i^B-OC)y
(Pu
</code>

.git_disabled\objects\ee\be724394746bf4096d1fc928b00a22ae22d854:
<code>
x+)JMU00e040031Q(-NuH,q,.,.I++)f2k[3?aJY2Q=!$g$'2Z6Y@".mRĜb;OmvX|gCڞ9l
Ař%E`{{N5p=/~c>	 M
</code>

.git_disabled\objects\f5\6aef32d449c7f636fb87b966963e83e6dcbc2b:
<code>
xAN a={c3@JbXi}wp/evq^t\ =8&v9zv[#:5Z.TUr7F*iGJAapЭ_c:ƣj$2
g\hFiy<sThaQ)znt|K7{SxR
</code>

.git_disabled\objects\f8\1eacd6b094f79f39edd3540cb7f0116a432268:
<code>
xAN @]Ԩ_(1FctJ5z////I)Ufɑ%膡`T>[@8
FĶ'BrZhRh&T:E*\d{eoV$<a}>\0ϧ$LBo=*Twc?ݛu-Jz}~oy9ÇDh|xkWn`ɉR-'(BZe[Zp*H@3~]q
</code>

.git_disabled\refs\heads\master:
<code>
0c909c0aad308036c8d1a57b4d209eefde86a84e

</code>

.git_disabled\refs\remotes\origin\HEAD:
<code>
ref: refs/remotes/origin/master

</code>

.git_disabled\refs\remotes\origin\master:
<code>
0c909c0aad308036c8d1a57b4d209eefde86a84e

</code>

.git_disabled\COMMIT_EDITMSG:
<code>
chatbot api update

</code>

.git_disabled\config:
<code>
[core]
	repositoryformatversion = 0
	filemode = false
	bare = false
	logallrefupdates = true
	symlinks = false
	ignorecase = true
[remote "origin"]
	url = https://github.com/almond-donut/NeatRepo
	fetch = +refs/heads/*:refs/remotes/origin/*
[branch "master"]
	remote = origin
	merge = refs/heads/master
	vscode-merge-base = origin/master

</code>

.git_disabled\description:
<code>
Unnamed repository; edit this file 'description' to name the repository.

</code>

.git_disabled\FETCH_HEAD:
<code>
d99394931af4599e010dd919db76821be4aa47fd		branch 'master' of https://github.com/almond-donut/NeatRepo

</code>

.git_disabled\HEAD:
<code>
ref: refs/heads/master

</code>

.git_disabled\ORIG_HEAD:
<code>
abefc49e32ba319887e9bd0c75c5413d2c42d0a5

</code>

.git_disabled\packed-refs:
<code>
# pack-refs with: peeled fully-peeled sorted 
de580ce5dfaf646c29987af02c433bf60f7f758a refs/remotes/origin/master
04dd95241f9aed9c1517b153eb8a538bc69e6049 refs/remotes/origin/refactor-ai-assistant-engine-and-update-authentication-state-management

</code>

.git_disabled\REBASE_HEAD:
<code>
abefc49e32ba319887e9bd0c75c5413d2c42d0a5

</code>

app\api\analyze\route.ts:
<code>
import { type NextRequest, NextResponse } from "next/server"
import { geminiAI } from "@/lib/gemini"

export async function POST(request: NextRequest) {
  try {
    const { repository, userProfile } = await request.json()

    if (!repository) {
      return NextResponse.json({ error: "Repository data is required" }, { status: 400 })
    }

    // Analyze repository using Gemini AI
    const analysis = await geminiAI.analyzeRepository(repository, userProfile)

    return NextResponse.json({
      success: true,
      analysis,
    })
  } catch (error) {
    console.error("Analysis error:", error)
    return NextResponse.json({ error: "Failed to analyze repository" }, { status: 500 })
  }
}

</code>

app\api\auth\callback\route.ts:
<code>
// app/api/auth/callback/route.ts
import { createServerClient, type CookieOptions } from '@supabase/ssr'
import { NextResponse, type NextRequest } from 'next/server'

export async function GET(request: NextRequest) {
  const { searchParams, origin } = new URL(request.url)
  const code = searchParams.get('code')
  // if "next" is in param, use it as the redirect URL
  const next = searchParams.get('next') ?? '/dashboard'

  if (code) {
    // 1. Create the NextResponse object to redirect the user
    const response = NextResponse.redirect(`${origin}${next}`)

    // 2. Create a Supabase client that can write cookies to the response object
    const supabase = createServerClient(
      process.env.NEXT_PUBLIC_SUPABASE_URL!,
      process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
      {
        cookies: {
          get(name: string) {
            return request.cookies.get(name)?.value
          },
          set(name: string, value: string, options: CookieOptions) {
            // The auth helper will call this function to set the session cookies
            response.cookies.set({ name, value, ...options })
          },
          remove(name: string, options: CookieOptions) {
            // The auth helper will call this function to remove the session cookies
            response.cookies.set({ name, value: '', ...options })
          },
        },
      }
    )

    // 3. Exchange the auth code for a session, which automatically sets the cookies on the response
    const { error } = await supabase.auth.exchangeCodeForSession(code)
    if (!error) {
      // 4. Return the response object which now has the session cookies
      return response
    }
  }

  // If there's an error or no code, redirect to an error page
  console.error('AUTH CALLBACK ERROR: Could not exchange code for session.');
  return NextResponse.redirect(`${origin}/auth/error`)
}
</code>

app\api\bug-report\route.ts:
<code>
import { NextRequest, NextResponse } from 'next/server'
import nodemailer from 'nodemailer'
import { createClient } from '@supabase/supabase-js'

// Initialize Supabase client
const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
)

export async function POST(request: NextRequest) {
  try {
    const formData = await request.formData()
    
    // Extract form fields
    const userEmail = formData.get('userEmail') as string
    const bugTitle = formData.get('bugTitle') as string
    const bugDescription = formData.get('bugDescription') as string
    const stepsToReproduce = formData.get('stepsToReproduce') as string
    const expectedBehavior = formData.get('expectedBehavior') as string
    const actualBehavior = formData.get('actualBehavior') as string
    const browserInfo = formData.get('browserInfo') as string
    const additionalInfo = formData.get('additionalInfo') as string
    const timestamp = formData.get('timestamp') as string
    const url = formData.get('url') as string
    const referrer = formData.get('referrer') as string

    // Extract and upload screenshots to Supabase
    const screenshotUrls: string[] = []
    const attachments: { filename: string; content: Buffer; cid: string }[] = []
    for (const [key, value] of formData.entries()) {
      if (key.startsWith('screenshot_') && value instanceof File) {
        try {
          const fileExt = value.name.split('.').pop()
          const fileName = `bug-reports/${Date.now()}-${Math.random().toString(36).substring(2)}.${fileExt}`

          const { data, error } = await supabase.storage
            .from('bug-reports') // Using dedicated bug-reports bucket
            .upload(fileName, value, {
              contentType: value.type,
              upsert: false
            })

          if (error) {
            console.error('Error uploading screenshot:', error)
            // Continue without this screenshot rather than failing completely
          } else {
            // Get public URL
            const { data: { publicUrl } } = supabase.storage
              .from('bug-reports')
              .getPublicUrl(fileName)

            screenshotUrls.push(publicUrl)

            // Prepare inline attachment for email (download from uploaded File)
            const arrayBuffer = await value.arrayBuffer()
            attachments.push({
              filename: value.name,
              content: Buffer.from(arrayBuffer),
              cid: `screenshot-${attachments.length}`
            })
          }
        } catch (uploadError) {
          console.error('Screenshot upload error:', uploadError)
          // Continue without this screenshot
        }
      }
    }

    // Validate required fields
    if (!userEmail || !bugTitle || !bugDescription) {
      return NextResponse.json(
        { error: 'Missing required fields' },
        { status: 400 }
      )
    }

    // Determine if SMTP email service is configured
    const emailServiceAvailable = !!process.env.SMTP_USER && !!process.env.SMTP_PASS;
    console.log('📧 Email service available:', emailServiceAvailable, {
      hasUser: !!process.env.SMTP_USER,
      hasPass: !!process.env.SMTP_PASS
    });

    // Create email transporter only if service is available
    const transporter = emailServiceAvailable
      ? nodemailer.createTransport({
          service: 'gmail',
          auth: {
            user: process.env.SMTP_USER,
            pass: process.env.SMTP_PASS
          }
        })
      : null;

    // Format email content (plain text for fallback)
    const textContent = `
🐛 NEW BUG REPORT - NeatRepo

📧 Reporter Email: ${userEmail}
🕒 Timestamp: ${new Date(timestamp).toLocaleString('id-ID', { timeZone: 'Asia/Jakarta' })}
🌐 URL: ${url}
🔗 Referrer: ${referrer || 'Direct access'}

═══════════════════════════════════════

📋 BUG TITLE:
${bugTitle}

📝 DETAILED DESCRIPTION:
${bugDescription}

${stepsToReproduce ? `🔄 STEPS TO REPRODUCE:
${stepsToReproduce}

` : ''}${expectedBehavior ? `✅ EXPECTED BEHAVIOR:
${expectedBehavior}

` : ''}${actualBehavior ? `❌ ACTUAL BEHAVIOR:
${actualBehavior}

` : ''}🌐 BROWSER INFO:
${browserInfo}

${additionalInfo ? `ℹ️ ADDITIONAL INFO:
${additionalInfo}

` : ''}═══════════════════════════════════════

📸 Screenshots: ${screenshotUrls.length} file(s) uploaded to Supabase
${screenshotUrls.length > 0 ? `
🔗 Screenshot URLs:
${screenshotUrls.map((url, index) => `${index + 1}. ${url}`).join('\n')}
` : ''}
🔧 Auto-generated by NeatRepo Bug Report System
    `

    // HTML version with inline images
    const htmlContent = `
      <h2>🐛 NEW BUG REPORT - NeatRepo</h2>
      <p><strong>Reporter Email:</strong> ${userEmail}<br/>
      <strong>Timestamp:</strong> ${new Date(timestamp).toLocaleString('id-ID', { timeZone: 'Asia/Jakarta' })}<br/>
      <strong>URL:</strong> <a href="${url}">${url}</a><br/>
      <strong>Referrer:</strong> ${referrer || 'Direct access'}</p>
      <hr/>
      <h3>📋 BUG TITLE</h3>
      <p>${bugTitle}</p>
      <h3>📝 DETAILED DESCRIPTION</h3>
      <p>${bugDescription.replace(/\n/g,'<br/>')}</p>
      ${stepsToReproduce ? `<h3>🔄 STEPS TO REPRODUCE</h3><p>${stepsToReproduce.replace(/\n/g,'<br/>')}</p>` : ''}
      ${expectedBehavior ? `<h3>✅ EXPECTED BEHAVIOR</h3><p>${expectedBehavior.replace(/\n/g,'<br/>')}</p>` : ''}
      ${actualBehavior ? `<h3>❌ ACTUAL BEHAVIOR</h3><p>${actualBehavior.replace(/\n/g,'<br/>')}</p>` : ''}
      <h3>🌐 BROWSER INFO</h3>
      <p>${browserInfo}</p>
      ${additionalInfo ? `<h3>ℹ️ ADDITIONAL INFO</h3><p>${additionalInfo.replace(/\n/g,'<br/>')}</p>` : ''}
      <hr/>
      <h3>📸 Screenshots (${attachments.length})</h3>
      ${attachments.map((att, idx) => `<p><img src="cid:${att.cid}" style="max-width:100%;border:1px solid #ccc" alt="screenshot ${idx+1}"/></p>`).join('')}
      <p>🔧 Auto-generated by NeatRepo Bug Report System</p>
    `;

    // Send email if service is available
    if (emailServiceAvailable && transporter) {
      try {
        console.log('📧 Attempting to send email to:', 'prada.202201006@student.stikomyos.ac.id');
        await transporter.sendMail({
          from: process.env.SMTP_USER!,
          to: 'prada.202201006@student.stikomyos.ac.id',
          replyTo: userEmail,
          subject: `🐛 Bug Report: ${bugTitle} - NeatRepo`,
          text: textContent,
          html: htmlContent,
          attachments
          // No attachments needed since screenshots are in Supabase with URLs
        });
        console.log('✅ Email sent successfully!');
      } catch (emailError) {
        console.error('❌ Email sending failed:', emailError);
        // Don't fail the whole request if email fails
      }
    } else {
      console.log('📭 Email service not configured – bug report stored with screenshots in Supabase.')
    }

    return NextResponse.json({ 
      success: true, 
      message: 'Bug report sent successfully' 
    })

  } catch (error) {
    console.error('Error sending bug report:', error)
    return NextResponse.json(
      { error: 'Failed to send bug report' },
      { status: 500 }
    )
  }
}

</code>

app\api\session\route.ts:
<code>
import { type NextRequest, NextResponse } from "next/server"

export async function GET(request: NextRequest) {
  try {
    const sessionCookie = request.cookies.get("github_session")

    if (!sessionCookie) {
      return NextResponse.json({ error: "No session found" }, { status: 401 })
    }

    const sessionData = JSON.parse(sessionCookie.value)

    // Verify session is still valid (not expired)
    const authenticatedAt = new Date(sessionData.authenticated_at)
    const now = new Date()
    const daysSinceAuth = (now.getTime() - authenticatedAt.getTime()) / (1000 * 60 * 60 * 24)

    if (daysSinceAuth > 7) {
      // Session expired
      return NextResponse.json({ error: "Session expired" }, { status: 401 })
    }

    // Remove sensitive data before sending to client
    const { access_token, ...safeSessionData } = sessionData

    return NextResponse.json(safeSessionData)
  } catch (error) {
    console.error("Session fetch error:", error)
    return NextResponse.json({ error: "Invalid session" }, { status: 401 })
  }
}

export async function DELETE(request: NextRequest) {
  try {
    const response = NextResponse.json({ success: true })

    // Clear the session cookie
    response.cookies.set("github_session", "", {
      httpOnly: true,
      secure: process.env.NODE_ENV === "production",
      sameSite: "lax",
      maxAge: 0, // Expire immediately
    })

    return response
  } catch (error) {
    console.error("Session delete error:", error)
    return NextResponse.json({ error: "Failed to sign out" }, { status: 500 })
  }
}

</code>

app\api\user\profile\route.ts:
<code>

import { createServerClient } from '@supabase/ssr';
import { cookies } from 'next/headers';
import { NextResponse } from 'next/server';

export const dynamic = 'force-dynamic';

export async function GET() {
  const cookieStore = cookies();

  // Create a server-side Supabase client that can read the user's session from cookies
  const supabase = createServerClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    {
      cookies: {
        get(name: string) {
          return cookieStore.get(name)?.value;
        },
      },
    }
  );

  try {
    // 1. Get the current user's session
    const { data: { session } } = await supabase.auth.getSession();

    if (!session) {
      return NextResponse.json({ error: 'Not authenticated' }, { status: 401 });
    }

    // 2. Securely fetch the profile for the authenticated user
    const { data: profile, error: profileError } = await supabase
      .from('user_profiles')
      .select('*')
      .eq('id', session.user.id)
      .single();

    if (profileError) {
      // This is expected if the profile hasn't been created yet
      if (profileError.code === 'PGRST116') {
        console.log(`API: No profile found for user ${session.user.id}, returning null.`);
        return NextResponse.json(null, { status: 200 });
      }
      // For other errors, log them and return a server error
      console.error('API Profile Fetch DB Error:', profileError);
      return NextResponse.json({ error: 'Failed to fetch profile from database' }, { status: 500 });
    }

    // 3. Return the profile data
    return NextResponse.json(profile);

  } catch (error) {
    console.error('API Profile Fetch CATCH Error:', error);
    return NextResponse.json({ error: 'An unexpected error occurred' }, { status: 500 });
  }
}

</code>

app\auth\error\page.tsx:
<code>
"use client"

import { useSearchParams, useRouter } from 'next/navigation'
import { useEffect, useState } from 'react'
import { Button } from '@/components/ui/button'
import { AlertCircle, Home, RefreshCw } from 'lucide-react'

export default function AuthErrorPage() {
  const searchParams = useSearchParams()
  const router = useRouter()
  const [error, setError] = useState<string>('')

  useEffect(() => {
    const errorParam = searchParams.get('error')
    setError(errorParam || 'Unknown authentication error')
  }, [searchParams])

  const handleRetry = () => {
    router.push('/')
  }

  const handleGoHome = () => {
    router.push('/')
  }

  return (
    <div className="min-h-screen flex items-center justify-center bg-background">
      <div className="max-w-md w-full mx-4 text-center space-y-6">
        <div className="flex justify-center">
          <div className="rounded-full bg-destructive/10 p-3">
            <AlertCircle className="h-8 w-8 text-destructive" />
          </div>
        </div>
        <div className="space-y-2">
          <h1 className="text-2xl font-bold tracking-tight">
            Authentication Error
          </h1>
          <p className="text-muted-foreground">
            We encountered an issue while trying to sign you in.
          </p>
        </div>
        <div className="bg-muted/50 rounded-lg p-4">
          <p className="text-sm text-muted-foreground">
            <strong>Error:</strong> {error}
          </p>
        </div>
        <div className="space-y-3">
          <Button onClick={handleRetry} className="w-full" size="lg">
            <RefreshCw className="mr-2 h-4 w-4" />
            Try Again
          </Button>
          <Button onClick={handleGoHome} variant="outline" className="w-full" size="lg">
            <Home className="mr-2 h-4 w-4" />
            Go to Homepage
          </Button>
        </div>
      </div>
    </div>
  )
}

</code>

app\bug-report\page.tsx:
<code>
'use client'

// Force dynamic rendering to avoid static generation issues with auth
export const dynamic = 'force-dynamic'

import React, { useState, useEffect } from 'react'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Textarea } from '@/components/ui/textarea'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Label } from '@/components/ui/label'
import { Upload, Send, ArrowLeft, Bug, Camera, AlertCircle, Mail, Github } from 'lucide-react'
import { useRouter } from 'next/navigation'
import { Alert, AlertDescription } from '@/components/ui/alert'
import { useAuth } from '@/components/auth-provider'
import AuthForms from '@/components/auth-forms'

export default function BugReportPage() {
  const router = useRouter()
  const { user, loading } = useAuth()
  const [showAuthForms, setShowAuthForms] = useState(false)
  const [formData, setFormData] = useState({
    userEmail: '',
    bugTitle: '',
    bugDescription: '',
    stepsToReproduce: '',
    expectedBehavior: '',
    actualBehavior: '',
    browserInfo: '',
    additionalInfo: ''
  })
  const [screenshots, setScreenshots] = useState<File[]>([])
  const [isSubmitting, setIsSubmitting] = useState(false)
  const [submitStatus, setSubmitStatus] = useState<'idle' | 'success' | 'error'>('idle')
  const [authError, setAuthError] = useState<string | null>(null)

  // Auto-detect browser info and handle user email
  useEffect(() => {
    const browserInfo = `${navigator.userAgent} | Screen: ${screen.width}x${screen.height} | Viewport: ${window.innerWidth}x${window.innerHeight}`
    setFormData(prev => ({ ...prev, browserInfo }))
  }, [])

  // Handle user authentication and email detection
  useEffect(() => {
    if (user) {
      // Check if user has email (email login) or only OAuth
      if (user.email && !user.email.includes('github')) {
        // User logged in with email - use that email
        setFormData(prev => ({ ...prev, userEmail: user.email || '' }))
        setAuthError(null)
      } else {
        // User logged in with GitHub OAuth - need email login
        setAuthError('Please sign in with your email account to submit bug reports')
      }
    }
  }, [user])

  const handleInputChange = (field: string, value: string) => {
    setFormData(prev => ({ ...prev, [field]: value }))
  }

  const handleScreenshotUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const files = Array.from(event.target.files || [])
    setScreenshots(prev => [...prev, ...files].slice(0, 5)) // Max 5 screenshots
  }

  const removeScreenshot = (index: number) => {
    setScreenshots(prev => prev.filter((_, i) => i !== index))
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setIsSubmitting(true)
    setSubmitStatus('idle')

    try {
      const formDataToSend = new FormData()
      
      // Add form fields
      Object.entries(formData).forEach(([key, value]) => {
        formDataToSend.append(key, value)
      })
      
      // Add screenshots
      screenshots.forEach((file, index) => {
        formDataToSend.append(`screenshot_${index}`, file)
      })
      
      // Add timestamp and additional metadata
      formDataToSend.append('timestamp', new Date().toISOString())
      formDataToSend.append('url', window.location.href)
      formDataToSend.append('referrer', document.referrer)

      const response = await fetch('/api/bug-report', {
        method: 'POST',
        body: formDataToSend
      })

      if (response.ok) {
        setSubmitStatus('success')
        // Reset form after successful submission
        setTimeout(() => {
          router.push('/dashboard')
        }, 3000)
      } else {
        throw new Error('Failed to submit bug report')
      }
    } catch (error) {
      console.error('Error submitting bug report:', error)
      setSubmitStatus('error')
    } finally {
      setIsSubmitting(false)
    }
  }

  // Show auth forms modal if needed
  if (showAuthForms) {
    return <AuthForms onClose={() => setShowAuthForms(false)} />
  }

  // Show OAuth user needs email login
  if (authError && user) {
    return (
      <div className="min-h-screen bg-background flex items-center justify-center p-4">
        <Card className="w-full max-w-md">
          <CardContent className="pt-6 text-center">
            <div className="w-16 h-16 bg-blue-100 dark:bg-blue-900/20 rounded-full flex items-center justify-center mx-auto mb-4">
              <Mail className="w-8 h-8 text-blue-600 dark:text-blue-400" />
            </div>
            <h2 className="text-xl font-semibold mb-2">Email Account Required</h2>
            <p className="text-muted-foreground mb-4">
              To submit bug reports, please sign in with your email account instead of GitHub OAuth.
            </p>
            <div className="flex items-center justify-center gap-2 mb-4 text-sm text-muted-foreground">
              <Github className="w-4 h-4" />
              <span>Currently signed in with GitHub</span>
            </div>
            <div className="space-y-3">
              <Button
                onClick={() => setShowAuthForms(true)}
                className="w-full"
              >
                <Mail className="w-4 h-4 mr-2" />
                Sign In with Email
              </Button>
              <Button
                variant="outline"
                onClick={() => router.push('/dashboard')}
                className="w-full"
              >
                Back to Dashboard
              </Button>
            </div>
          </CardContent>
        </Card>
      </div>
    )
  }

  if (submitStatus === 'success') {
    return (
      <div className="min-h-screen bg-background flex items-center justify-center p-4">
        <Card className="w-full max-w-md">
          <CardContent className="pt-6 text-center">
            <div className="w-16 h-16 bg-green-100 dark:bg-green-900/20 rounded-full flex items-center justify-center mx-auto mb-4">
              <Send className="w-8 h-8 text-green-600 dark:text-green-400" />
            </div>
            <h2 className="text-xl font-semibold mb-2">Bug Report Sent!</h2>
            <p className="text-muted-foreground mb-4">
              Thank you for helping us improve NeatRepo. We'll review your report and get back to you if needed.
            </p>
            <p className="text-sm text-muted-foreground">
              You can now manually navigate to your desired page.
            </p>
          </CardContent>
        </Card>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-background">
      <div className="container mx-auto px-4 py-8 max-w-4xl">
        {/* Header */}
        <div className="flex items-center gap-4 mb-8">
          <Button
            variant="ghost"
            size="sm"
            onClick={() => router.back()}
            className="flex items-center gap-2"
          >
            <ArrowLeft className="w-4 h-4" />
            Back
          </Button>
          <div className="flex items-center gap-3">
            <div className="w-10 h-10 bg-red-100 dark:bg-red-900/20 rounded-lg flex items-center justify-center">
              <Bug className="w-5 h-5 text-red-600 dark:text-red-400" />
            </div>
            <div>
              <h1 className="text-2xl font-bold">Report a Bug</h1>
              <p className="text-muted-foreground">Help us improve NeatRepo by reporting issues</p>
            </div>
          </div>
        </div>

        {submitStatus === 'error' && (
          <Alert variant="destructive" className="mb-6">
            <AlertCircle className="h-4 w-4" />
            <AlertDescription>
              Failed to submit bug report. Please try again or contact support directly.
            </AlertDescription>
          </Alert>
        )}

        <form onSubmit={handleSubmit} className="space-y-6">
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            {/* Left Column */}
            <div className="space-y-6">
              <Card>
                <CardHeader>
                  <CardTitle className="text-lg">Contact Information</CardTitle>
                  <CardDescription>
                    We'll use this to follow up if needed
                  </CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div>
                    <Label htmlFor="userEmail">Your Email Address *</Label>
                    <Input
                      id="userEmail"
                      type="email"
                      placeholder="your.email@example.com"
                      value={formData.userEmail}
                      onChange={(e) => handleInputChange('userEmail', e.target.value)}
                      required
                    />
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle className="text-lg">Bug Details</CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div>
                    <Label htmlFor="bugTitle">Bug Title *</Label>
                    <Input
                      id="bugTitle"
                      placeholder="Brief description of the issue"
                      value={formData.bugTitle}
                      onChange={(e) => handleInputChange('bugTitle', e.target.value)}
                      required
                    />
                  </div>

                  <div>
                    <Label htmlFor="bugDescription">Detailed Description *</Label>
                    <Textarea
                      id="bugDescription"
                      placeholder="Describe what happened in detail..."
                      rows={4}
                      value={formData.bugDescription}
                      onChange={(e) => handleInputChange('bugDescription', e.target.value)}
                      required
                    />
                  </div>

                  <div>
                    <Label htmlFor="stepsToReproduce">Steps to Reproduce</Label>
                    <Textarea
                      id="stepsToReproduce"
                      placeholder="1. Go to...&#10;2. Click on...&#10;3. See error..."
                      rows={4}
                      value={formData.stepsToReproduce}
                      onChange={(e) => handleInputChange('stepsToReproduce', e.target.value)}
                    />
                  </div>
                </CardContent>
              </Card>
            </div>

            {/* Right Column */}
            <div className="space-y-6">
              <Card>
                <CardHeader>
                  <CardTitle className="text-lg flex items-center gap-2">
                    <Camera className="w-5 h-5" />
                    Screenshots
                  </CardTitle>
                  <CardDescription>
                    Upload screenshots to help us understand the issue (max 5 files)
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    <div className="border-2 border-dashed border-muted-foreground/25 rounded-lg p-6 text-center">
                      <Upload className="w-8 h-8 text-muted-foreground mx-auto mb-2" />
                      <Label htmlFor="screenshots" className="cursor-pointer">
                        <span className="text-sm font-medium">Click to upload screenshots</span>
                        <Input
                          id="screenshots"
                          type="file"
                          accept="image/*"
                          multiple
                          className="sr-only"
                          onChange={handleScreenshotUpload}
                        />
                      </Label>
                      <p className="text-xs text-muted-foreground mt-1">
                        PNG, JPG, GIF up to 10MB each
                      </p>
                    </div>

                    {screenshots.length > 0 && (
                      <div className="space-y-2">
                        <Label>Uploaded Screenshots:</Label>
                        {screenshots.map((file, index) => (
                          <div key={index} className="flex items-center justify-between p-2 bg-muted rounded">
                            <span className="text-sm truncate">{file.name}</span>
                            <Button
                              type="button"
                              variant="ghost"
                              size="sm"
                              onClick={() => removeScreenshot(index)}
                            >
                              Remove
                            </Button>
                          </div>
                        ))}
                      </div>
                    )}
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle className="text-lg">Expected vs Actual Behavior</CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div>
                    <Label htmlFor="expectedBehavior">What should happen?</Label>
                    <Textarea
                      id="expectedBehavior"
                      placeholder="Describe the expected behavior..."
                      rows={3}
                      value={formData.expectedBehavior}
                      onChange={(e) => handleInputChange('expectedBehavior', e.target.value)}
                    />
                  </div>

                  <div>
                    <Label htmlFor="actualBehavior">What actually happened?</Label>
                    <Textarea
                      id="actualBehavior"
                      placeholder="Describe what actually happened..."
                      rows={3}
                      value={formData.actualBehavior}
                      onChange={(e) => handleInputChange('actualBehavior', e.target.value)}
                    />
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle className="text-lg">Additional Information</CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div>
                    <Label htmlFor="additionalInfo">Any other details?</Label>
                    <Textarea
                      id="additionalInfo"
                      placeholder="Browser version, device type, frequency of issue, etc..."
                      rows={3}
                      value={formData.additionalInfo}
                      onChange={(e) => handleInputChange('additionalInfo', e.target.value)}
                    />
                  </div>
                </CardContent>
              </Card>
            </div>
          </div>

          {/* Submit Button */}
          <div className="flex justify-end pt-6">
            <Button
              type="submit"
              disabled={isSubmitting || !formData.userEmail || !formData.bugTitle || !formData.bugDescription}
              className="min-w-[150px]"
            >
              {isSubmitting ? (
                <>
                  <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin mr-2" />
                  Sending...
                </>
              ) : (
                <>
                  <Send className="w-4 h-4 mr-2" />
                  Send Bug Report
                </>
              )}
            </Button>
          </div>
        </form>
      </div>
    </div>
  )
}

</code>

app\connect-github\page.tsx:
<code>
"use client"

export const dynamic = 'force-dynamic'

import { useEffect, useState } from 'react'
import { useAuth } from '@/components/auth-provider'
import { Button } from '@/components/ui/button'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'
import { Github, ArrowRight, Shield, Zap, Trash2 } from 'lucide-react'
import { supabase } from '@/lib/supabase'
import { useRouter } from 'next/navigation'

export default function ConnectGitHubPage() {
  const { user, loading } = useAuth()
  const [isConnecting, setIsConnecting] = useState(false)
  const [error, setError] = useState<string | null>(null)
  const router = useRouter()

  // Redirect if not authenticated
  useEffect(() => {
    if (!loading && !user) {
      router.push('/')
    }
  }, [user, loading, router])
  // Check if user already has GitHub connection
  useEffect(() => {
    if (user) {
      // Check if user signed up with GitHub
      const provider = user.app_metadata?.provider
      if (provider === 'github') {
      router.push('/') // Use router for navigation
        window.location.href = '/dashboard'
      }
    }
  }, [user])

  const handleConnectGitHub = async () => {
    setIsConnecting(true)
    setError(null)
        router.push('/dashboard') // Use router for navigation
    try {
      const { error } = await supabase.auth.linkIdentity({
        provider: 'github',
        options: {
          redirectTo: `${window.location.origin}/dashboard`,
          queryParams: {
            access_type: 'offline',
            prompt: 'consent',
          }
        }
      })

      if (error) throw error
    } catch (error: any) {
      console.error('GitHub connection error:', error)
      setError(error.message)
      setIsConnecting(false)
    }
  }

  if (loading) {
    return (
      <div className="min-h-screen bg-background flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4"></div>
          <p className="text-muted-foreground">Loading...</p>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-background flex items-center justify-center p-4">
      <div className="max-w-md w-full space-y-6">
        <div className="text-center space-y-2">
          <div className="mx-auto w-12 h-12 bg-primary/10 rounded-full flex items-center justify-center">
            <Github className="w-6 h-6 text-primary" />
          </div>
          <h1 className="text-2xl font-bold">Connect Your GitHub Account</h1>
          <p className="text-muted-foreground">
            To use NeatRepo, you need to connect your GitHub account to access your repositories.
          </p>
        </div>

        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Shield className="w-5 h-5 text-green-500" />
              Why Connect GitHub?
            </CardTitle>
            <CardDescription>
              NeatRepo is a GitHub portfolio management tool that helps you organize and showcase your repositories.
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="space-y-3">
              <div className="flex items-center gap-3">
                <div className="w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center">
                  <Zap className="w-4 h-4 text-blue-600" />
                </div>
                <div>
                  <p className="font-medium">Access Your Repositories</p>
                  <p className="text-sm text-muted-foreground">View and manage all your GitHub repos</p>
                </div>
              </div>
              
              <div className="flex items-center gap-3">
                <div className="w-8 h-8 bg-red-100 rounded-full flex items-center justify-center">
                  <Trash2 className="w-4 h-4 text-red-600" />
                </div>
                <div>
                  <p className="font-medium">Bulk Delete Feature</p>
                  <p className="text-sm text-muted-foreground">Delete multiple repos at once (requires GitHub token)</p>
                </div>
              </div>
              
              <div className="flex items-center gap-3">
                <div className="w-8 h-8 bg-green-100 rounded-full flex items-center justify-center">
                  <ArrowRight className="w-4 h-4 text-green-600" />
                </div>
                <div>
                  <p className="font-medium">Portfolio Management</p>
                  <p className="text-sm text-muted-foreground">Organize repos for job applications</p>
                </div>
              </div>
            </div>

            <div className="pt-4 border-t">
              <Badge variant="secondary" className="mb-3">
                🔒 Secure & Private
              </Badge>
              <p className="text-xs text-muted-foreground">
                We only request necessary permissions and never store your GitHub credentials. 
                You can revoke access anytime from your GitHub settings.
              </p>
            </div>
          </CardContent>
        </Card>

        {error && (
          <div className="p-3 bg-red-50 border border-red-200 rounded-md">
            <p className="text-sm text-red-600">{error}</p>
          </div>
        )}

        <Button 
          onClick={handleConnectGitHub} 
          disabled={isConnecting}
          className="w-full"
          size="lg"
        >
          {isConnecting ? (
            <>
              <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
              Connecting...
            </>
          ) : (
            <>
              <Github className="mr-2 h-4 w-4" />
              Connect with GitHub
            </>
          )}
        </Button>

        <p className="text-center text-xs text-muted-foreground">
          By connecting, you agree to our terms of service and privacy policy.
        </p>
      </div>
    </div>
  )
}

</code>

app\dashboard\components\ActionButtons.tsx:
<code>
import React from 'react';
import { Button } from '@/components/ui/button';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { RefreshCw, Trash2, Target, Plus, Calendar } from "lucide-react";

interface ActionButtonsProps {
    isLoadingRepos: boolean;
    isDeleteMode: boolean;
    selectedReposCount: number;
    dateSortOrder: 'newest' | 'oldest' | 'default';
    onRefresh: () => void;
    onDateSort: (order: 'newest' | 'oldest' | 'default') => void;
    onAddRepo: () => void;
    onJobTemplate: () => void;
    onToggleDeleteMode: () => void;
    onBulkDelete: () => void;
}

export function ActionButtons({
    isLoadingRepos, isDeleteMode, selectedReposCount, dateSortOrder,
    onRefresh, onDateSort, onAddRepo, onJobTemplate, onToggleDeleteMode, onBulkDelete
}: ActionButtonsProps) {
  return (
    <div className="flex items-center justify-between gap-4 mb-6">
      <div className="flex items-center gap-4">
        <Button variant="outline" size="sm" onClick={onRefresh} disabled={isLoadingRepos}>
          <RefreshCw className={`h-4 w-4 ${isLoadingRepos ? 'animate-spin' : ''}`} />
          <span>Refresh</span>
        </Button>
        <div className="flex items-center gap-2">
          <Calendar className="h-4 w-4 text-muted-foreground" />
          <Select value={dateSortOrder} onValueChange={onDateSort}>
            <SelectTrigger className="w-[140px] h-9"><SelectValue placeholder="Sort by Date" /></SelectTrigger>
            <SelectContent>
              <SelectItem value="default">Default Order</SelectItem>
              <SelectItem value="newest">Newest First</SelectItem>
              <SelectItem value="oldest">Oldest First</SelectItem>
            </SelectContent>
          </Select>
        </div>
        <Button variant="outline" size="icon" onClick={onAddRepo} title="Add Repository">
          <Plus className="h-4 w-4" />
        </Button>
        <Button variant="outline" size="sm" onClick={onJobTemplate} className="flex items-center gap-2">
          <Target className="h-4 w-4" />
          <span>Job Template</span>
        </Button>
      </div>
      <div className="flex items-center gap-4">
        <Button variant={isDeleteMode ? "destructive" : "outline"} size="sm" onClick={onToggleDeleteMode}>
          <Trash2 className="h-4 w-4" />
          <span>{isDeleteMode ? "Exit Delete Mode" : "Enter Delete Mode"}</span>
        </Button>
        {isDeleteMode && selectedReposCount > 0 && (
          <Button variant="destructive" size="sm" onClick={onBulkDelete}>
            <Trash2 className="h-4 w-4" />
            <span>Delete {selectedReposCount}</span>
          </Button>
        )}
      </div>
    </div>
  );
}
</code>

app\dashboard\components\ChatSidebar.tsx:
<code>
// app/dashboard/components/ChatSidebar.tsx
"use client"

import React from 'react';
import { Card, CardHeader, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { ScrollArea } from '@/components/ui/scroll-area';
import { GitHubRepo, ChatMessage } from '../types';
import { Github, Send, ArrowUp, Square, Code, Lightbulb, Zap, MessageCircle, Download } from 'lucide-react';
import { Progress } from '@/components/ui/progress';

// Props Interface for the component
interface ChatSidebarProps {
  isMinimized: boolean;
  isCriticMode: boolean;
  isInterviewMode: boolean;
  interviewProgress: number;
  generatedReadme: string | null;
  chatMessages: ChatMessage[];
  chatMessage: string;
  isAiThinking: boolean;
  welcomeText: string;
  isTypingWelcome: boolean;
  repositories: GitHubRepo[];
  chatEndRef: React.RefObject<HTMLDivElement>;
  setIsMinimized: (minimized: boolean) => void;
  setIsCriticMode: (critic: boolean) => void;
  setChatMessage: (message: string) => void;
  handleSendMessage: () => void;
  handleResetChat: () => void;
  downloadPortfolioReadme: () => void;
  sendDirectMessage: (message: string) => void;
  generateReadme: (repo: GitHubRepo) => void;
}

const ThinkingSpinner = () => (
    <div className="w-5 h-5 border-2 border-muted-foreground/30 border-t-transparent rounded-full animate-spin"></div>
);

export function ChatSidebar({
  isMinimized, isCriticMode, isInterviewMode, interviewProgress, generatedReadme,
  chatMessages, chatMessage, isAiThinking, welcomeText, isTypingWelcome, repositories,
  chatEndRef, setIsMinimized, setIsCriticMode, setChatMessage, handleSendMessage,
  handleResetChat, downloadPortfolioReadme, sendDirectMessage, generateReadme
}: ChatSidebarProps) {

  if (isMinimized) {
    return (
      <div className="fixed bottom-6 right-6 z-50">
        <Button onClick={() => setIsMinimized(false)} className="w-14 h-14 rounded-full shadow-lg">
          <Github className="h-6 w-6" />
        </Button>
      </div>
    );
  }

  return (
    <Card className="shadow-lg border-gray-700/50">
      {/* --- RESTORED HEADER --- */}
      <CardHeader className="flex flex-row items-center justify-between bg-gray-800/80 backdrop-blur-sm border-b border-gray-700/50 p-2">
        <div className="flex items-center gap-2">
          <div className="flex items-center gap-1.5">
            <button onClick={() => {}} className="w-3 h-3 bg-red-500 rounded-full hover:bg-red-600"></button>
            <button onClick={() => setIsMinimized(true)} className="w-3 h-3 bg-yellow-400 rounded-full hover:bg-yellow-500"></button>
            <button className="w-3 h-3 bg-green-500 rounded-full hover:bg-green-600"></button>
          </div>
          <h2 className="text-sm font-medium text-gray-300">
            AI Assistant
            {isCriticMode && <span className="text-red-400"> • Critic Mode</span>}
            {isInterviewMode && <span className="text-blue-400"> • Interview Mode</span>}
          </h2>
        </div>
        <div className="flex items-center gap-2">
          <Button variant="ghost" size="sm" onClick={() => setIsCriticMode(!isCriticMode)} className={`text-xs ${isCriticMode ? 'text-red-400 bg-red-500/20' : 'text-gray-400'}`}>
            {isCriticMode ? '🔥' : '😊'} {isCriticMode ? 'Brutal' : 'Nice'}
          </Button>
          <Button variant="ghost" size="sm" onClick={handleResetChat} className="text-xs text-yellow-400 bg-yellow-500/20 hover:bg-yellow-500/30">
            🔄 Reset
          </Button>
          {generatedReadme && (
            <Button variant="ghost" size="sm" onClick={downloadPortfolioReadme} className="text-xs text-green-400 bg-green-500/20 hover:bg-green-500/30">
              <Download className="h-3 w-3 mr-1.5" /> README
            </Button>
          )}
        </div>
      </CardHeader>
      
      {/* Interview Progress Bar */}
      {isInterviewMode && interviewProgress > 0 && (
        <div className="px-4 py-2 border-b border-gray-700/50 bg-blue-500/5">
          <div className="flex items-center justify-between mb-2">
            <span className="text-xs text-blue-400 font-medium">Interview Progress</span>
            <span className="text-xs text-blue-400">{Math.round(interviewProgress)}%</span>
          </div>
          <Progress value={interviewProgress} className="h-2 bg-gray-800" />
        </div>
      )}
      
      <CardContent className="p-4 h-[60vh] flex flex-col">
        <ScrollArea className="flex-grow overflow-hidden pr-2">
          <div className="space-y-4">
            {/* --- RESTORED WELCOME AND PROMPT STARTER BLOCK --- */}
            <div className="flex justify-start">
              <div className="bg-accent text-foreground border border-border p-2 rounded-lg text-sm">
                {welcomeText}
                {isTypingWelcome && <span className="animate-pulse">|</span>}
              </div>
            </div>
            {!isTypingWelcome && chatMessages.length === 0 && (
              <div className="flex flex-col items-center justify-center py-8">
                <Github className="h-16 w-16 text-gray-600 mb-4" />
                <div className="flex flex-col gap-3 text-sm max-w-sm mx-auto">
                  <div className="grid grid-cols-2 gap-3">
                    <Button variant="outline" size="sm" className="w-full justify-start text-xs h-8" onClick={() => sendDirectMessage("analyze my repository structure")} disabled={isAiThinking}>
                      <Code className="h-3 w-3 mr-1.5" /> Analyze Structure
                    </Button>
                    <Button variant="outline" size="sm" className="w-full justify-start bg-foreground text-background hover:bg-foreground/90 border-0 text-xs h-8" onClick={() => repositories.length > 0 && generateReadme(repositories[0])} disabled={isAiThinking || repositories.length === 0}>
                      <Zap className="h-3 w-3 mr-1.5" /> Quick README
                    </Button>
                  </div>
                  <Button variant="outline" size="sm" className="w-full justify-start text-xs h-8" onClick={() => sendDirectMessage("give me suggestions to improve my repositories")} disabled={isAiThinking}>
                    <Lightbulb className="h-3 w-3 mr-1.5" /> Get Suggestions
                  </Button>
                  <div className="border-t border-border pt-2 mt-2">
                    <Button
                      variant="outline"
                      size="sm"
                      className="w-full justify-start bg-blue-500/10 text-blue-400 border-blue-500/30 hover:bg-blue-500/20 text-xs h-8"
                      onClick={() => sendDirectMessage("generate personal readme based on quick interview")}
                      disabled={isAiThinking || repositories.length === 0 || isInterviewMode}
                    >
                      <MessageCircle className="h-3 w-3 mr-1.5" />
                      {isInterviewMode ? 'Interview Active...' : 'Personal README Interview'}
                    </Button>
                  </div>
                </div>
              </div>
            )}

            {/* Chat Messages */}
            {chatMessages.map((message) => (
              <div key={message.id} className={`flex ${message.role === "user" ? "justify-end" : "justify-start"}`}>
                <div className={`whitespace-pre-wrap max-w-xs p-2 rounded-lg text-sm ${message.role === "user" ? "bg-primary text-primary-foreground" : "bg-accent text-foreground border border-border"}`}>
                  {message.content}
                </div>
              </div>
            ))}
            {isAiThinking && (
              <div className="flex justify-start">
                  <div className="bg-accent text-foreground border border-border p-2 rounded-lg text-sm flex items-center gap-2">
                      <ThinkingSpinner />
                      <span>AI is thinking...</span>
                  </div>
              </div>
            )}
            <div ref={chatEndRef} />
          </div>
        </ScrollArea>
        
        <div className="flex gap-2 mt-4">
            <Input
                placeholder={isAiThinking ? "AI is thinking..." : "Ask about your repositories..."}
                value={chatMessage}
                onChange={(e) => setChatMessage(e.target.value)}
                onKeyPress={(e) => e.key === "Enter" && !isAiThinking && handleSendMessage()}
                disabled={isAiThinking}
            />
            <Button onClick={handleSendMessage} size="sm" disabled={!chatMessage.trim() || isAiThinking}>
                <ArrowUp className="h-4 w-4" />
            </Button>
        </div>
      </CardContent>
    </Card>
  );
}
</code>

app\dashboard\components\DashboardMetrics.tsx:
<code>
import React from 'react';
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Plus, Folder, Star } from "lucide-react";
import { GitHubRepo } from '../types';


// Add ProjectTemplate interface
interface ProjectTemplate {
  id: string;
  name: string;
  description: string;
  icon: string;
  files: string[];
}

interface DashboardMetricsProps {
  repositories: GitHubRepo[];
  selectedTemplate: string;
  isAiThinking: boolean;
  onTemplateChange: (templateId: string) => void;
  onGenerateTemplate: (templateId: string) => void;
}

const projectTemplates: ProjectTemplate[] = [
  {
    id: "react-app",
    name: "React Web App",
    description: "Modern React application with TypeScript",
    icon: "⚛️",
    files: [
      "src/App.tsx",
      "src/components/Header.tsx",
      "src/components/Footer.tsx",
      "src/hooks/useAuth.ts",
      "src/utils/api.ts",
      "public/index.html",
      "package.json",
      "tsconfig.json",
      "tailwind.config.js"
    ]
  },
  // ... add more templates as needed
];

export function DashboardMetrics({ repositories, selectedTemplate, isAiThinking, onTemplateChange, onGenerateTemplate }: DashboardMetricsProps) {
  const publicRepos = repositories.filter((repo) => !repo.private).length;
  const privateRepos = repositories.length - publicRepos;
  const totalStars = repositories.reduce((sum, repo) => sum + repo.stargazers_count, 0);

  return (
    <>
      <Card className="mb-6">
        <CardHeader>
          <CardTitle className="text-lg flex items-center gap-2"><Plus /> Quick Start Templates</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="flex items-center space-x-4">
            <div className="flex-1">
              <Select value={selectedTemplate} onValueChange={onTemplateChange}>
                <SelectTrigger><SelectValue placeholder="Choose a project template..." /></SelectTrigger>
                <SelectContent>
                  {projectTemplates.map((template) => (
                    <SelectItem key={template.id} value={template.id}>
                      <div className="flex items-center space-x-2">
                        <span>{template.icon}</span>
                        <div>
                          <div className="font-medium">{template.name}</div>
                          <div className="text-xs text-muted-foreground">{template.description}</div>
                        </div>
                      </div>
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
            <Button onClick={() => onGenerateTemplate(selectedTemplate)} disabled={!selectedTemplate || isAiThinking}>
              <Plus className="h-4 w-4 mr-2" /> Generate Template
            </Button>
          </div>
        </CardContent>
      </Card>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Total Repositories</CardTitle>
            <Folder className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{repositories.length}</div>
            <p className="text-xs text-muted-foreground">{publicRepos} public, {privateRepos} private</p>
          </CardContent>
        </Card>
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Total Stars</CardTitle>
            <Star className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{totalStars}</div>
            <p className="text-xs text-muted-foreground">Across all repositories</p>
          </CardContent>
        </Card>
      </div>
    </>
  );
}
</code>

app\dashboard\components\Modals.tsx:
<code>
import React from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from '@/components/ui/dialog';
import { GitHubRepo } from '../types';
import { Trash2, Target, Plus, Edit, X, RefreshCw, Sparkles, CheckCircle } from 'lucide-react';

interface ModalsProps {
    showDeleteConfirm: boolean;
    repoToDelete: GitHubRepo | null;
    isDeleting: boolean;
    onConfirmDelete: () => void;
    onCancelDelete: () => void;

    showJobTemplateModal: boolean;
    jobTitle: string;
    isGeneratingTemplate: boolean;
    templateResults: GitHubRepo[];
    onJobTitleChange: (value: string) => void;
    onGenerateJobTemplate: () => void;
    onCloseJobTemplate: () => void;

    showAddRepoModal: boolean;
    newRepoName: string;
    newRepoDescription: string;
    isCreatingRepo: boolean;
    onNewRepoNameChange: (value: string) => void;
    onNewRepoDescriptionChange: (value: string) => void;
    onCreateRepo: () => void;
    onCloseAddRepo: () => void;
    
    showRenameModal: boolean;
    repoToRename: GitHubRepo | null;
    newRepoNameForRename: string;
    isRenamingRepo: boolean;
    onNewRepoNameForRenameChange: (value: string) => void;
    onRenameRepo: () => void;
    onCloseRenameRepo: () => void;
}

export function Modals({
    showDeleteConfirm, repoToDelete, isDeleting, onConfirmDelete, onCancelDelete,
    showJobTemplateModal, jobTitle, isGeneratingTemplate, templateResults, onJobTitleChange, onGenerateJobTemplate, onCloseJobTemplate,
    showAddRepoModal, newRepoName, newRepoDescription, isCreatingRepo, onNewRepoNameChange, onNewRepoDescriptionChange, onCreateRepo, onCloseAddRepo,
    showRenameModal, repoToRename, newRepoNameForRename, isRenamingRepo, onNewRepoNameForRenameChange, onRenameRepo, onCloseRenameRepo
}: ModalsProps) {

  return (
    <>
      {/* Delete Confirmation Modal */}
      {showDeleteConfirm && repoToDelete && (
        <Dialog open={showDeleteConfirm} onOpenChange={onCancelDelete}>
          <DialogContent>
            <DialogHeader>
              <DialogTitle className="flex items-center gap-2"><Trash2/> Delete Repository</DialogTitle>
            </DialogHeader>
            <p>Are you sure you want to permanently delete <strong>"{repoToDelete.name}"</strong>? This action cannot be undone.</p>
            <DialogFooter>
              <Button variant="outline" onClick={onCancelDelete} disabled={isDeleting}>Cancel</Button>
              <Button variant="destructive" onClick={onConfirmDelete} disabled={isDeleting}>
                {isDeleting ? <><RefreshCw className="animate-spin mr-2" /> Deleting...</> : "Delete Forever"}
              </Button>
            </DialogFooter>
          </DialogContent>
        </Dialog>
      )}

      {/* Job Template Modal */}
      {showJobTemplateModal && (
          <Dialog open={showJobTemplateModal} onOpenChange={onCloseJobTemplate}>
              <DialogContent>
                  <DialogHeader><DialogTitle className="flex items-center gap-2"><Target /> Generate Job Template</DialogTitle></DialogHeader>
                  <Input placeholder="e.g., Frontend Developer" value={jobTitle} onChange={(e) => onJobTitleChange(e.target.value)} />
                  {templateResults.length > 0 && (
                      <div className="mt-4 p-3 bg-muted/50 rounded-lg">
                          <h3 className="font-medium mb-2 flex items-center gap-2"><CheckCircle className="text-green-500" /> Selected Repos</h3>
                          <ul className="space-y-1">{templateResults.map(r => <li key={r.id}>{r.name}</li>)}</ul>
                      </div>
                  )}
                  <DialogFooter>
                      <Button variant="outline" onClick={onCloseJobTemplate}>Cancel</Button>
                      <Button onClick={onGenerateJobTemplate} disabled={!jobTitle.trim() || isGeneratingTemplate}>
                          {isGeneratingTemplate ? <><RefreshCw className="animate-spin mr-2" /> Generating...</> : <><Sparkles className="mr-2" /> Generate</>}
                      </Button>
                  </DialogFooter>
              </DialogContent>
          </Dialog>
      )}

      {/* Add Repository Modal */}
      {showAddRepoModal && (
          <Dialog open={showAddRepoModal} onOpenChange={onCloseAddRepo}>
              <DialogContent>
                  <DialogHeader><DialogTitle className="flex items-center gap-2"><Plus /> Create New Repository</DialogTitle></DialogHeader>
                  <Input placeholder="Repository Name" value={newRepoName} onChange={(e) => onNewRepoNameChange(e.target.value)} />
                  <Input placeholder="Description (Optional)" value={newRepoDescription} onChange={(e) => onNewRepoDescriptionChange(e.target.value)} />
                  <DialogFooter>
                      <Button variant="outline" onClick={onCloseAddRepo}>Cancel</Button>
                      <Button onClick={onCreateRepo} disabled={!newRepoName.trim() || isCreatingRepo}>
                          {isCreatingRepo ? <><RefreshCw className="animate-spin mr-2" /> Creating...</> : "Create"}
                      </Button>
                  </DialogFooter>
              </DialogContent>
          </Dialog>
      )}

      {/* Rename Repository Modal */}
      {showRenameModal && repoToRename && (
          <Dialog open={showRenameModal} onOpenChange={onCloseRenameRepo}>
              <DialogContent>
                  <DialogHeader><DialogTitle className="flex items-center gap-2"><Edit /> Rename Repository</DialogTitle></DialogHeader>
                  <p className="text-sm text-muted-foreground">Current name: {repoToRename.name}</p>
                  <Input value={newRepoNameForRename} onChange={(e) => onNewRepoNameForRenameChange(e.target.value)} />
                  <DialogFooter>
                      <Button variant="outline" onClick={onCloseRenameRepo}>Cancel</Button>
                      <Button onClick={onRenameRepo} disabled={!newRepoNameForRename.trim() || isRenamingRepo}>
                          {isRenamingRepo ? <><RefreshCw className="animate-spin mr-2" /> Renaming...</> : "Rename"}
                      </Button>
                  </DialogFooter>
              </DialogContent>
          </Dialog>
      )}
    </>
  );
}
</code>

app\dashboard\components\RepoItem.tsx:
<code>
import React, { useState } from 'react';
import { Draggable, DraggableProvided, DraggableStateSnapshot } from "@hello-pangea/dnd";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { GitHubRepo } from '../types';
import { GripVertical, ChevronDown, ChevronRight, Folder, Star, GitFork, Clock, Eye, Code, Zap, Edit, Trash2, ExternalLink } from "lucide-react";

interface RepoItemProps {
  repo: GitHubRepo;
  index: number;
  isDeleteMode: boolean;
  isSelected: boolean;
  onToggleSelection: (id: number) => void;
  onDelete: (repo: GitHubRepo) => void;
  onRename: (repo: GitHubRepo) => void;
}

const formatTimeAgo = (dateString: string) => {
  const date = new Date(dateString);
  const now = new Date();
  const seconds = Math.floor((now.getTime() - date.getTime()) / 1000);
  let interval = seconds / 31536000;
  if (interval > 1) return `${Math.floor(interval)} years ago`;
  interval = seconds / 2592000;
  if (interval > 1) return `${Math.floor(interval)} months ago`;
  interval = seconds / 86400;
  if (interval > 1) return `${Math.floor(interval)} days ago`;
  return "today";
};

export function RepoItem({ repo, index, isDeleteMode, isSelected, onToggleSelection, onDelete, onRename }: RepoItemProps) {
  const [isExpanded, setIsExpanded] = useState(false);

  return (
    <Draggable draggableId={repo.id.toString()} index={index}>
      {(provided: DraggableProvided, snapshot: DraggableStateSnapshot) => (
        <div
          ref={provided.innerRef}
          {...provided.draggableProps}
          className={`p-3 rounded-lg transition-all duration-200 bg-card border ${
            snapshot.isDragging
              ? "opacity-90 shadow-2xl scale-105 border-primary/50 bg-primary/5 z-50"
              : "border-border/50 hover:border-border hover:shadow-md"
          }`}
        >
          <div className="flex items-center justify-between min-w-0">
             {/* Main Repo Info */}
             <div className="flex items-center min-w-0 flex-1 mr-4">
               {isDeleteMode ? (
                  <div className="mr-3 flex items-center">
                    <input
                      type="checkbox"
                      checked={isSelected}
                      onChange={() => onToggleSelection(repo.id)}
                      className="w-4 h-4 text-destructive bg-background border-border rounded focus:ring-destructive focus:ring-2"
                      title="Select for deletion"
                    />
                  </div>
                ) : (
                  <div {...provided.dragHandleProps} className={`mr-3 cursor-grab text-muted-foreground hover:text-foreground`}>
                    <GripVertical className="h-5 w-5" />
                  </div>
                )}
                <button onClick={() => setIsExpanded(!isExpanded)} className="mr-2">
                  {isExpanded ? <ChevronDown className="h-4 w-4" /> : <ChevronRight className="h-4 w-4" />}
                </button>
                <Folder className="h-4 w-4 text-muted-foreground mr-3" />
                <div className="flex-1 min-w-0">
                    <span className="font-semibold truncate">{repo.name}</span>
                </div>
             </div>
             <div className="flex items-center space-x-2 flex-shrink-0">
                <div className="text-xs text-muted-foreground">Updated {formatTimeAgo(repo.updated_at)}</div>
             </div>
          </div>

          {/* Expanded View */}
          {isExpanded && (
            <div className="pl-10 mt-2 space-y-2">
              <p className="text-sm text-muted-foreground">{repo.description || "No description."}</p>
              <div className="flex items-center space-x-4 text-xs text-muted-foreground mt-1">
                {repo.language && <span>{repo.language}</span>}
                <div className="flex items-center"><Star className="h-3 w-3 mr-1" /> {repo.stargazers_count}</div>
                <div className="flex items-center"><GitFork className="h-3 w-3 mr-1" /> {repo.forks_count}</div>
              </div>
              <div className="flex space-x-2 pt-2">
                  <Button variant="outline" size="sm" onClick={() => window.open(repo.html_url, "_blank")}><ExternalLink className="h-4 w-4 mr-2" /> View</Button>
                  <Button variant="outline" size="sm" onClick={() => onRename(repo)}><Edit className="h-4 w-4 mr-2" /> Rename</Button>
                  <Button variant="destructive" size="sm" onClick={() => onDelete(repo)}><Trash2 className="h-4 w-4 mr-2" /> Delete</Button>
              </div>
            </div>
          )}
        </div>
      )}
    </Draggable>
  );
}
</code>

app\dashboard\components\RepositoryList.tsx:
<code>
import React from 'react';
import { DragDropContext, Droppable, DroppableProvided } from "@hello-pangea/dnd";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Card, CardContent } from "@/components/ui/card";
import { RefreshCw } from "lucide-react";
import { GitHubRepo } from '../types';
import { RepoItem } from './RepoItem';

interface RepositoryListProps {
  repositories: GitHubRepo[];
  isLoadingRepos: boolean;
  isDeleteMode: boolean;
  selectedRepos: Set<number>;
  onDragEnd: (result: any) => void;
  onToggleSelection: (id: number) => void;
  onDeleteRepo: (repo: GitHubRepo) => void;
  onRenameRepo: (repo: GitHubRepo) => void;
}

export function RepositoryList({
  repositories,
  isLoadingRepos,
  isDeleteMode,
  selectedRepos,
  onDragEnd,
  onToggleSelection,
  onDeleteRepo,
  onRenameRepo
}: RepositoryListProps) {
  if (isLoadingRepos && repositories.length === 0) {
    return (
      <div className="flex items-center justify-center py-12">
        <div className="flex items-center space-x-2">
          <RefreshCw className="h-5 w-5 animate-spin" />
          <span>Loading repositories...</span>
        </div>
      </div>
    );
  }

  if (repositories.length === 0) {
      return (
          <div className="text-center py-12">
              <h3 className="text-xl font-semibold">No Repositories Found</h3>
              <p className="text-muted-foreground">Please check your GitHub token or refresh.</p>
          </div>
      )
  }

  return (
    <Card>
      <CardContent className="p-4">
        <ScrollArea className="h-[calc(100vh-400px)]">
          <DragDropContext onDragEnd={onDragEnd}>
            <Droppable droppableId="repositories">
              {(provided: DroppableProvided) => (
                <div {...provided.droppableProps} ref={provided.innerRef} className="space-y-2 pr-4">
                  {repositories.map((repo, index) => (
                    <RepoItem
                      key={repo.id}
                      repo={repo}
                      index={index}
                      isDeleteMode={isDeleteMode}
                      isSelected={selectedRepos.has(repo.id)}
                      onToggleSelection={onToggleSelection}
                      onDelete={onDeleteRepo}
                      onRename={onRenameRepo}
                    />
                  ))}
                  {provided.placeholder}
                </div>
              )}
            </Droppable>
          </DragDropContext>
        </ScrollArea>
      </CardContent>
    </Card>
  );
}
</code>

app\dashboard\hooks\useChatAssistant.ts:
<code>
// app/dashboard/hooks/useChatAssistant.ts
"use client"

import { useState, useEffect, useRef } from "react";
import { useAuth } from "@/components/auth-provider";
import { aiAssistant } from "@/lib/ai-assistant";
import { GitHubRepo, ChatMessage } from "../types";

export function useChatAssistant(repositories: GitHubRepo[]) {
  const { user } = useAuth();
  const [chatMessage, setChatMessage] = useState("");
  const [chatMessages, setChatMessages] = useState<ChatMessage[]>([]);
  const [isAiThinking, setIsAiThinking] = useState(false);
  const [isCriticMode, setIsCriticMode] = useState(false);
  const [isInterviewMode, setIsInterviewMode] = useState(false);
  const [interviewProgress, setInterviewProgress] = useState(0);
  const [generatedReadme, setGeneratedReadme] = useState<string | null>(null);
  const [welcomeText, setWelcomeText] = useState("");
  const [isTypingWelcome, setIsTypingWelcome] = useState(true);
  const chatEndRef = useRef<HTMLDivElement>(null);

  const WELCOME_FULL_TEXT = "Hi! I'm your AI assistant. Ask me anything about your repositories, or use the quick actions below to get started.";

  // Update AI assistant context whenever repositories change
  useEffect(() => {
    aiAssistant.updateUserContext({ repositories });
  }, [repositories]);

  useEffect(() => {
    let timeout: NodeJS.Timeout;
    if (chatMessages.length === 0) {
      setWelcomeText("");
      setIsTypingWelcome(true);
      let i = 0;
      const type = () => {
        if (i < WELCOME_FULL_TEXT.length) {
          setWelcomeText(prev => WELCOME_FULL_TEXT.slice(0, i + 1));
          i++;
          timeout = setTimeout(type, 18);
        } else {
          setIsTypingWelcome(false);
        }
      };
      type();
    }
    return () => clearTimeout(timeout);
  }, [chatMessages.length]);

  useEffect(() => {
    chatEndRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [chatMessages]);
  
  const addChatMessage = (message: Omit<ChatMessage, 'timestamp' | 'id'>) => {
    setChatMessages(prev => [...prev, { ...message, id: Date.now().toString(), timestamp: new Date() }]);
  };

  const processMessage = async (currentMessage: string) => {
    // Update the AI assistant context with critic mode
    aiAssistant.updateUserContext({ 
      repositories,
      preferences: { isCriticMode }
    });

    // Process the message using the AI assistant
    const response = await aiAssistant.processMessage(currentMessage);
    
    addChatMessage({ role: "assistant", content: response.message });

    if (response.data?.portfolioReadme) {
      setGeneratedReadme(response.data.portfolioReadme);
    }
    if (response.data?.interviewActive !== undefined) {
      setIsInterviewMode(response.data.interviewActive);
    }
    if (response.data?.progress !== undefined) {
      setInterviewProgress(response.data.progress);
    }
    setIsAiThinking(false);
  };

  const sendDirectMessage = async (message: string) => {
    if (!message.trim()) return;
    addChatMessage({ role: "user", content: message });
    setIsAiThinking(true);
    await processMessage(message);
  };

  const handleSendMessage = async () => {
    if (!chatMessage.trim()) return;
    const currentMessage = chatMessage;
    setChatMessage("");
    await sendDirectMessage(currentMessage);
  };
  
  const handleResetChat = () => {
    setChatMessages([]);
    setIsInterviewMode(false);
    setInterviewProgress(0);
    setGeneratedReadme(null);
  };
  
  const downloadPortfolioReadme = () => {
    if (!generatedReadme) return;
    const blob = new Blob([generatedReadme], { type: 'text/markdown' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'PORTFOLIO_README.md';
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const generateReadme = async (repo: GitHubRepo) => {
     // This function can be expanded with more logic if needed.
    await sendDirectMessage(`Generate a README for my repository: ${repo.name}`);
  };

  return {
    chatMessage,
    setChatMessage,
    chatMessages,
    addChatMessage,
    isAiThinking,
    handleSendMessage,
    sendDirectMessage,
    chatEndRef,
    // Welcome Text
    welcomeText,
    isTypingWelcome,
    // Modes & Features
    isCriticMode,
    setIsCriticMode,
    isInterviewMode,
    interviewProgress,
    generatedReadme,
    handleResetChat,
    downloadPortfolioReadme,
    generateReadme
  };
}
</code>

app\dashboard\hooks\useDashboard.ts:
<code>
// app/dashboard/hooks/useDashboard.ts
"use client"

import { useState, useEffect } from "react";
import { useAuth } from "@/components/auth-provider";
import { useRepositories } from "./useRepositories";
import { useChatAssistant } from "./useChatAssistant";

import { useDashboardModals } from "./useDashboardModals";
import { aiAssistant } from "../../../lib/ai-assistant";

export function useDashboard() {
  const { user, profile, loading, signOut, showTokenPopup } = useAuth();
  
  // --- State for features not belonging to other hooks ---
  const [isChatMinimized, setIsChatMinimized] = useState(false);
  const [selectedTemplate, setSelectedTemplate] = useState("");
  // Note: generateTemplate logic would be here or in its own hook

  // --- Instantiate Child Hooks ---

  // Modals hook must be initialized first to provide control functions
  const modals = useDashboardModals();

  // Repositories hook manages all repo data and actions
  const repos = useRepositories(
    // For now, we'll handle chat messages separately
    () => {},
    modals.openModal,             // Pass modal-opening function
    modals.setRepoToDelete,       // Pass state setter
    modals.setRepoToRename        // Pass state setter
  );

  // Chat hook needs the actual repositories for context
  const chat = useChatAssistant(
    repos.repositories // Pass the actual repositories
  );
  
  // --- Connect Hooks ---
  
  // Update chat context when repositories change
  // This is a placeholder; a more robust solution might use a shared context
  // or pass the repositories state directly into the chat hook. For now,
  // we rely on aiAssistant.updateContext being called inside processMessage.
  
  // --- Combine and Expose State and Functions ---

  return {
    // Auth context data
    user,
    profile,
    loading,
    signOut,
    showTokenPopup,

    // From useRepositories
    ...repos,
    
    // From useChatAssistant
    ...chat,

    // From useDashboardModals
    ...modals,
    
    // Functions to connect repository actions with modals
    onConfirmDelete: () => repos.confirmDeleteRepo(modals.repoToDelete!),
    onCreateRepo: () => {
        repos.createRepository(modals.newRepoName, modals.newRepoDescription)
        .then(() => modals.closeModal('add'));
    },
    onRenameRepo: () => {
        repos.renameRepository(modals.repoToRename!, modals.newRepoNameForRename)
        .then(() => modals.closeModal('rename'));
    },

    // UI state from the main hook
    isChatMinimized,
    setIsChatMinimized,
    selectedTemplate,
    setSelectedTemplate,
    
    // Placeholder for logic that would live here or in another hook
    generateTemplate: async (templateId: string) => { 
        chat.addChatMessage({ role: 'assistant', content: `Template generation for "${templateId}" is not fully implemented yet.` });
    },
    generateJobTemplate: async () => {
      if (!modals.jobTitle.trim()) return;
      modals.setIsGeneratingTemplate(true);
      
      // Update AI assistant context with current repositories
      aiAssistant.updateUserContext({ repositories: repos.repositories });
      
      // Process the job recommendation request
      const response = await aiAssistant.processMessage(`recommend repositories for ${modals.jobTitle} position`);
      
      chat.addChatMessage({ role: 'assistant', content: response.message });
      if (response.success && response.data?.recommendedRepos) {
        modals.setTemplateResults(response.data.recommendedRepos);
      }
      modals.setIsGeneratingTemplate(false);
    }
  };
}
</code>

app\dashboard\hooks\useDashboardModals.ts:
<code>
// app/dashboard/hooks/useDashboardModals.ts
"use client"

import { useState } from "react";
import { GitHubRepo } from "../types";

export function useDashboardModals() {
  // Delete Modal State
  const [showDeleteConfirm, setShowDeleteConfirm] = useState(false);
  const [repoToDelete, setRepoToDelete] = useState<GitHubRepo | null>(null);

  // Add Repo Modal State
  const [showAddRepoModal, setShowAddRepoModal] = useState(false);
  const [newRepoName, setNewRepoName] = useState("");
  const [newRepoDescription, setNewRepoDescription] = useState("");

  // Rename Repo Modal State
  const [showRenameModal, setShowRenameModal] = useState(false);
  const [repoToRename, setRepoToRename] = useState<GitHubRepo | null>(null);
  const [newRepoNameForRename, setNewRepoNameForRename] = useState("");

  // Job Template Modal State
  const [showJobTemplateModal, setShowJobTemplateModal] = useState(false);
  const [jobTitle, setJobTitle] = useState('');
  const [isGeneratingTemplate, setIsGeneratingTemplate] = useState(false);
  const [templateResults, setTemplateResults] = useState<GitHubRepo[]>([]);
  
  const openModal = (modal: 'delete' | 'rename' | 'add' | 'jobTemplate') => {
    if (modal === 'delete') setShowDeleteConfirm(true);
    if (modal === 'rename') setShowRenameModal(true);
    if (modal === 'add') setShowAddRepoModal(true);
    if (modal === 'jobTemplate') setShowJobTemplateModal(true);
  };

  const closeModal = (modal: 'delete' | 'rename' | 'add' | 'jobTemplate') => {
    if (modal === 'delete') {
      setShowDeleteConfirm(false);
      setRepoToDelete(null);
    }
    if (modal === 'rename') {
      setShowRenameModal(false);
      setRepoToRename(null);
      setNewRepoNameForRename("");
    }
    if (modal === 'add') {
      setShowAddRepoModal(false);
      setNewRepoName("");
      setNewRepoDescription("");
    }
    if (modal === 'jobTemplate') {
        setShowJobTemplateModal(false);
        setJobTitle('');
        setTemplateResults([]);
    }
  };

  return {
    // Delete Modal
    showDeleteConfirm,
    repoToDelete,
    setRepoToDelete,
    // Add Repo Modal
    showAddRepoModal,
    newRepoName,
    setNewRepoName,
    newRepoDescription,
    setNewRepoDescription,
    // Rename Repo Modal
    showRenameModal,
    repoToRename,
    setRepoToRename,
    newRepoNameForRename,
    setNewRepoNameForRename,
    // Job Template Modal
    showJobTemplateModal,
    jobTitle,
    setJobTitle,
    isGeneratingTemplate,
    setIsGeneratingTemplate,
    templateResults,
    setTemplateResults,
    // Control functions
    openModal,
    closeModal,
  };
}
</code>

app\dashboard\hooks\useRepositories.ts:
<code>
// app/dashboard/hooks/useRepositories.ts
"use client"

import { useState, useEffect, useCallback } from "react";
import { DropResult } from "@hello-pangea/dnd";
import { useAuth } from "@/components/auth-provider";
import { repositoryManager, InvalidTokenError } from "@/lib/repository-manager";
import { GitHubRepo } from "../types";

export function useRepositories(
  addChatMessage: (message: { role: 'assistant'; content: string }) => void,
  openModal: (modal: 'delete' | 'rename' | 'add') => void,
  setRepoToDelete: (repo: GitHubRepo | null) => void,
  setRepoToRename: (repo: GitHubRepo | null) => void
) {
  const { user, profile, loading: authLoading, getEffectiveToken, showTokenPopup, markTokenAsInvalid } = useAuth();
  const [repositories, setRepositories] = useState<GitHubRepo[]>([]);
  const [originalRepositories, setOriginalRepositories] = useState<GitHubRepo[]>([]);
  const [isLoadingRepos, setIsLoadingRepos] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [isInitialized, setIsInitialized] = useState(false);
  
  // Repo management state
  const [selectedRepos, setSelectedRepos] = useState<Set<number>>(new Set());
  const [isDeleteMode, setIsDeleteMode] = useState(false);
  const [isDeleting, setIsDeleting] = useState(false);
  const [isCreatingRepo, setIsCreatingRepo] = useState(false);
  const [isRenamingRepo, setIsRenamingRepo] = useState(false);
  const [dateSortOrder, setDateSortOrder] = useState<'newest' | 'oldest' | 'default'>('default');
  const [hasChanges, setHasChanges] = useState(false);

  // --- Core Repository Actions ---

  const handleRefresh = useCallback(async () => {
    if (!user) return;
    const effectiveToken = await getEffectiveToken();
    if (effectiveToken) {
      setIsLoadingRepos(true);
      setError(null);
      try {
        // Force refresh from API
        await repositoryManager.fetchRepositories(effectiveToken, true, user.id);
      } catch (e: any) {
        if (e instanceof InvalidTokenError) {
          console.error("Caught invalid token error on refresh. Updating auth state.");
          markTokenAsInvalid();
          setError("Your GitHub token is invalid or has expired. Please update it.");
        } else {
          setError(e.message || "Failed to refresh repositories.");
        }
      } finally {
        setIsLoadingRepos(false);
      }
    } else {
      setError("GitHub token not found. Cannot refresh.");
    }
  }, [user, getEffectiveToken, markTokenAsInvalid]);

  const createRepository = async (newRepoName: string, newRepoDescription: string) => {
    if (!newRepoName.trim()) return;
    const effectiveToken = await getEffectiveToken();
    if (!effectiveToken) {
      addChatMessage({ role: "assistant", content: "To create repositories, please set up your GitHub Personal Access Token." });
      showTokenPopup();
      return;
    }
    setIsCreatingRepo(true);
    try {
      const response = await fetch('https://api.github.com/user/repos', {
        method: 'POST',
        headers: {
          'Authorization': `token ${effectiveToken}`, 'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          name: newRepoName.trim(), description: newRepoDescription.trim() || undefined, private: false, auto_init: true,
        }),
      });
      if (response.ok) {
        const newRepo = await response.json();
        setRepositories(prev => [newRepo, ...prev]);
        addChatMessage({ role: "assistant", content: `🎉 Repository "${newRepo.name}" created successfully!` });
      } else {
        const errorData = await response.json();
        throw new Error(errorData.message || 'Failed to create repository');
      }
    } catch (error: any) {
      addChatMessage({ role: "assistant", content: `Failed to create repository: ${error.message}` });
    } finally {
      setIsCreatingRepo(false);
    }
  };

  const renameRepository = async (repoToRename: GitHubRepo, newRepoNameForRename: string) => {
    if (!repoToRename || !newRepoNameForRename.trim()) return;
    const effectiveToken = await getEffectiveToken();
    if (!effectiveToken) {
      addChatMessage({ role: "assistant", content: "To rename repositories, please set up your GitHub Personal Access Token." });
      showTokenPopup();
      return;
    }
    setIsRenamingRepo(true);
    try {
      const response = await fetch(`https://api.github.com/repos/${repoToRename.full_name}`, {
        method: 'PATCH',
        headers: {
          'Authorization': `token ${effectiveToken}`, 'Content-Type': 'application/json',
        },
        body: JSON.stringify({ name: newRepoNameForRename.trim() }),
      });
      if (response.ok) {
        const updatedRepo = await response.json();
        setRepositories(prev => prev.map(repo =>
          repo.id === repoToRename.id ? { ...repo, name: updatedRepo.name, full_name: updatedRepo.full_name } : repo
        ));
        addChatMessage({ role: "assistant", content: `🎉 Repository renamed to "${updatedRepo.name}" successfully!` });
      } else {
        const errorData = await response.json();
        throw new Error(errorData.message || 'Failed to rename repository');
      }
    } catch (error: any) {
      addChatMessage({ role: "assistant", content: `Failed to rename repository: ${error.message}` });
    } finally {
      setIsRenamingRepo(false);
    }
  };

  const confirmDeleteRepo = async (repoToDelete: GitHubRepo) => {
      const effectiveToken = await getEffectiveToken();
      if (!effectiveToken) {
        addChatMessage({ role: "assistant", content: "To delete repositories, please set up a GitHub PAT with 'delete_repo' permissions."});
        showTokenPopup();
        return;
      }
      setIsDeleting(true);
      try {
        const response = await fetch(`https://api.github.com/repos/${repoToDelete.full_name}`, {
          method: 'DELETE',
          headers: { 'Authorization': `token ${effectiveToken}`, 'Accept': 'application/vnd.github.v3+json' },
        });
        if (response.status === 204) {
          setRepositories(prev => prev.filter(repo => repo.id !== repoToDelete.id));
          addChatMessage({ role: "assistant", content: `🗑️ Repository "${repoToDelete.name}" has been permanently deleted.` });
        } else {
          const errorData = await response.json();
          throw new Error(errorData.message || `Failed to delete repository. Status: ${response.status}`);
        }
      } catch (error: any) {
        addChatMessage({ role: "assistant", content: `❌ Failed to delete repository: ${error.message}` });
      } finally {
        setIsDeleting(false);
      }
  };

  const handleBulkDelete = async () => {
    const effectiveToken = await getEffectiveToken();
    if (!effectiveToken) {
      addChatMessage({ role: "assistant", content: "To delete repositories, please set up your GitHub Personal Access Token." });
      showTokenPopup();
      return;
    }

    if (!profile) {
      addChatMessage({ role: "assistant", content: 'Error: User profile not found. Cannot proceed with deletion.' });
      return;
    }

    const originalRepos = [...repositories];
    const reposToDelete = originalRepos.filter((r: GitHubRepo) => selectedRepos.has(r.id));

    if (reposToDelete.length === 0) return;

    // 1. Optimistic UI Update
    setRepositories(prevRepos => prevRepos.filter((r: GitHubRepo) => !selectedRepos.has(r.id)));
    setIsDeleting(true);
    addChatMessage({ role: "assistant", content: `Deleting ${reposToDelete.length} repositories...` });

    // 2. Perform Deletions
    const deletePromises = reposToDelete.map((repo: GitHubRepo) =>
      repositoryManager.deleteRepository(effectiveToken, profile.login, repo.name)
    );

    // 3. Handle Results
    Promise.allSettled(deletePromises).then(results => {
      const failedDeletes = results.filter(res => res.status === 'rejected' || (res.status === 'fulfilled' && !res.value));

      if (failedDeletes.length > 0) {
        // Revert UI on failure and show error
        setRepositories(originalRepos);
        addChatMessage({
          role: "assistant",
          content: `Error: Failed to delete ${failedDeletes.length} repositories. Your view has been restored.`,
        });
      } else {
        addChatMessage({ role: "assistant", content: `🗑️ Successfully deleted ${reposToDelete.length} repositories.` });
        // On success, update the 'originalRepositories' to prevent reverted state on next sort
        setOriginalRepositories(currentRepos => currentRepos.filter((r: GitHubRepo) => !selectedRepos.has(r.id)));
      }

      // 4. Reset State
      setSelectedRepos(new Set());
      setIsDeleting(false);
      setIsDeleteMode(false);
    });
  };

  // --- UI State and Interaction Handlers ---

  const handleDeleteRepo = (repo: GitHubRepo) => {
    setRepoToDelete(repo);
    openModal('delete');
  };
  
  const handleRenameRepo = (repo: GitHubRepo) => {
    setRepoToRename(repo);
    openModal('rename');
  };

  const toggleRepoSelection = (repoId: number) => {
    setSelectedRepos(prev => {
      const newSet = new Set(prev);
      newSet.has(repoId) ? newSet.delete(repoId) : newSet.add(repoId);
      return newSet;
    });
  };

  const toggleDeleteMode = () => {
    setIsDeleteMode(prev => !prev);
    setSelectedRepos(new Set());
  };

  const sortRepositoriesByDate = (repos: GitHubRepo[], order: 'newest' | 'oldest' | 'default'): GitHubRepo[] => {
    if (order === 'default') return [...originalRepositories];
    return [...repos].sort((a, b) => {
      const dateA = new Date(a.updated_at).getTime();
      const dateB = new Date(b.updated_at).getTime();
      return order === 'newest' ? dateB - dateA : dateA - dateB;
    });
  };

  const handleDateSort = (order: 'newest' | 'oldest' | 'default') => {
    setDateSortOrder(order);
    setRepositories(prev => sortRepositoriesByDate(prev, order));
    setHasChanges(order !== 'default');
  };

  const onDragEnd = (result: DropResult) => {
    const { source, destination } = result;
    if (!destination) return;

    const newRepos = Array.from(repositories);
    const [reorderedItem] = newRepos.splice(source.index, 1);
    newRepos.splice(destination.index, 0, reorderedItem);

    setRepositories(newRepos);
    setHasChanges(true);
  };
  
  // --- Data Fetching and Initialization ---

  useEffect(() => {
    const unsubscribe = repositoryManager.subscribe((repos) => {
      setRepositories(repos);
      if (originalRepositories.length === 0) setOriginalRepositories(repos);
      setIsLoadingRepos(false);
    });
    return () => unsubscribe();
  }, [originalRepositories.length]);

  const fetchInitialData = useCallback(async () => {
    if (!user || isInitialized) return;
    const effectiveToken = await getEffectiveToken();
    if (effectiveToken) {
      setIsLoadingRepos(true);
      try {
        await repositoryManager.fetchRepositories(effectiveToken, false, user.id);
        setError(null);
      } catch (e: any) {
        setError(e.message || "Failed to load repositories.");
      } finally {
        setIsLoadingRepos(false);
        setIsInitialized(true);
      }
    } else if (!authLoading) {
      setError("GitHub token not found.");
      setIsLoadingRepos(false);
      setIsInitialized(true);
    }
  }, [user, isInitialized, getEffectiveToken, authLoading]);

  useEffect(() => {
    fetchInitialData();
  }, [fetchInitialData]);

  return {
    repositories,
    isLoadingRepos,
    error,
    handleRefresh,
    // Deletion
    isDeleteMode,
    isDeleting,
    selectedRepos,
    toggleDeleteMode,
    toggleRepoSelection,
    handleDeleteRepo,
    confirmDeleteRepo,
    handleBulkDelete,
    // Sorting & Ordering
    dateSortOrder,
    handleDateSort,
    onDragEnd,
    hasChanges,
    setHasChanges,
    // Creation & Renaming
    isCreatingRepo,
    isRenamingRepo,
    createRepository,
    renameRepository,
    handleRenameRepo,
    // Other
    setRepositories
  };
}
</code>

app\dashboard\types\index.ts:
<code>
export interface GitHubUser {
  id: number;
  login: string;
  name: string;
  email: string;
  avatar_url: string;
  bio: string;
  public_repos: number;
}

export interface GitHubRepo {
  id: number;
  name: string;
  full_name: string;
  description: string;
  language: string;
  stargazers_count: number;
  forks_count: number;
  html_url: string;
  updated_at: string;
  created_at: string; // Added for sorting
  private: boolean;
  fork: boolean;
  clone_url?: string; // Optional fields from your original file
  ssh_url?: string;
  pushed_at?: string;
  size?: number;
  default_branch?: string;
  topics?: string[];
  visibility?: string;
  archived?: boolean;
  disabled?: boolean;
  open_issues_count?: number;
  license?: any;
  allow_forking?: boolean;
  is_template?: boolean;
  web_commit_signoff_required?: boolean;
  has_issues?: boolean;
  has_projects?: boolean;
  has_wiki?: boolean;
  has_pages?: boolean;
  has_downloads?: boolean;
  has_discussions?: boolean;
  security_and_analysis?: any;
  parent?: {
    full_name: string;
    html_url: string;
  };
}

export interface ChatMessage {
  id: string;
  role: "user" | "assistant";
  content: string;
  timestamp: Date;
}
</code>

app\dashboard\page.tsx:
<code>
// app/dashboard/page.tsx
"use client"

import React from 'react';
import { useDashboard } from './hooks/useDashboard';
import { RepositoryList } from './components/RepositoryList';
import { ChatSidebar } from './components/ChatSidebar';
import { DashboardMetrics } from './components/DashboardMetrics';
import { ActionButtons } from './components/ActionButtons';
import { Modals } from './components/Modals';
import DashboardHeader from '@/components/dashboard-header';
import GitHubTokenWarning from '@/components/github-token-warning';
import { Button } from '@/components/ui/button';
import { RefreshCw, CheckCircle } from "lucide-react";

export const dynamic = 'force-dynamic';

export default function DashboardPage() {
  const dashboard = useDashboard();

  if (dashboard.loading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <RefreshCw className="h-8 w-8 animate-spin mx-auto mb-4" />
          <p className="text-muted-foreground">Getting ready...</p>
        </div>
      </div>
    );
  }

  const forkedRepos = dashboard.repositories.filter(repo => repo.fork);

  return (
    <div className="min-h-screen bg-background text-foreground">
      <DashboardHeader />
      <div className="container mx-auto px-6 py-8">
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          <div className="lg:col-span-2">
            {!dashboard.profile?.github_pat_token && <GitHubTokenWarning onSetupToken={dashboard.showTokenPopup} />}
            {dashboard.error && <div className="bg-destructive/20 text-destructive p-3 rounded-md mb-4">{dashboard.error}</div>}

            <DashboardMetrics 
              repositories={dashboard.repositories}
              selectedTemplate={dashboard.selectedTemplate}
              isAiThinking={dashboard.isAiThinking}
              onTemplateChange={dashboard.setSelectedTemplate}
              onGenerateTemplate={dashboard.generateTemplate}
            />
            
            <ActionButtons
              isLoadingRepos={dashboard.isLoadingRepos}
              isDeleteMode={dashboard.isDeleteMode}
              selectedReposCount={dashboard.selectedRepos.size}
              dateSortOrder={dashboard.dateSortOrder}
              onRefresh={dashboard.handleRefresh}
              onDateSort={dashboard.handleDateSort}
              onAddRepo={() => dashboard.openModal('add')}
              onJobTemplate={() => dashboard.openModal('jobTemplate')}
              onToggleDeleteMode={dashboard.toggleDeleteMode}
              onBulkDelete={dashboard.handleBulkDelete}
            />

            <RepositoryList
              repositories={dashboard.repositories.filter(repo => !repo.fork)}
              isLoadingRepos={dashboard.isLoadingRepos}
              isDeleteMode={dashboard.isDeleteMode}
              selectedRepos={dashboard.selectedRepos}
              onDragEnd={dashboard.onDragEnd}
              onToggleSelection={dashboard.toggleRepoSelection}
              onDeleteRepo={dashboard.handleDeleteRepo}
              onRenameRepo={(repo) => {
                  dashboard.setNewRepoNameForRename(repo.name);
                  dashboard.handleRenameRepo(repo);
              }}
            />

            {dashboard.hasChanges && (
              <div className="mt-4 p-3 bg-muted/30 rounded-lg border border-border/50">
                <Button onClick={() => dashboard.setHasChanges(false)} disabled={dashboard.isAiThinking} className="w-full">
                  {dashboard.isAiThinking ? 'Applying...' : <><CheckCircle className="w-4 h-4 mr-2" />Apply Changes</>}
                </Button>
              </div>
            )}

            {forkedRepos.length > 0 && (
              <div className="mt-6">
                <h3 className="text-lg font-semibold mb-2">Forked Repositories</h3>
                {/* You can map over forkedRepos here to display them */}
              </div>
            )}
          </div>

          {/* THIS IS THE UPDATED LINE */}
          <div className="lg:col-span-1 sticky top-24 self-start">
            <ChatSidebar
              isMinimized={dashboard.isChatMinimized}
              isCriticMode={dashboard.isCriticMode}
              isInterviewMode={dashboard.isInterviewMode}
              interviewProgress={dashboard.interviewProgress}
              generatedReadme={dashboard.generatedReadme}
              chatMessages={dashboard.chatMessages}
              chatMessage={dashboard.chatMessage}
              isAiThinking={dashboard.isAiThinking}
              welcomeText={dashboard.welcomeText}
              isTypingWelcome={dashboard.isTypingWelcome}
              repositories={dashboard.repositories}
              chatEndRef={dashboard.chatEndRef}
              setIsMinimized={dashboard.setIsChatMinimized}
              setIsCriticMode={dashboard.setIsCriticMode}
              setChatMessage={dashboard.setChatMessage}
              handleSendMessage={dashboard.handleSendMessage}
              handleResetChat={dashboard.handleResetChat}
              downloadPortfolioReadme={dashboard.downloadPortfolioReadme}
              sendDirectMessage={dashboard.sendDirectMessage}
              generateReadme={dashboard.generateReadme}
            />
          </div>
        </div>
        
        <Modals
          showDeleteConfirm={dashboard.showDeleteConfirm}
          repoToDelete={dashboard.repoToDelete}
          isDeleting={dashboard.isDeleting}
          onConfirmDelete={dashboard.onConfirmDelete}
          onCancelDelete={() => dashboard.closeModal('delete')}
          showJobTemplateModal={dashboard.showJobTemplateModal}
          jobTitle={dashboard.jobTitle}
          isGeneratingTemplate={dashboard.isGeneratingTemplate}
          templateResults={dashboard.templateResults}
          onJobTitleChange={dashboard.setJobTitle}
          onGenerateJobTemplate={dashboard.generateJobTemplate}
          onCloseJobTemplate={() => dashboard.closeModal('jobTemplate')}
          showAddRepoModal={dashboard.showAddRepoModal}
          newRepoName={dashboard.newRepoName}
          newRepoDescription={dashboard.newRepoDescription}
          isCreatingRepo={dashboard.isCreatingRepo}
          onNewRepoNameChange={dashboard.setNewRepoName}
          onNewRepoDescriptionChange={dashboard.setNewRepoDescription}
          onCreateRepo={dashboard.onCreateRepo}
          onCloseAddRepo={() => dashboard.closeModal('add')}
          showRenameModal={dashboard.showRenameModal}
          repoToRename={dashboard.repoToRename}
          newRepoNameForRename={dashboard.newRepoNameForRename}
          isRenamingRepo={dashboard.isRenamingRepo}
          onNewRepoNameForRenameChange={dashboard.setNewRepoNameForRename}
          onRenameRepo={dashboard.onRenameRepo}
          onCloseRenameRepo={() => dashboard.closeModal('rename')}
        />
      </div>
    </div>
  );
}
</code>

app\debug\page.tsx:
<code>
"use client"

import { useState, useEffect } from "react"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Github, ArrowLeft, Settings, AlertTriangle, CheckCircle, XCircle } from "lucide-react"
import Link from "next/link"

export default function DebugPage() {
  const [debugInfo, setDebugInfo] = useState<any>(null)
  const [isLoading, setIsLoading] = useState(true)

  useEffect(() => {
    runDiagnostics()
  }, [])

  const runDiagnostics = async () => {
    setIsLoading(true)
    const info: any = {
      timestamp: new Date().toISOString(),
      environment: process.env.NODE_ENV,
      tests: {},
    }

    try {
      // Test 1: Environment Variables
      info.tests.envVars = {
        name: "Environment Variables",
        status: "success",
        details: {
          githubClientId: !!process.env.NEXT_PUBLIC_GITHUB_CLIENT_ID,
          clientIdValue: process.env.NEXT_PUBLIC_GITHUB_CLIENT_ID?.substring(0, 10) + "...",
          nodeEnv: process.env.NODE_ENV,
        },
      }

      // Test 2: URLs
      info.tests.urls = {
        name: "URL Configuration",
        status: "success",
        details: {
          currentOrigin: window.location.origin,
          callbackUrl: `${window.location.origin}/api/github/callback`,
          githubAuthUrl: `https://github.com/login/oauth/authorize?client_id=${process.env.NEXT_PUBLIC_GITHUB_CLIENT_ID}`,
        },
      }

      // Test 3: Session API
      try {
        const sessionResponse = await fetch("/api/session")
        info.tests.sessionApi = {
          name: "Session API",
          status: sessionResponse.ok ? "success" : "warning",
          details: {
            status: sessionResponse.status,
            statusText: sessionResponse.statusText,
            hasSession: sessionResponse.status === 200,
          },
        }
      } catch (err) {
        info.tests.sessionApi = {
          name: "Session API",
          status: "error",
          details: { error: err instanceof Error ? err.message : "Unknown error" },
        }
      }

      // Test 4: GitHub API Connectivity
      try {
        const githubResponse = await fetch("https://api.github.com/", { method: "HEAD" })
        info.tests.githubApi = {
          name: "GitHub API Connectivity",
          status: githubResponse.ok ? "success" : "error",
          details: {
            status: githubResponse.status,
            accessible: githubResponse.ok,
          },
        }
      } catch (err) {
        info.tests.githubApi = {
          name: "GitHub API Connectivity",
          status: "error",
          details: { error: err instanceof Error ? err.message : "Network error" },
        }
      }

      // Test 5: Browser Environment
      info.tests.browser = {
        name: "Browser Environment",
        status: "success",
        details: {
          localStorage: typeof localStorage !== "undefined",
          sessionStorage: typeof sessionStorage !== "undefined",
          cookies: typeof document !== "undefined",
          https: window.location.protocol === "https:" || window.location.hostname === "localhost",
          userAgent: navigator.userAgent.substring(0, 50) + "...",
        },
      }

      setDebugInfo(info)
    } catch (error) {
      console.error("Diagnostics error:", error)
      info.tests.diagnosticsError = {
        name: "Diagnostics Error",
        status: "error",
        details: { error: error instanceof Error ? error.message : "Unknown error" },
      }
      setDebugInfo(info)
    } finally {
      setIsLoading(false)
    }
  }

  const testGitHubOAuth = () => {
    const clientId = process.env.NEXT_PUBLIC_GITHUB_CLIENT_ID
    if (!clientId) {
      alert('GitHub Client ID not configured. Please set NEXT_PUBLIC_GITHUB_CLIENT_ID environment variable.')
      return
    }

    const redirectUri = `${window.location.origin}/api/github/callback`
    const scope = "repo user"
    const state = `debug_test_${Date.now()}`

    const githubAuthUrl = new URL("https://github.com/login/oauth/authorize")
    githubAuthUrl.searchParams.set("client_id", clientId)
    githubAuthUrl.searchParams.set("redirect_uri", redirectUri)
    githubAuthUrl.searchParams.set("scope", scope)
    githubAuthUrl.searchParams.set("state", state)

    console.log("🧪 Testing GitHub OAuth with URL:", githubAuthUrl.toString())
    window.open(githubAuthUrl.toString(), "_blank")
  }

  const getStatusIcon = (status: string) => {
    switch (status) {
      case "success":
        return <CheckCircle className="h-4 w-4 text-green-400" />
      case "warning":
        return <AlertTriangle className="h-4 w-4 text-yellow-400" />
      case "error":
        return <XCircle className="h-4 w-4 text-red-400" />
      default:
        return <AlertTriangle className="h-4 w-4 text-gray-400" />
    }
  }

  const getStatusColor = (status: string) => {
    switch (status) {
      case "success":
        return "border-green-500/50 bg-green-900/20"
      case "warning":
        return "border-yellow-500/50 bg-yellow-900/20"
      case "error":
        return "border-red-500/50 bg-red-900/20"
      default:
        return "border-gray-500/50 bg-gray-900/20"
    }
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900 text-white">
      <div className="container mx-auto px-4 py-8">
        {/* Header */}
        <div className="flex items-center justify-between mb-8">
          <div>
            <h1 className="text-3xl font-bold mb-2">🔧 Debug Dashboard</h1>
            <p className="text-gray-400">Troubleshoot GitHub OAuth issues</p>
          </div>
          <Link href="/">
            <Button variant="outline" className="border-gray-600 text-gray-300 hover:bg-gray-800 bg-transparent">
              <ArrowLeft className="h-4 w-4 mr-2" />
              Back to Home
            </Button>
          </Link>
        </div>

        {/* Quick Actions */}
        <div className="grid md:grid-cols-3 gap-6 mb-8">
          <Card className="bg-gray-800/30 border-gray-700/50">
            <CardContent className="p-6">
              <Button onClick={testGitHubOAuth} className="w-full bg-purple-600 hover:bg-purple-700">
                <Github className="h-4 w-4 mr-2" />
                Test GitHub OAuth (New Tab)
              </Button>
            </CardContent>
          </Card>

          <Card className="bg-gray-800/30 border-gray-700/50">
            <CardContent className="p-6">
              <Button onClick={runDiagnostics} disabled={isLoading} className="w-full bg-blue-600 hover:bg-blue-700">
                <Settings className="h-4 w-4 mr-2" />
                {isLoading ? "Running..." : "Refresh Diagnostics"}
              </Button>
            </CardContent>
          </Card>

          <Card className="bg-gray-800/30 border-gray-700/50">
            <CardContent className="p-6">
              <Button
                onClick={() => window.open("https://github.com/settings/applications", "_blank")}
                variant="outline"
                className="w-full border-gray-600 bg-transparent"
              >
                <Github className="h-4 w-4 mr-2" />
                GitHub OAuth Apps
              </Button>
            </CardContent>
          </Card>
        </div>

        {/* Diagnostics Results */}
        {debugInfo && (
          <div className="space-y-6">
            <Card className="bg-gray-800/30 border-gray-700/50">
              <CardHeader>
                <CardTitle>📊 System Information</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="grid md:grid-cols-2 gap-4 text-sm">
                  <div>
                    <strong>Timestamp:</strong> {new Date(debugInfo.timestamp).toLocaleString()}
                  </div>
                  <div>
                    <strong>Environment:</strong> {debugInfo.environment}
                  </div>
                </div>
              </CardContent>
            </Card>

            {/* Test Results */}
            <div className="grid gap-4">
              {Object.entries(debugInfo.tests).map(([key, test]: [string, any]) => (
                <Card key={key} className={`${getStatusColor(test.status)} border`}>
                  <CardContent className="p-4">
                    <div className="flex items-center justify-between mb-3">
                      <h4 className="font-semibold flex items-center gap-2">
                        {getStatusIcon(test.status)}
                        {test.name}
                      </h4>
                      <Badge variant={test.status === "success" ? "default" : "destructive"}>
                        {test.status.toUpperCase()}
                      </Badge>
                    </div>
                    <div className="text-sm space-y-2">
                      {Object.entries(test.details).map(([detailKey, value]: [string, any]) => (
                        <div key={detailKey} className="flex justify-between items-center">
                          <span className="text-gray-400">{detailKey}:</span>
                          <span
                            className={`font-mono text-xs ${
                              typeof value === "boolean" ? (value ? "text-green-400" : "text-red-400") : "text-gray-300"
                            }`}
                          >
                            {typeof value === "boolean" ? (value ? "✅ Yes" : "❌ No") : String(value)}
                          </span>
                        </div>
                      ))}
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          </div>
        )}

        {/* Common Issues */}
        <Card className="bg-gray-800/30 border-gray-700/50 mt-8">
          <CardHeader>
            <CardTitle>🚨 Common Issues & Solutions</CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="border-l-4 border-red-500 pl-4">
              <h4 className="font-semibold text-red-400">Blank White Page After OAuth</h4>
              <p className="text-sm text-gray-300">
                Usually caused by callback URL mismatch. Check that your GitHub OAuth App callback URL is exactly:{" "}
                <code className="bg-gray-700 px-1 rounded">
                  {typeof window !== "undefined" ? `${window.location.origin}/api/github/callback` : ""}
                </code>
              </p>
            </div>
            <div className="border-l-4 border-yellow-500 pl-4">
              <h4 className="font-semibold text-yellow-400">OAuth App Not Found</h4>
              <p className="text-sm text-gray-300">
                Make sure your GitHub OAuth App exists and the Client ID matches your environment variable
              </p>
            </div>
            <div className="border-l-4 border-blue-500 pl-4">
              <h4 className="font-semibold text-blue-400">CORS or Network Issues</h4>
              <p className="text-sm text-gray-300">
                Check browser console for errors and ensure you're not blocking GitHub API requests
              </p>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  )
}

</code>

app\profile\page.tsx:
<code>
"use client"

// Force dynamic rendering to avoid static generation issues with auth
export const dynamic = 'force-dynamic'

import React, { useState } from 'react';
import { useRouter } from 'next/navigation';
import { useAuth } from '@/components/auth-provider';
import TokenManagement from '@/components/token-management';
import { ThemeToggle } from '@/components/theme-toggle';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Badge } from '@/components/ui/badge';
// import { Label } from '@/components/ui/label';
import { Separator } from '@/components/ui/separator';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { 
  ArrowLeft, 
  User, 
  Settings, 
  Shield, 
  LogOut, 
  Github,
  Mail,
  Calendar,
  CheckCircle,
  AlertTriangle,
  Key
} from 'lucide-react';


export default function ProfilePage() {
  const router = useRouter();
  const { user, profile, loading, signOut, updateToken, deleteToken } = useAuth();
  const [isUpdating, setIsUpdating] = useState(false);
  const [updateMessage, setUpdateMessage] = useState('');

  const handleTokenUpdate = async (token: string) => {
    if (!user) return;
    
    setIsUpdating(true);
    try {
      await updateToken(token);
      
      setUpdateMessage('✅ GitHub token updated successfully!');
      setTimeout(() => setUpdateMessage(''), 3000);
    } catch (error) {
      console.error('Error updating token:', error);
      setUpdateMessage('❌ Failed to update token. Please try again.');
      setTimeout(() => setUpdateMessage(''), 3000);
    } finally {
      setIsUpdating(false);
    }
  };

  const handleTokenDelete = async () => {
    if (!user) return;
    
    setIsUpdating(true);
    try {
      await deleteToken();
      
      setUpdateMessage('✅ GitHub token deleted successfully!');
      setTimeout(() => setUpdateMessage(''), 3000);
    } catch (error) {
      console.error('Error deleting token:', error);
      setUpdateMessage('❌ Failed to delete token. Please try again.');
      setTimeout(() => setUpdateMessage(''), 3000);
    } finally {
      setIsUpdating(false);
    }
  };

  const handleSignOut = async () => {
    await signOut();
    router.push('/');
  };

  // Show loading while auth or profile is initializing
  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <h1 className="text-2xl font-bold mb-4">Loading...</h1>
          <p className="text-muted-foreground mb-4">Initializing your profile...</p>
        </div>
      </div>
    );
  }

  // If still no user after loading, show message (no automatic redirect)
  if (!user) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <h1 className="text-2xl font-bold mb-4">Not Authenticated</h1>
          <p className="text-muted-foreground mb-4">Please sign in to view your profile.</p>
          <p className="text-muted-foreground">Navigate manually to the homepage to sign in.</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-background">
      {/* Header */}
      <div className="border-b bg-card">
        <div className="container mx-auto px-4 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-4">
              <Button 
                variant="ghost" 
                size="sm" 
                onClick={() => router.push('/dashboard')}
              >
                <ArrowLeft className="h-4 w-4 mr-2" />
                Back to Dashboard
              </Button>
              <div className="flex items-center gap-2">
                <User className="h-5 w-5" />
                <h1 className="text-xl font-semibold">Profile Settings</h1>
              </div>
            </div>
            <ThemeToggle />
          </div>
        </div>
      </div>

      <div className="container mx-auto px-4 py-8 max-w-4xl">
        {/* Update Message */}
        {updateMessage && (
          <Alert className="mb-6">
            <AlertDescription>{updateMessage}</AlertDescription>
          </Alert>
        )}

        <div className="grid gap-6">
          {/* Profile Information */}
          <Card>
            <CardHeader>
              <div className="flex items-center gap-2">
                <User className="h-5 w-5" />
                <CardTitle>Profile Information</CardTitle>
              </div>
              <CardDescription>
                Your account information from GitHub
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              <div className="flex items-center gap-4">
                <Avatar className="h-16 w-16">
                  <AvatarImage 
                    src={user.user_metadata?.avatar_url} 
                    alt={user.user_metadata?.name || 'User'} 
                  />
                  <AvatarFallback>
                    {user.user_metadata?.name?.[0] || 'U'}
                  </AvatarFallback>
                </Avatar>
                <div>
                  <h3 className="text-lg font-semibold">
                    {user.user_metadata?.full_name || user.user_metadata?.name || 'Unknown User'}
                  </h3>
                  <p className="text-muted-foreground">
                    @{user.user_metadata?.user_name || 'unknown'}
                  </p>
                </div>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="space-y-2">
                  <label htmlFor="email" className="text-sm font-medium">Email</label>
                  <div className="flex items-center gap-2">
                    <Mail className="h-4 w-4 text-muted-foreground" />
                    <Input
                      id="email"
                      value={user.email || 'Not provided'}
                      disabled
                      className="bg-muted"
                    />
                  </div>
                </div>

                <div className="space-y-2">
                  <label htmlFor="github" className="text-sm font-medium">GitHub Username</label>
                  <div className="flex items-center gap-2">
                    <Github className="h-4 w-4 text-muted-foreground" />
                    <Input
                      id="github"
                      value={user.user_metadata?.user_name || 'Not connected'}
                      disabled
                      className="bg-muted"
                    />
                  </div>
                </div>
              </div>

              <div className="space-y-2">
                <label htmlFor="joined" className="text-sm font-medium">Member Since</label>
                <div className="flex items-center gap-2">
                  <Calendar className="h-4 w-4 text-muted-foreground" />
                  <Input
                    id="joined"
                    value={new Date(user.created_at).toLocaleDateString()}
                    disabled
                    className="bg-muted"
                  />
                </div>
              </div>
            </CardContent>
          </Card>

          {/* GitHub Token Management */}
          <Card>
            <CardHeader>
              <div className="flex items-center gap-2">
                <Key className="h-5 w-5" />
                <CardTitle>GitHub Access Token</CardTitle>
              </div>
              <CardDescription>
                Manage your GitHub Personal Access Token for repository operations
              </CardDescription>
            </CardHeader>
            <CardContent>
              <TokenManagement
                currentToken={profile?.github_pat_token}
                onTokenUpdate={handleTokenUpdate}
                onTokenDelete={handleTokenDelete}
              />
            </CardContent>
          </Card>

          {/* Account Security */}
          <Card>
            <CardHeader>
              <div className="flex items-center gap-2">
                <Shield className="h-5 w-5" />
                <CardTitle>Account Security</CardTitle>
              </div>
              <CardDescription>
                Manage your account security settings
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="flex items-center justify-between p-4 border rounded-lg">
                <div className="flex items-center gap-3">
                  <CheckCircle className="h-5 w-5 text-green-500" />
                  <div>
                    <p className="font-medium">GitHub OAuth</p>
                    <p className="text-sm text-muted-foreground">
                      Connected via GitHub OAuth
                    </p>
                  </div>
                </div>
                <Badge variant="secondary">Active</Badge>
              </div>

              <Alert>
                <AlertTriangle className="h-4 w-4" />
                <AlertDescription>
                  <strong>Password Management:</strong> Your account is managed through GitHub OAuth. 
                  To change your password, please update it in your GitHub account settings.
                </AlertDescription>
              </Alert>
            </CardContent>
          </Card>

          {/* Danger Zone */}
          <Card className="border-red-200 dark:border-red-800">
            <CardHeader>
              <CardTitle className="text-red-600 dark:text-red-400">Danger Zone</CardTitle>
              <CardDescription>
                Irreversible and destructive actions
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="flex items-center justify-between p-4 border border-red-200 dark:border-red-800 rounded-lg">
                <div>
                  <p className="font-medium">Sign Out</p>
                  <p className="text-sm text-muted-foreground">
                    Sign out of your account on this device
                  </p>
                </div>
                <Button 
                  variant="destructive" 
                  onClick={handleSignOut}
                >
                  <LogOut className="h-4 w-4 mr-2" />
                  Sign Out
                </Button>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
}

</code>

app\signout\page.tsx:
<code>
"use client"

import { useEffect, useState } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import { Github, CheckCircle } from 'lucide-react';
import { Badge } from '@/components/ui/badge';
import { Card, CardContent } from '@/components/ui/card';

export default function SignoutPage() {
  const router = useRouter();
  const searchParams = useSearchParams();

  // Get user info from URL parameters
  const username = searchParams.get('username') || 'User';
  const email = searchParams.get('email') || '';
  const avatar = searchParams.get('avatar') || '';

  // REMOVED: Countdown timer and automatic redirect logic

  return (
    <div className="min-h-screen bg-background flex items-center justify-center p-4">
      <div className="w-full max-w-md space-y-6">
        {/* Header */}
        <div className="text-center space-y-2">
          <div className="flex items-center justify-center space-x-3 mb-4">
            <Github className="h-8 w-8 text-primary" />
            <div className="flex flex-col">
              <span className="text-xl font-bold">NeatRepo</span>
            </div>
          </div>
          <h1 className="text-2xl font-bold">Account signed out</h1>
          <p className="text-muted-foreground">
            You have been successfully signed out
          </p>
        </div>

        {/* Signed out account card */}
        <Card className="border-2">
          <CardContent className="p-6">
            <div className="flex items-center space-x-4">
              {/* Avatar */}
              <div className="relative">
                {avatar ? (
                  <img 
                    src={avatar} 
                    alt={username}
                    className="w-12 h-12 rounded-full"
                  />
                ) : (
                  <div className="w-12 h-12 rounded-full bg-muted flex items-center justify-center">
                    <Github className="h-6 w-6 text-muted-foreground" />
                  </div>
                )}
                {/* Signed out badge */}
                <div className="absolute -top-1 -right-1">
                  <Badge variant="secondary" className="text-xs px-2 py-1 bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200">
                    <CheckCircle className="h-3 w-3 mr-1" />
                    Signed out
                  </Badge>
                </div>
              </div>

              {/* Account info */}
              <div className="flex-1 min-w-0">
                <p className="font-medium text-sm truncate">{username}</p>
                {email && (
                  <p className="text-xs text-muted-foreground truncate">{email}</p>
                )}
                <p className="text-xs text-muted-foreground mt-1">
                  GitHub account
                </p>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Status message */}
        <div className="text-center space-y-3">
          <div className="flex items-center justify-center space-x-2">
            <CheckCircle className="w-4 h-4 text-green-600" />
            <span className="text-sm text-muted-foreground">
              Sign out complete
            </span>
          </div>

          <p className="text-xs text-muted-foreground">
            Choose where to go next - no automatic redirection
          </p>
        </div>

        {/* Additional options */}
        <div className="text-center space-y-2">
          <button
            onClick={() => router.push('/')}
            className="text-sm text-primary hover:underline"
          >
            Go to homepage now
          </button>
          
          <div className="text-xs text-muted-foreground">
            Want to sign in with a different account?{' '}
            <button
              onClick={() => router.push('/')}
              className="text-primary hover:underline"
            >
              Sign in here
            </button>
          </div>
        </div>
      </div>
    </div>
  );
}

</code>

app\test-callback\page.tsx:
<code>
"use client"

import { useState } from "react"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Github, ArrowLeft, Play, CheckCircle, XCircle, AlertTriangle } from "lucide-react"
import Link from "next/link"

export default function TestCallbackPage() {
  const [testResults, setTestResults] = useState<any>(null)
  const [isLoading, setIsLoading] = useState(false)

  const runCallbackTest = async () => {
    setIsLoading(true)
    const results: any = {
      timestamp: new Date().toISOString(),
      tests: {},
    }

    try {
      // Test 1: Basic callback endpoint
      console.log("🧪 Testing callback endpoint...")
      try {
        const response = await fetch("/api/github/callback?test=true")
        results.tests.callbackEndpoint = {
          name: "Callback Endpoint",
          status: response.ok ? "success" : "error",
          details: {
            status: response.status,
            statusText: response.statusText,
            accessible: response.ok,
          },
        }
      } catch (err) {
        results.tests.callbackEndpoint = {
          name: "Callback Endpoint",
          status: "error",
          details: { error: err instanceof Error ? err.message : "Unknown error" },
        }
      }

      // Test 2: Environment variables
      results.tests.environment = {
        name: "Environment Variables",
        status: "success",
        details: {
          clientId: !!process.env.NEXT_PUBLIC_GITHUB_CLIENT_ID,
          nodeEnv: process.env.NODE_ENV,
          origin: window.location.origin,
        },
      }

      // Test 3: Session API
      try {
        const sessionResponse = await fetch("/api/session")
        results.tests.sessionApi = {
          name: "Session API",
          status: sessionResponse.status === 401 ? "success" : "warning", // 401 is expected when no session
          details: {
            status: sessionResponse.status,
            statusText: sessionResponse.statusText,
            working: sessionResponse.status === 401 || sessionResponse.status === 200,
          },
        }
      } catch (err) {
        results.tests.sessionApi = {
          name: "Session API",
          status: "error",
          details: { error: err instanceof Error ? err.message : "Unknown error" },
        }
      }

      // Test 4: GitHub OAuth URL generation
      try {
        const clientId = process.env.NEXT_PUBLIC_GITHUB_CLIENT_ID
        if (!clientId) {
          throw new Error('GitHub Client ID not configured')
        }

        const redirectUri = `${window.location.origin}/api/github/callback`
        const githubUrl = `https://github.com/login/oauth/authorize?client_id=${clientId}&redirect_uri=${encodeURIComponent(redirectUri)}&scope=repo%20user`

        results.tests.oauthUrl = {
          name: "OAuth URL Generation",
          status: "success",
          details: {
            clientId: clientId.substring(0, 10) + "...",
            redirectUri,
            fullUrl: githubUrl.substring(0, 100) + "...",
          },
        }
      } catch (err) {
        results.tests.oauthUrl = {
          name: "OAuth URL Generation",
          status: "error",
          details: { error: err instanceof Error ? err.message : "Unknown error" },
        }
      }

      setTestResults(results)
    } catch (error) {
      console.error("Test error:", error)
      results.tests.testError = {
        name: "Test Execution",
        status: "error",
        details: { error: error instanceof Error ? error.message : "Unknown error" },
      }
      setTestResults(results)
    } finally {
      setIsLoading(false)
    }
  }

  const testOAuthFlow = () => {
    const clientId = process.env.NEXT_PUBLIC_GITHUB_CLIENT_ID || "Ov23liaOcBS8zuFJCGyG"
    const redirectUri = `${window.location.origin}/api/github/callback`
    const scope = "repo user"
    const state = `test_${Date.now()}`

    const githubAuthUrl = new URL("https://github.com/login/oauth/authorize")
    githubAuthUrl.searchParams.set("client_id", clientId)
    githubAuthUrl.searchParams.set("redirect_uri", redirectUri)
    githubAuthUrl.searchParams.set("scope", scope)
    githubAuthUrl.searchParams.set("state", state)

    console.log("🧪 Testing OAuth flow with URL:", githubAuthUrl.toString())
    window.location.href = githubAuthUrl.toString()
  }

  const getStatusIcon = (status: string) => {
    switch (status) {
      case "success":
        return <CheckCircle className="h-4 w-4 text-green-400" />
      case "warning":
        return <AlertTriangle className="h-4 w-4 text-yellow-400" />
      case "error":
        return <XCircle className="h-4 w-4 text-red-400" />
      default:
        return <AlertTriangle className="h-4 w-4 text-gray-400" />
    }
  }

  const getStatusColor = (status: string) => {
    switch (status) {
      case "success":
        return "border-green-500/50 bg-green-900/20"
      case "warning":
        return "border-yellow-500/50 bg-yellow-900/20"
      case "error":
        return "border-red-500/50 bg-red-900/20"
      default:
        return "border-gray-500/50 bg-gray-900/20"
    }
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900 text-white">
      <div className="container mx-auto px-4 py-8">
        {/* Header */}
        <div className="flex items-center justify-between mb-8">
          <div>
            <h1 className="text-3xl font-bold mb-2">🧪 Callback Test Page</h1>
            <p className="text-gray-400">Test GitHub OAuth callback functionality</p>
          </div>
          <Link href="/">
            <Button variant="outline" className="border-gray-600 text-gray-300 hover:bg-gray-800 bg-transparent">
              <ArrowLeft className="h-4 w-4 mr-2" />
              Back to Home
            </Button>
          </Link>
        </div>

        {/* Test Actions */}
        <div className="grid md:grid-cols-2 gap-6 mb-8">
          <Card className="bg-gray-800/30 border-gray-700/50">
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Play className="h-5 w-5 text-blue-400" />
                Run Callback Tests
              </CardTitle>
            </CardHeader>
            <CardContent>
              <p className="text-gray-400 mb-4">Test all callback-related functionality without OAuth</p>
              <Button onClick={runCallbackTest} disabled={isLoading} className="w-full bg-blue-600 hover:bg-blue-700">
                {isLoading ? "Running Tests..." : "Run Tests"}
              </Button>
            </CardContent>
          </Card>

          <Card className="bg-gray-800/30 border-gray-700/50">
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Github className="h-5 w-5 text-purple-400" />
                Test Full OAuth Flow
              </CardTitle>
            </CardHeader>
            <CardContent>
              <p className="text-gray-400 mb-4">Test the complete GitHub OAuth flow (will redirect)</p>
              <Button onClick={testOAuthFlow} className="w-full bg-purple-600 hover:bg-purple-700">
                <Github className="h-4 w-4 mr-2" />
                Test OAuth Flow
              </Button>
            </CardContent>
          </Card>
        </div>

        {/* Test Results */}
        {testResults && (
          <div className="space-y-4">
            <Card className="bg-gray-800/30 border-gray-700/50">
              <CardHeader>
                <CardTitle>📊 Test Results</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="text-sm text-gray-400 mb-4">
                  Last run: {new Date(testResults.timestamp).toLocaleString()}
                </div>
              </CardContent>
            </Card>

            {Object.entries(testResults.tests).map(([key, test]: [string, any]) => (
              <Card key={key} className={`${getStatusColor(test.status)} border`}>
                <CardContent className="p-4">
                  <div className="flex items-center justify-between mb-3">
                    <h4 className="font-semibold flex items-center gap-2">
                      {getStatusIcon(test.status)}
                      {test.name}
                    </h4>
                    <Badge variant={test.status === "success" ? "default" : "destructive"}>
                      {test.status.toUpperCase()}
                    </Badge>
                  </div>
                  <div className="text-sm space-y-1">
                    {Object.entries(test.details).map(([detailKey, value]: [string, any]) => (
                      <div key={detailKey} className="flex justify-between items-center">
                        <span className="text-gray-400">{detailKey}:</span>
                        <span
                          className={`font-mono text-xs ${
                            typeof value === "boolean" ? (value ? "text-green-400" : "text-red-400") : "text-gray-300"
                          }`}
                        >
                          {typeof value === "boolean" ? (value ? "✅" : "❌") : String(value)}
                        </span>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        )}

        {/* Instructions */}
        <Card className="bg-gray-800/30 border-gray-700/50 mt-8">
          <CardHeader>
            <CardTitle>📝 Testing Instructions</CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="border-l-4 border-blue-500 pl-4">
              <h4 className="font-semibold text-blue-400">Step 1: Run Callback Tests</h4>
              <p className="text-sm text-gray-300">
                This will test if your callback endpoint is working and all environment variables are set correctly.
              </p>
            </div>
            <div className="border-l-4 border-purple-500 pl-4">
              <h4 className="font-semibold text-purple-400">Step 2: Test OAuth Flow</h4>
              <p className="text-sm text-gray-300">
                This will redirect you to GitHub OAuth. If successful, you should be redirected back to the dashboard.
              </p>
            </div>
            <div className="border-l-4 border-green-500 pl-4">
              <h4 className="font-semibold text-green-400">Step 3: Check Console Logs</h4>
              <p className="text-sm text-gray-300">
                Open browser developer tools and check the console for detailed logs during the OAuth process.
              </p>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  )
}

</code>

app\test-sorting\page.tsx:
<code>
'use client';

import { useState } from 'react';
import { RepositorySorter, Repository } from '@/lib/repository-sorter';

// Mock repository data for testing
const mockRepositories: Repository[] = [
  {
    id: 1,
    name: 'hello-world',
    full_name: 'almond-donut/hello-world',
    description: 'My first repository',
    language: 'JavaScript',
    stargazers_count: 2,
    forks_count: 0,
    updated_at: '2024-01-15T10:00:00Z',
    created_at: '2024-01-01T10:00:00Z',
    html_url: 'https://github.com/almond-donut/hello-world',
    size: 50,
    has_issues: true,
    has_projects: false,
    has_wiki: false,
    open_issues_count: 1,
    topics: ['beginner'],
  },
  {
    id: 2,
    name: 'react-dashboard',
    full_name: 'almond-donut/react-dashboard',
    description: 'Advanced React dashboard with TypeScript and real-time features',
    language: 'TypeScript',
    stargazers_count: 25,
    forks_count: 5,
    updated_at: '2024-07-20T15:30:00Z',
    created_at: '2024-06-01T10:00:00Z',
    html_url: 'https://github.com/almond-donut/react-dashboard',
    size: 15000,
    has_issues: true,
    has_projects: true,
    has_wiki: true,
    open_issues_count: 8,
    topics: ['react', 'typescript', 'dashboard', 'real-time'],
  },
  {
    id: 3,
    name: 'python-scraper',
    full_name: 'almond-donut/python-scraper',
    description: 'Web scraping tool with data analysis',
    language: 'Python',
    stargazers_count: 12,
    forks_count: 3,
    updated_at: '2024-07-10T12:00:00Z',
    created_at: '2024-05-15T10:00:00Z',
    html_url: 'https://github.com/almond-donut/python-scraper',
    size: 5000,
    has_issues: true,
    has_projects: false,
    has_wiki: false,
    open_issues_count: 3,
    topics: ['python', 'scraping', 'data-analysis'],
  },
  {
    id: 4,
    name: 'css-animations',
    full_name: 'almond-donut/css-animations',
    description: 'Collection of CSS animations and effects',
    language: 'CSS',
    stargazers_count: 8,
    forks_count: 1,
    updated_at: '2024-03-20T14:00:00Z',
    created_at: '2024-03-01T10:00:00Z',
    html_url: 'https://github.com/almond-donut/css-animations',
    size: 200,
    has_issues: false,
    has_projects: false,
    has_wiki: false,
    open_issues_count: 0,
    topics: ['css', 'animations'],
  },
  {
    id: 5,
    name: 'rust-cli-tool',
    full_name: 'almond-donut/rust-cli-tool',
    description: 'High-performance CLI tool built with Rust',
    language: 'Rust',
    stargazers_count: 45,
    forks_count: 12,
    updated_at: '2024-07-22T09:15:00Z',
    created_at: '2024-04-01T10:00:00Z',
    html_url: 'https://github.com/almond-donut/rust-cli-tool',
    size: 8000,
    has_issues: true,
    has_projects: true,
    has_wiki: true,
    open_issues_count: 15,
    topics: ['rust', 'cli', 'performance', 'systems-programming'],
  },
];

export default function TestSortingPage() {
  const [repositories, setRepositories] = useState<Repository[]>(mockRepositories);
  const [sortMode, setSortMode] = useState<string>('original');

  const handleSort = (mode: string) => {
    let sorted: Repository[];
    
    switch (mode) {
      case 'complexity-asc':
        sorted = RepositorySorter.sortByComplexity([...repositories], 'asc');
        break;
      case 'complexity-desc':
        sorted = RepositorySorter.sortByComplexity([...repositories], 'desc');
        break;
      case 'cv-optimized':
        sorted = RepositorySorter.sortForCV([...repositories]);
        break;
      default:
        sorted = [...mockRepositories];
    }
    
    setRepositories(sorted);
    setSortMode(mode);
  };

  const getComplexityInfo = (repo: Repository) => {
    const complexity = RepositorySorter.calculateComplexity(repo);
    return complexity;
  };

  return (
    <div className="min-h-screen bg-gray-50 p-8">
      <div className="max-w-6xl mx-auto">
        <h1 className="text-3xl font-bold text-gray-900 mb-8">
          🧪 Repository Sorting Test Page
        </h1>
        
        <div className="bg-white rounded-lg shadow-md p-6 mb-8">
          <h2 className="text-xl font-semibold mb-4">Sorting Controls</h2>
          <div className="flex flex-wrap gap-4">
            <button
              onClick={() => handleSort('original')}
              className={`px-4 py-2 rounded-md ${
                sortMode === 'original'
                  ? 'bg-blue-600 text-white'
                  : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
              }`}
            >
              Original Order
            </button>
            <button
              onClick={() => handleSort('complexity-asc')}
              className={`px-4 py-2 rounded-md ${
                sortMode === 'complexity-asc'
                  ? 'bg-blue-600 text-white'
                  : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
              }`}
            >
              Simple → Complex
            </button>
            <button
              onClick={() => handleSort('complexity-desc')}
              className={`px-4 py-2 rounded-md ${
                sortMode === 'complexity-desc'
                  ? 'bg-blue-600 text-white'
                  : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
              }`}
            >
              Complex → Simple
            </button>
            <button
              onClick={() => handleSort('cv-optimized')}
              className={`px-4 py-2 rounded-md ${
                sortMode === 'cv-optimized'
                  ? 'bg-blue-600 text-white'
                  : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
              }`}
            >
              CV Optimized
            </button>
          </div>
          <p className="text-sm text-gray-600 mt-2">
            Current mode: <span className="font-semibold">{sortMode}</span>
          </p>
        </div>

        <div className="space-y-4">
          {repositories.map((repo, index) => {
            const complexity = getComplexityInfo(repo);
            return (
              <div key={repo.id} className="bg-white rounded-lg shadow-md p-6">
                <div className="flex items-start justify-between">
                  <div className="flex-1">
                    <div className="flex items-center gap-3 mb-2">
                      <span className="text-lg font-bold text-gray-500">
                        #{index + 1}
                      </span>
                      <h3 className="text-xl font-semibold text-gray-900">
                        {repo.name}
                      </h3>
                      <span className="px-2 py-1 bg-blue-100 text-blue-800 text-sm rounded-md">
                        {repo.language}
                      </span>
                    </div>
                    <p className="text-gray-600 mb-3">{repo.description}</p>
                    <div className="flex items-center gap-4 text-sm text-gray-500">
                      <span>⭐ {repo.stargazers_count}</span>
                      <span>🍴 {repo.forks_count}</span>
                      <span>📦 {repo.size} KB</span>
                      <span>📅 {new Date(repo.updated_at).toLocaleDateString()}</span>
                    </div>
                  </div>
                  <div className="ml-6 text-right">
                    <div className={`px-3 py-1 rounded-full text-sm font-medium mb-2 ${
                      complexity.level === 'Simple' ? 'bg-green-100 text-green-800' :
                      complexity.level === 'Intermediate' ? 'bg-yellow-100 text-yellow-800' :
                      complexity.level === 'Complex' ? 'bg-orange-100 text-orange-800' :
                      'bg-red-100 text-red-800'
                    }`}>
                      {complexity.level}
                    </div>
                    <div className="text-lg font-bold text-gray-900">
                      Score: {complexity.score}
                    </div>
                    <div className="text-xs text-gray-500 mt-1">
                      {complexity.factors.slice(0, 2).join(', ')}
                      {complexity.factors.length > 2 && '...'}
                    </div>
                  </div>
                </div>
              </div>
            );
          })}
        </div>

        <div className="mt-8 bg-white rounded-lg shadow-md p-6">
          <h2 className="text-xl font-semibold mb-4">🎯 CV Recommendations</h2>
          <button
            onClick={() => {
              const recommendations = RepositorySorter.generateCVRecommendations(repositories);
              console.log('CV Recommendations:', recommendations);
              alert(`Generated ${recommendations.length} CV recommendations. Check console for details.`);
            }}
            className="px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700"
          >
            Generate CV Recommendations
          </button>
        </div>
      </div>
    </div>
  );
}

</code>

app\globals.css:
<code>
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --font-jetbrains-mono: "JetBrains Mono", monospace;
  --background: 0 0% 100%;
  --foreground: 0 0% 3.9%;
  --card: 0 0% 100%;
  --card-foreground: 0 0% 3.9%;
  --popover: 0 0% 100%;
  --popover-foreground: 0 0% 3.9%;
  --primary: 0 0% 9%;
  --primary-foreground: 0 0% 98%;
  --secondary: 0 0% 96.1%;
  --secondary-foreground: 0 0% 9%;
  --muted: 0 0% 96.1%;
  --muted-foreground: 0 0% 45.1%;
  --accent: 0 0% 96.1%;
  --accent-foreground: 0 0% 9%;
  --destructive: 0 84.2% 60.2%;
  --destructive-foreground: 0 0% 98%;
  --border: 0 0% 89.8%;
  --input: 0 0% 89.8%;
  --ring: 0 0% 3.9%;
  --chart-1: 12 76% 61%;
  --chart-2: 173 58% 39%;
  --chart-3: 197 37% 24%;
  --chart-4: 43 74% 66%;
  --chart-5: 27 87% 67%;
  --radius: 0.5rem;
  --sidebar-background: 0 0% 98%;
  --sidebar-foreground: 240 5.3% 26.1%;
  --sidebar-primary: 240 5.9% 10%;
  --sidebar-primary-foreground: 0 0% 98%;
  --sidebar-accent: 240 4.8% 95.9%;
  --sidebar-accent-foreground: 240 5.9% 10%;
  --sidebar-border: 220 13% 91%;
  --sidebar-ring: 217.2 91.2% 59.8%;
}

.dark {
  --background: 0 0% 3.9%;
  --foreground: 0 0% 98%;
  --card: 0 0% 3.9%;
  --card-foreground: 0 0% 98%;
  --popover: 0 0% 3.9%;
  --popover-foreground: 0 0% 98%;
  --primary: 0 0% 98%;
  --primary-foreground: 0 0% 9%;
  --secondary: 0 0% 14.9%;
  --secondary-foreground: 0 0% 98%;
  --muted: 0 0% 14.9%;
  --muted-foreground: 0 0% 63.9%;
  --accent: 0 0% 14.9%;
  --accent-foreground: 0 0% 98%;
  --destructive: 0 62.8% 30.6%;
  --destructive-foreground: 0 0% 98%;
  --border: 0 0% 14.9%;
  --input: 0 0% 14.9%;
  --ring: 0 0% 83.1%;
  --chart-1: 220 70% 50%;
  --chart-2: 160 60% 45%;
  --chart-3: 30 80% 55%;
  --chart-4: 280 65% 60%;
  --chart-5: 340 75% 55%;
  --sidebar-background: 240 5.9% 10%;
  --sidebar-foreground: 240 4.8% 95.9%;
  --sidebar-primary: 224.3 76.3% 48%;
  --sidebar-primary-foreground: 0 0% 100%;
  --sidebar-accent: 240 3.7% 15.9%;
  --sidebar-accent-foreground: 240 4.8% 95.9%;
  --sidebar-border: 240 3.7% 15.9%;
  --sidebar-ring: 217.2 91.2% 59.8%;
}

body {
  font-family: var(--font-jetbrains-mono);
}

@layer utilities {
  .text-balance {
    text-wrap: balance;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
  :root {
    --sidebar-background: 0 0% 98%;
    --sidebar-foreground: 240 5.3% 26.1%;
    --sidebar-primary: 240 5.9% 10%;
    --sidebar-primary-foreground: 0 0% 98%;
    --sidebar-accent: 240 4.8% 95.9%;
    --sidebar-accent-foreground: 240 5.9% 10%;
    --sidebar-border: 220 13% 91%;
    --sidebar-ring: 217.2 91.2% 59.8%;
  }
  .dark {
    --sidebar-background: 240 5.9% 10%;
    --sidebar-foreground: 240 4.8% 95.9%;
    --sidebar-primary: 224.3 76.3% 48%;
    --sidebar-primary-foreground: 0 0% 100%;
    --sidebar-accent: 240 3.7% 15.9%;
    --sidebar-accent-foreground: 240 4.8% 95.9%;
    --sidebar-border: 240 3.7% 15.9%;
    --sidebar-ring: 217.2 91.2% 59.8%;
  }
}

</code>

app\layout.tsx:
<code>
import type React from "react"
import type { Metadata } from "next"
import { JetBrains_Mono } from "next/font/google"
import "./globals.css"
import { ThemeProvider } from "@/components/theme-provider"
import { AuthProvider } from "@/components/auth-provider"
import { NavigationErrorBoundary } from "@/components/navigation-error-boundary"

const jetbrainsMono = JetBrains_Mono({
  subsets: ["latin"],
  variable: "--font-jetbrains-mono",
})

export const metadata: Metadata = {
  title: "NeatRepo - Your Personal Repository Assistant",
  description:
    "Clean up and organize your GitHub repositories before applying for jobs. Reorganize structure, bulk delete, drag & drop, and prep your repos like a pro.",
  generator: 'v0.dev',
  icons: {
    icon: "/icon.png",
  },
}

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en" suppressHydrationWarning>
      <body className={`${jetbrainsMono.variable} font-mono`}>
        <ThemeProvider attribute="class" defaultTheme="dark" enableSystem disableTransitionOnChange>
          <NavigationErrorBoundary>
            <AuthProvider>
              {children}
            </AuthProvider>
          </NavigationErrorBoundary>
        </ThemeProvider>
      </body>
    </html>
  )
}

</code>

app\loading.tsx:
<code>
export default function Loading() {
  return null
}

</code>

app\page.tsx:
<code>
"use client"

import { useState, useEffect, useCallback, Suspense } from "react"
import { useSearchParams } from "next/navigation"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Alert, AlertDescription } from "@/components/ui/alert"
import { ThemeToggle } from "@/components/theme-toggle"
import GitHubAuth from "@/components/github-auth"
import { useAuth } from "@/components/auth-provider"
import GitHubConnectPopup from "@/components/github-connect-popup"
import { supabase } from "@/lib/supabase"
import { 
  Github,
  Star, 
  TrendingUp, 
  Zap, 
  Shield, 
  FileText, 
  GitBranch, 
  CheckCircle, 
  ArrowRight, 
  AlertCircle, 
  X, 
  RefreshCw, 
  LogOut 
} from "lucide-react"
import Image from "next/image"
import { useTheme } from "next-themes"

// Theme-aware logo component
function ThemeAwareLogo() {
  const { theme, resolvedTheme } = useTheme()
  const currentTheme = resolvedTheme || theme
  
  return (
    <Image 
      src={currentTheme === 'dark' ? '/logo-dark.png' : '/logo-light.png'} 
      alt="NeatRepo Logo" 
      width={32} 
      height={32} 
      className="h-8 w-8" 
    />
  )
}

// Separate component for search params logic to avoid hydration issues
function SearchParamsHandler({ onError }: { onError: (error: string) => void }) {
  const searchParams = useSearchParams()

  useEffect(() => {
    const oauthError = searchParams.get("oauth_error")
    if (oauthError) {
      onError(`OAuth Error: ${decodeURIComponent(oauthError)}`)
      console.error("OAuth Error from URL:", oauthError)
    }
  }, [searchParams, onError])

  return null
}

// Separate component to handle auth state
function AuthGuard({ children }: { children: React.ReactNode }) {
  const { user, loading, profile } = useAuth()
  const [showGitHubPopup, setShowGitHubPopup] = useState(false)

  // DISABLED: Auto-redirect interferes with button navigation
  // Let users manually click "Continue to Dashboard" button instead
  // Handle GitHub connection requirement and dashboard redirect
  // useEffect(() => {
  //   if (user && !loading) {
  //     // If profile is loaded, check GitHub connection
  //     if (profile) {
  //       const hasGitHubConnection = profile.github_username || user.app_metadata?.provider === 'github'

  //       if (hasGitHubConnection) {
  //         // User has GitHub connection, redirect to dashboard
  //         setIsRedirecting(true)
  //         const timer = setTimeout(() => {
  //           window.location.href = '/dashboard'
  //         }, 100)
  //         return () => clearTimeout(timer)
  //       } else {
  //         // User doesn't have GitHub connection, show popup instead of auto-redirect
  //         console.log('⚠️ AUTH: User not connected to GitHub, showing connect popup...')
  //         setShowGitHubPopup(true)
  //       }
  //     }
  //     // If profile is not loaded yet, wait for it
  //   }
  // }, [user, loading, profile])

  const handleSkipGitHub = () => {
    setShowGitHubPopup(false)
    // User must manually navigate to dashboard
    console.log('🔄 USER: Skipped GitHub connection - manual navigation required')
  }

  // Show loading state while auth is loading
  if (loading) {
    return (
      <div className="min-h-screen bg-background flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4"></div>
          <p className="text-muted-foreground">Loading...</p>
        </div>
      </div>
    )
  }

  // Show GitHub connect popup if needed
  if (showGitHubPopup) {
    return (
      <>
        <GitHubConnectPopup 
          onClose={() => setShowGitHubPopup(false)}
          onSkip={handleSkipGitHub}
          userEmail={user?.email}
        />
        {children}
      </>
    )
  }

  // Only render children if user is not authenticated and not loading
  return <>{children}</>
}

function HomePageContent({ handleError }: { handleError: (error: string) => void }) {
  const { user, loading, signOut } = useAuth()
  const [showGitHubAuth, setShowGitHubAuth] = useState(false)
  const [debugInfo, setDebugInfo] = useState<any>(null)
  const [isLoading, setIsLoading] = useState(false)

  // Debug authentication state
  useEffect(() => {
    console.log('🔍 Homepage auth state:', { user: !!user, loading, userId: user?.id })
  }, [user, loading])

  // Handle auth success redirect
  useEffect(() => {
    const urlParams = new URLSearchParams(window.location.search)
    const authSuccess = urlParams.get('auth')

    if (authSuccess === 'success' && user && !loading) {
      console.log('🎯 Auth success detected, redirecting to dashboard...')
      // Clear the auth parameter from URL
      window.history.replaceState({}, '', window.location.pathname)
      // Redirect to dashboard
      setTimeout(() => {
        window.location.href = '/dashboard'
      }, 1000) // Give time for session to fully establish
    }
  }, [user, loading])

  // Handle logout with proper cleanup (local only, no GitHub redirect)
  const handleLogout = async () => {
    try {
      setIsLoading(true)

      // Clear all localStorage data
      if (typeof window !== 'undefined') {
        localStorage.clear()
        sessionStorage.clear()
      }

      // Sign out from Supabase with global scope to revoke OAuth tokens
      await supabase.auth.signOut({ scope: 'global' })

      // Force page reload to ensure clean state
      window.location.reload()
    } catch (error) {
      console.error('Logout error:', error)
      handleError('Failed to log out. Please try again.')
    } finally {
      setIsLoading(false)
    }
  }

  const initializeDebugInfo = useCallback(() => {
    if (typeof window !== "undefined") {
      return {
        currentUrl: window.location.href,
        origin: window.location.origin,
        clientId: process.env.NEXT_PUBLIC_GITHUB_CLIENT_ID,
        userAgent: navigator.userAgent,
        timestamp: new Date().toISOString(),
      }
    }
    return null
  }, [])

  useEffect(() => {
    if (!debugInfo) {
      setDebugInfo(initializeDebugInfo())
    }
  }, [debugInfo, initializeDebugInfo])

  return (
    <div className="min-h-screen bg-background text-foreground">

      {/* GitHub Auth Modal */}
      {showGitHubAuth && (
        <GitHubAuth onClose={() => setShowGitHubAuth(false)} />
      )}

      {/* Navigation */}
      <nav className="container mx-auto px-4 py-6">
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-2">
            <ThemeAwareLogo />
            <span className="text-xl font-bold">NeatRepo</span>
            <Badge variant="secondary" className="bg-secondary text-secondary-foreground">
              Production Ready
            </Badge>
          </div>
          <div className="flex items-center space-x-4">
            <a href="#features" className="text-muted-foreground hover:text-foreground transition-colors">
              Features
            </a>
            <a href="#demo" className="text-muted-foreground hover:text-foreground transition-colors">
              Demo
            </a>
            <ThemeToggle />
            <div className="flex items-center space-x-2">
              {loading ? (
                // Show loading state
                <Button disabled className="bg-primary/50 text-primary-foreground">
                  <RefreshCw className="h-4 w-4 mr-2 animate-spin" />
                  Loading...
                </Button>
              ) : user ? (
                // Show dashboard and logout buttons when user is authenticated
                <>
                  <Button
                    onClick={() => {
                      console.log('🎯 BUTTON: Continue to Dashboard clicked');
                      // Force immediate navigation
                      window.location.href = '/dashboard';
                    }}
                    className="bg-primary hover:bg-primary/90 text-primary-foreground"
                  >
                    <ArrowRight className="h-4 w-4 mr-2" />
                    Continue to Dashboard
                  </Button>
                  <Button
                    onClick={handleLogout}
                    disabled={isLoading}
                    variant="outline"
                    className="border-destructive text-destructive hover:bg-destructive hover:text-destructive-foreground"
                  >
                    {isLoading ? (
                      <RefreshCw className="h-4 w-4 mr-2 animate-spin" />
                    ) : (
                      <LogOut className="h-4 w-4 mr-2" />
                    )}
                    {isLoading ? 'Signing out...' : 'Sign Out'}
                  </Button>
                </>
              ) : (
                // Show GitHub auth button when user is not authenticated
                <Button
                  onClick={() => setShowGitHubAuth(true)}
                  className="bg-primary hover:bg-primary/90 text-primary-foreground"
                >
                  <Github className="h-4 w-4 mr-2" />
                  Continue with GitHub
                </Button>
              )}
            </div>
          </div>
        </div>
      </nav>

      {/* Hero Section */}
      <section className="container mx-auto px-4 py-20 text-center">
        <div className="max-w-4xl mx-auto">
          <div className="mb-8">
            <Github className="h-16 w-16 mx-auto mb-6" />
          </div>

          <h1 className="text-5xl md:text-7xl font-bold mb-6">Professional GitHub Repository Management</h1>

          <p className="text-xl md:text-2xl text-muted-foreground mb-4">
            Organize, create, rename, and delete repositories with lightning-fast bulk operations
          </p>

          <p className="text-lg text-muted-foreground mb-12">We're here to help.</p>

          <div className="flex flex-col sm:flex-row gap-4 justify-center mb-12">
            <Button
              size="lg"
              onClick={loading ? undefined : (user ? () => {
                console.log('🎯 BUTTON: Go to Dashboard clicked');
                window.location.href = '/dashboard';
              } : () => setShowGitHubAuth(true))}
              disabled={loading}
              className="bg-primary hover:bg-primary/90 text-primary-foreground px-8 py-4 text-lg font-semibold"
            >
              {loading ? (
                <>
                  <RefreshCw className="h-5 w-5 mr-2 animate-spin" />
                  Loading...
                </>
              ) : user ? (
                <>
                  <ArrowRight className="h-5 w-5 mr-2" />
                  Go to Dashboard
                </>
              ) : (
                <>
                  <Github className="h-5 w-5 mr-2" />
                  Get Started
                </>
              )}
            </Button>
            <Button size="lg" variant="outline" className="px-8 py-4 text-lg bg-transparent">
              Watch Demo
              <ArrowRight className="h-5 w-5 ml-2" />
            </Button>
          </div>



          {/* Social Proof */}
          <div className="grid grid-cols-1 md:grid-cols-3 gap-8 max-w-2xl mx-auto">
            <div className="text-center">
              <div className="text-2xl font-bold">1,247</div>
              <div className="text-muted-foreground">developers hired</div>
            </div>
            <div className="text-center">
              <div className="text-2xl font-bold">5,000+</div>
              <div className="text-muted-foreground">repos cleaned</div>
            </div>
            <div className="text-center">
              <div className="text-2xl font-bold">94%</div>
              <div className="text-muted-foreground">job success rate</div>
            </div>
          </div>
        </div>
      </section>

      {/* Features Section */}
      <section id="features" className="container mx-auto px-4 py-20 bg-accent/20">
        <div className="text-center mb-16">
          <h2 className="text-4xl font-bold mb-4">Features GitHub doesn't offer</h2>
          <p className="text-xl text-muted-foreground max-w-2xl mx-auto">
            Professional repository management tools for developers who care about organization
          </p>
        </div>

        <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-8">
          <Card>
            <CardHeader>
              <Zap className="h-8 w-8 mb-2" />
              <CardTitle>Lightning-Fast Bulk Operations</CardTitle>
              <CardDescription>
                Delete multiple repositories at once - a feature GitHub doesn't offer natively
              </CardDescription>
            </CardHeader>
          </Card>

          <Card>
            <CardHeader>
              <FileText className="h-8 w-8 mb-2" />
              <CardTitle>Smart README Generation</CardTitle>
              <CardDescription>
                Automatically generate professional README files that showcase your projects effectively
              </CardDescription>
            </CardHeader>
          </Card>

          <Card>
            <CardHeader>
              <GitBranch className="h-8 w-8 mb-2" />
              <CardTitle>Visual Repository Organization</CardTitle>
              <CardDescription>
                Drag & drop reordering and professional presentation - GitHub only has alphabetical sorting
              </CardDescription>
            </CardHeader>
          </Card>

          <Card>
            <CardHeader>
              <Shield className="h-8 w-8 mb-2" />
              <CardTitle>Security Scanning</CardTitle>
              <CardDescription>Identify and fix security vulnerabilities before they become a problem</CardDescription>
            </CardHeader>
          </Card>

          <Card>
            <CardHeader>
              <TrendingUp className="h-8 w-8 mb-2" />
              <CardTitle>Portfolio Scoring</CardTitle>
              <CardDescription>
                Get a comprehensive score for each repository and track your improvement over time
              </CardDescription>
            </CardHeader>
          </Card>

          <Card>
            <CardHeader>
              <CheckCircle className="h-8 w-8 mb-2" />
              <CardTitle>Complete Repository Management</CardTitle>
              <CardDescription>
                Create, rename, and manage repositories without switching to GitHub - all in one place
              </CardDescription>
            </CardHeader>
          </Card>
        </div>
      </section>

      {/* Testimonials */}
      <section className="container mx-auto px-4 py-20">
        <div className="text-center mb-16">
          <h2 className="text-4xl font-bold mb-4">Loved by developers worldwide</h2>
          <p className="text-xl text-muted-foreground">See what our users have to say</p>
        </div>

        <div className="grid md:grid-cols-3 gap-8">
          <Card>
            <CardContent className="p-6">
              <div className="flex items-center mb-4">
                <div className="flex text-yellow-500">
                  {[...Array(5)].map((_, i) => (
                    <Star key={i} className="h-4 w-4 fill-current" />
                  ))}
                </div>
              </div>
              <p className="text-muted-foreground mb-4">
                "NeatRepo helped me organize my GitHub perfectly! The bulk operations saved me hours of work."
              </p>
              <div className="flex items-center">
                <div className="w-10 h-10 bg-primary rounded-full flex items-center justify-center text-primary-foreground font-semibold">
                  S
                </div>
                <div className="ml-3">
                  <div className="font-semibold">Sarah Chen</div>
                  <div className="text-sm text-muted-foreground">Frontend Developer</div>
                </div>
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardContent className="p-6">
              <div className="flex items-center mb-4">
                <div className="flex text-yellow-500">
                  {[...Array(5)].map((_, i) => (
                    <Star key={i} className="h-4 w-4 fill-current" />
                  ))}
                </div>
              </div>
              <p className="text-muted-foreground mb-4">
                "Finally! Bulk delete saved me hours of cleaning up old repositories. NeatRepo is a game-changer!"
              </p>
              <div className="flex items-center">
                <div className="w-10 h-10 bg-primary rounded-full flex items-center justify-center text-primary-foreground font-semibold">
                  M
                </div>
                <div className="ml-3">
                  <div className="font-semibold">Marcus Johnson</div>
                  <div className="text-sm text-muted-foreground">Full Stack Developer</div>
                </div>
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardContent className="p-6">
              <div className="flex items-center mb-4">
                <div className="flex text-yellow-500">
                  {[...Array(5)].map((_, i) => (
                    <Star key={i} className="h-4 w-4 fill-current" />
                  ))}
                </div>
              </div>
              <p className="text-muted-foreground mb-4">
                "The drag & drop organization is so intuitive. My GitHub looks professional now!"
              </p>
              <div className="flex items-center">
                <div className="w-10 h-10 bg-primary rounded-full flex items-center justify-center text-primary-foreground font-semibold">
                  A
                </div>
                <div className="ml-3">
                  <div className="font-semibold">Alex Rivera</div>
                  <div className="text-sm text-muted-foreground">Backend Developer</div>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>
      </section>

      {/* Final CTA */}
      <section className="container mx-auto px-4 py-20 bg-accent/20">
        <div className="text-center max-w-3xl mx-auto">
          <h2 className="text-4xl font-bold mb-6">Ready to organize your repositories?</h2>
          <p className="text-xl text-muted-foreground mb-8">
            Join developers who use NeatRepo for professional GitHub repository management
          </p>
          <Button
            size="lg"
            onClick={() => setShowGitHubAuth(true)}
            className="bg-primary hover:bg-primary/90 text-primary-foreground px-12 py-4 text-xl font-semibold"
          >
            <Github className="h-6 w-6 mr-3" />
            Start Free Today
          </Button>
        </div>
      </section>

      {/* Search Params Handler */}
      <Suspense fallback={null}>
        <SearchParamsHandler onError={handleError} />
      </Suspense>

      {/* Footer */}
      <footer className="border-t border-border bg-card">
        <div className="container mx-auto px-4 py-12">
          <div className="grid md:grid-cols-4 gap-8">
            <div>
              <div className="flex items-center space-x-2 mb-4">
                <Github className="h-6 w-6" />
                <span className="text-lg font-bold">NeatRepo</span>
              </div>
              <p className="text-muted-foreground">
                Professional GitHub repository management with lightning-fast bulk operations.
              </p>
            </div>
            <div>
              <h3 className="font-semibold mb-4">Product</h3>
              <ul className="space-y-2 text-muted-foreground">
                <li>
                  <a href="#features" className="hover:text-foreground transition-colors">
                    Features
                  </a>
                </li>
                <li>
                  <a href="#demo" className="hover:text-foreground transition-colors">
                    Demo
                  </a>
                </li>
                <li>
                  <a href="#" className="hover:text-foreground transition-colors">
                    API
                  </a>
                </li>
                <li>
                  <a href="#" className="hover:text-foreground transition-colors">
                    Integrations
                  </a>
                </li>
              </ul>
            </div>
            <div>
              <h3 className="font-semibold mb-4">Company</h3>
              <ul className="space-y-2 text-muted-foreground">
                <li>
                  <a href="#" className="hover:text-foreground transition-colors">
                    About
                  </a>
                </li>
                <li>
                  <a href="#" className="hover:text-foreground transition-colors">
                    Blog
                  </a>
                </li>
                <li>
                  <a href="#" className="hover:text-foreground transition-colors">
                    Careers
                  </a>
                </li>
                <li>
                  <a href="#" className="hover:text-foreground transition-colors">
                    Contact
                  </a>
                </li>
              </ul>
            </div>
            <div>
              <h3 className="font-semibold mb-4">Support</h3>
              <ul className="space-y-2 text-muted-foreground">
                <li>
                  <a href="#" className="hover:text-foreground transition-colors">
                    Help Center
                  </a>
                </li>
                <li>
                  <a href="#" className="hover:text-foreground transition-colors">
                    Documentation
                  </a>
                </li>
                <li>
                  <a href="#" className="hover:text-foreground transition-colors">
                    Status
                  </a>
                </li>
                <li>
                  <a href="#" className="hover:text-foreground transition-colors">
                    Privacy
                  </a>
                </li>
              </ul>
            </div>
          </div>
          <div className="border-t border-border mt-8 pt-8 text-center text-muted-foreground">
            <p>&copy; 2025 NeatRepo. All rights reserved.</p>
          </div>
        </div>
      </footer>
    </div>
  )
}

function HomePageWrapper() {
  const [error, setError] = useState<string | null>(null)

  const handleError = useCallback((errorMessage: string) => {
    setError(errorMessage)
  }, [])

  return (
    <>
      <SearchParamsHandler onError={handleError} />
      {/* Error Alert */}
      {error && (
        <div className="fixed top-4 right-4 z-50 max-w-md">
          <Alert className="bg-destructive/20 border-destructive text-destructive">
            <AlertCircle className="h-4 w-4" />
            <AlertDescription className="pr-8">{error}</AlertDescription>
            <button
              onClick={() => setError(null)}
              className="absolute top-2 right-2 text-destructive hover:text-destructive/80"
            >
              <X className="h-4 w-4" />
            </button>
          </Alert>
        </div>
      )}
      <AuthGuard>
        <HomePageContent handleError={handleError} />
      </AuthGuard>
    </>
  )
}

export default function HomePage() {
  return (
    <Suspense fallback={
      <div className="min-h-screen bg-background flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4"></div>
          <p className="text-muted-foreground">Loading...</p>
        </div>
      </div>
    }>
      <HomePageWrapper />
    </Suspense>
  )
}

</code>

components\auth\auth-context.tsx:
<code>
"use client"

import { createContext, useContext } from "react";
import { User } from "@supabase/supabase-js";

// Define the shape of your user profile data
export interface UserProfile {
  id: string;
  github_pat_token?: string;
  github_username?: string;
  avatar_url?: string;
  [key: string]: any;
}

// Define the shape of the context that components will consume
export interface AuthContextType {
  user: User | null;
  profile: UserProfile | null;
  loading: boolean;
  signOut: () => Promise<void>;
  showTokenPopup: () => void;
  getEffectiveToken: () => Promise<string | null>;
  updateToken: (token: string) => Promise<void>;
  deleteToken: () => Promise<void>;
  isTokenInvalid: boolean;
  markTokenAsInvalid: () => void;
}

// Create the context with an undefined default value
export const AuthContext = createContext<AuthContextType | undefined>(undefined);

// Create the custom hook for consuming the context
export const useAuth = () => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error("useAuth must be used within an AuthProvider");
  }
  return context;
};
</code>

components\ui\accordion.tsx:
<code>
"use client"

import * as React from "react"
import * as AccordionPrimitive from "@radix-ui/react-accordion"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const Accordion = AccordionPrimitive.Root

const AccordionItem = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>
>(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item
    ref={ref}
    className={cn("border-b", className)}
    {...props}
  />
))
AccordionItem.displayName = "AccordionItem"

const AccordionTrigger = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Header className="flex">
    <AccordionPrimitive.Trigger
      ref={ref}
      className={cn(
        "flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180",
        className
      )}
      {...props}
    >
      {children}
      <ChevronDown className="h-4 w-4 shrink-0 transition-transform duration-200" />
    </AccordionPrimitive.Trigger>
  </AccordionPrimitive.Header>
))
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName

const AccordionContent = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className="overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down"
    {...props}
  >
    <div className={cn("pb-4 pt-0", className)}>{children}</div>
  </AccordionPrimitive.Content>
))

AccordionContent.displayName = AccordionPrimitive.Content.displayName

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent }

</code>

components\ui\alert-dialog.tsx:
<code>
"use client"

import * as React from "react"
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

const AlertDialog = AlertDialogPrimitive.Root

const AlertDialogTrigger = AlertDialogPrimitive.Trigger

const AlertDialogPortal = AlertDialogPrimitive.Portal

const AlertDialogOverlay = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName

const AlertDialogContent = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>
>(({ className, ...props }, ref) => (
  <AlertDialogPortal>
    <AlertDialogOverlay />
    <AlertDialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    />
  </AlertDialogPortal>
))
AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName

const AlertDialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
AlertDialogHeader.displayName = "AlertDialogHeader"

const AlertDialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
AlertDialogFooter.displayName = "AlertDialogFooter"

const AlertDialogTitle = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold", className)}
    {...props}
  />
))
AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName

const AlertDialogDescription = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
AlertDialogDescription.displayName =
  AlertDialogPrimitive.Description.displayName

const AlertDialogAction = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Action>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Action
    ref={ref}
    className={cn(buttonVariants(), className)}
    {...props}
  />
))
AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName

const AlertDialogCancel = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Cancel
    ref={ref}
    className={cn(
      buttonVariants({ variant: "outline" }),
      "mt-2 sm:mt-0",
      className
    )}
    {...props}
  />
))
AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}

</code>

components\ui\alert.tsx:
<code>
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const alertVariants = cva(
  "relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground",
  {
    variants: {
      variant: {
        default: "bg-background text-foreground",
        destructive:
          "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Alert = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>
>(({ className, variant, ...props }, ref) => (
  <div
    ref={ref}
    role="alert"
    className={cn(alertVariants({ variant }), className)}
    {...props}
  />
))
Alert.displayName = "Alert"

const AlertTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h5
    ref={ref}
    className={cn("mb-1 font-medium leading-none tracking-tight", className)}
    {...props}
  />
))
AlertTitle.displayName = "AlertTitle"

const AlertDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm [&_p]:leading-relaxed", className)}
    {...props}
  />
))
AlertDescription.displayName = "AlertDescription"

export { Alert, AlertTitle, AlertDescription }

</code>

components\ui\aspect-ratio.tsx:
<code>
"use client"

import * as AspectRatioPrimitive from "@radix-ui/react-aspect-ratio"

const AspectRatio = AspectRatioPrimitive.Root

export { AspectRatio }

</code>

components\ui\avatar.tsx:
<code>
"use client"

import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full",
      className
    )}
    {...props}
  />
))
Avatar.displayName = AvatarPrimitive.Root.displayName

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square h-full w-full", className)}
    {...props}
  />
))
AvatarImage.displayName = AvatarPrimitive.Image.displayName

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "flex h-full w-full items-center justify-center rounded-full bg-muted",
      className
    )}
    {...props}
  />
))
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName

export { Avatar, AvatarImage, AvatarFallback }

</code>

components\ui\badge.tsx:
<code>
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  )
}

export { Badge, badgeVariants }

</code>

components\ui\breadcrumb.tsx:
<code>
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"

const Breadcrumb = React.forwardRef<
  HTMLElement,
  React.ComponentPropsWithoutRef<"nav"> & {
    separator?: React.ReactNode
  }
>(({ ...props }, ref) => <nav ref={ref} aria-label="breadcrumb" {...props} />)
Breadcrumb.displayName = "Breadcrumb"

const BreadcrumbList = React.forwardRef<
  HTMLOListElement,
  React.ComponentPropsWithoutRef<"ol">
>(({ className, ...props }, ref) => (
  <ol
    ref={ref}
    className={cn(
      "flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5",
      className
    )}
    {...props}
  />
))
BreadcrumbList.displayName = "BreadcrumbList"

const BreadcrumbItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentPropsWithoutRef<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    className={cn("inline-flex items-center gap-1.5", className)}
    {...props}
  />
))
BreadcrumbItem.displayName = "BreadcrumbItem"

const BreadcrumbLink = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentPropsWithoutRef<"a"> & {
    asChild?: boolean
  }
>(({ asChild, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      className={cn("transition-colors hover:text-foreground", className)}
      {...props}
    />
  )
})
BreadcrumbLink.displayName = "BreadcrumbLink"

const BreadcrumbPage = React.forwardRef<
  HTMLSpanElement,
  React.ComponentPropsWithoutRef<"span">
>(({ className, ...props }, ref) => (
  <span
    ref={ref}
    role="link"
    aria-disabled="true"
    aria-current="page"
    className={cn("font-normal text-foreground", className)}
    {...props}
  />
))
BreadcrumbPage.displayName = "BreadcrumbPage"

const BreadcrumbSeparator = ({
  children,
  className,
  ...props
}: React.ComponentProps<"li">) => (
  <li
    role="presentation"
    aria-hidden="true"
    className={cn("[&>svg]:w-3.5 [&>svg]:h-3.5", className)}
    {...props}
  >
    {children ?? <ChevronRight />}
  </li>
)
BreadcrumbSeparator.displayName = "BreadcrumbSeparator"

const BreadcrumbEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    role="presentation"
    aria-hidden="true"
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More</span>
  </span>
)
BreadcrumbEllipsis.displayName = "BreadcrumbElipssis"

export {
  Breadcrumb,
  BreadcrumbList,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbPage,
  BreadcrumbSeparator,
  BreadcrumbEllipsis,
}

</code>

components\ui\button.tsx:
<code>
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }

</code>

components\ui\calendar.tsx:
<code>
"use client"

import * as React from "react"
import {
  ChevronDownIcon,
  ChevronLeftIcon,
  ChevronRightIcon,
} from "lucide-react"
import { DayButton, DayPicker, getDefaultClassNames } from "react-day-picker"

import { cn } from "@/lib/utils"
import { Button, buttonVariants } from "@/components/ui/button"

function Calendar({
  className,
  classNames,
  showOutsideDays = true,
  captionLayout = "label",
  buttonVariant = "ghost",
  formatters,
  components,
  ...props
}: React.ComponentProps<typeof DayPicker> & {
  buttonVariant?: React.ComponentProps<typeof Button>["variant"]
}) {
  const defaultClassNames = getDefaultClassNames()

  return (
    <DayPicker
      showOutsideDays={showOutsideDays}
      className={cn(
        "bg-background group/calendar p-3 [--cell-size:2rem] [[data-slot=card-content]_&]:bg-transparent [[data-slot=popover-content]_&]:bg-transparent",
        String.raw`rtl:**:[.rdp-button\_next>svg]:rotate-180`,
        String.raw`rtl:**:[.rdp-button\_previous>svg]:rotate-180`,
        className
      )}
      captionLayout={captionLayout}
      formatters={{
        formatMonthDropdown: (date) =>
          date.toLocaleString("default", { month: "short" }),
        ...formatters,
      }}
      classNames={{
        root: cn("w-fit", defaultClassNames.root),
        months: cn(
          "relative flex flex-col gap-4 md:flex-row",
          defaultClassNames.months
        ),
        month: cn("flex w-full flex-col gap-4", defaultClassNames.month),
        nav: cn(
          "absolute inset-x-0 top-0 flex w-full items-center justify-between gap-1",
          defaultClassNames.nav
        ),
        button_previous: cn(
          buttonVariants({ variant: buttonVariant }),
          "h-[--cell-size] w-[--cell-size] select-none p-0 aria-disabled:opacity-50",
          defaultClassNames.button_previous
        ),
        button_next: cn(
          buttonVariants({ variant: buttonVariant }),
          "h-[--cell-size] w-[--cell-size] select-none p-0 aria-disabled:opacity-50",
          defaultClassNames.button_next
        ),
        month_caption: cn(
          "flex h-[--cell-size] w-full items-center justify-center px-[--cell-size]",
          defaultClassNames.month_caption
        ),
        dropdowns: cn(
          "flex h-[--cell-size] w-full items-center justify-center gap-1.5 text-sm font-medium",
          defaultClassNames.dropdowns
        ),
        dropdown_root: cn(
          "has-focus:border-ring border-input shadow-xs has-focus:ring-ring/50 has-focus:ring-[3px] relative rounded-md border",
          defaultClassNames.dropdown_root
        ),
        dropdown: cn(
          "bg-popover absolute inset-0 opacity-0",
          defaultClassNames.dropdown
        ),
        caption_label: cn(
          "select-none font-medium",
          captionLayout === "label"
            ? "text-sm"
            : "[&>svg]:text-muted-foreground flex h-8 items-center gap-1 rounded-md pl-2 pr-1 text-sm [&>svg]:size-3.5",
          defaultClassNames.caption_label
        ),
        table: "w-full border-collapse",
        weekdays: cn("flex", defaultClassNames.weekdays),
        weekday: cn(
          "text-muted-foreground flex-1 select-none rounded-md text-[0.8rem] font-normal",
          defaultClassNames.weekday
        ),
        week: cn("mt-2 flex w-full", defaultClassNames.week),
        week_number_header: cn(
          "w-[--cell-size] select-none",
          defaultClassNames.week_number_header
        ),
        week_number: cn(
          "text-muted-foreground select-none text-[0.8rem]",
          defaultClassNames.week_number
        ),
        day: cn(
          "group/day relative aspect-square h-full w-full select-none p-0 text-center [&:first-child[data-selected=true]_button]:rounded-l-md [&:last-child[data-selected=true]_button]:rounded-r-md",
          defaultClassNames.day
        ),
        range_start: cn(
          "bg-accent rounded-l-md",
          defaultClassNames.range_start
        ),
        range_middle: cn("rounded-none", defaultClassNames.range_middle),
        range_end: cn("bg-accent rounded-r-md", defaultClassNames.range_end),
        today: cn(
          "bg-accent text-accent-foreground rounded-md data-[selected=true]:rounded-none",
          defaultClassNames.today
        ),
        outside: cn(
          "text-muted-foreground aria-selected:text-muted-foreground",
          defaultClassNames.outside
        ),
        disabled: cn(
          "text-muted-foreground opacity-50",
          defaultClassNames.disabled
        ),
        hidden: cn("invisible", defaultClassNames.hidden),
        ...classNames,
      }}
      components={{
        Root: ({ className, rootRef, ...props }) => {
          return (
            <div
              data-slot="calendar"
              ref={rootRef}
              className={cn(className)}
              {...props}
            />
          )
        },
        Chevron: ({ className, orientation, ...props }) => {
          if (orientation === "left") {
            return (
              <ChevronLeftIcon className={cn("size-4", className)} {...props} />
            )
          }

          if (orientation === "right") {
            return (
              <ChevronRightIcon
                className={cn("size-4", className)}
                {...props}
              />
            )
          }

          return (
            <ChevronDownIcon className={cn("size-4", className)} {...props} />
          )
        },
        DayButton: CalendarDayButton,
        WeekNumber: ({ children, ...props }) => {
          return (
            <td {...props}>
              <div className="flex size-[--cell-size] items-center justify-center text-center">
                {children}
              </div>
            </td>
          )
        },
        ...components,
      }}
      {...props}
    />
  )
}

function CalendarDayButton({
  className,
  day,
  modifiers,
  ...props
}: React.ComponentProps<typeof DayButton>) {
  const defaultClassNames = getDefaultClassNames()

  const ref = React.useRef<HTMLButtonElement>(null)
  React.useEffect(() => {
    if (modifiers.focused) ref.current?.focus()
  }, [modifiers.focused])

  return (
    <Button
      ref={ref}
      variant="ghost"
      size="icon"
      data-day={day.date.toLocaleDateString()}
      data-selected-single={
        modifiers.selected &&
        !modifiers.range_start &&
        !modifiers.range_end &&
        !modifiers.range_middle
      }
      data-range-start={modifiers.range_start}
      data-range-end={modifiers.range_end}
      data-range-middle={modifiers.range_middle}
      className={cn(
        "data-[selected-single=true]:bg-primary data-[selected-single=true]:text-primary-foreground data-[range-middle=true]:bg-accent data-[range-middle=true]:text-accent-foreground data-[range-start=true]:bg-primary data-[range-start=true]:text-primary-foreground data-[range-end=true]:bg-primary data-[range-end=true]:text-primary-foreground group-data-[focused=true]/day:border-ring group-data-[focused=true]/day:ring-ring/50 flex aspect-square h-auto w-full min-w-[--cell-size] flex-col gap-1 font-normal leading-none data-[range-end=true]:rounded-md data-[range-middle=true]:rounded-none data-[range-start=true]:rounded-md group-data-[focused=true]/day:relative group-data-[focused=true]/day:z-10 group-data-[focused=true]/day:ring-[3px] [&>span]:text-xs [&>span]:opacity-70",
        defaultClassNames.day,
        className
      )}
      {...props}
    />
  )
}

export { Calendar, CalendarDayButton }

</code>

components\ui\card.tsx:
<code>
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border bg-card text-card-foreground shadow-sm",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }

</code>

components\ui\carousel.tsx:
<code>
"use client"

import * as React from "react"
import useEmblaCarousel, {
  type UseEmblaCarouselType,
} from "embla-carousel-react"
import { ArrowLeft, ArrowRight } from "lucide-react"

import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"

type CarouselApi = UseEmblaCarouselType[1]
type UseCarouselParameters = Parameters<typeof useEmblaCarousel>
type CarouselOptions = UseCarouselParameters[0]
type CarouselPlugin = UseCarouselParameters[1]

type CarouselProps = {
  opts?: CarouselOptions
  plugins?: CarouselPlugin
  orientation?: "horizontal" | "vertical"
  setApi?: (api: CarouselApi) => void
}

type CarouselContextProps = {
  carouselRef: ReturnType<typeof useEmblaCarousel>[0]
  api: ReturnType<typeof useEmblaCarousel>[1]
  scrollPrev: () => void
  scrollNext: () => void
  canScrollPrev: boolean
  canScrollNext: boolean
} & CarouselProps

const CarouselContext = React.createContext<CarouselContextProps | null>(null)

function useCarousel() {
  const context = React.useContext(CarouselContext)

  if (!context) {
    throw new Error("useCarousel must be used within a <Carousel />")
  }

  return context
}

const Carousel = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & CarouselProps
>(
  (
    {
      orientation = "horizontal",
      opts,
      setApi,
      plugins,
      className,
      children,
      ...props
    },
    ref
  ) => {
    const [carouselRef, api] = useEmblaCarousel(
      {
        ...opts,
        axis: orientation === "horizontal" ? "x" : "y",
      },
      plugins
    )
    const [canScrollPrev, setCanScrollPrev] = React.useState(false)
    const [canScrollNext, setCanScrollNext] = React.useState(false)

    const onSelect = React.useCallback((api: CarouselApi) => {
      if (!api) {
        return
      }

      setCanScrollPrev(api.canScrollPrev())
      setCanScrollNext(api.canScrollNext())
    }, [])

    const scrollPrev = React.useCallback(() => {
      api?.scrollPrev()
    }, [api])

    const scrollNext = React.useCallback(() => {
      api?.scrollNext()
    }, [api])

    const handleKeyDown = React.useCallback(
      (event: React.KeyboardEvent<HTMLDivElement>) => {
        if (event.key === "ArrowLeft") {
          event.preventDefault()
          scrollPrev()
        } else if (event.key === "ArrowRight") {
          event.preventDefault()
          scrollNext()
        }
      },
      [scrollPrev, scrollNext]
    )

    React.useEffect(() => {
      if (!api || !setApi) {
        return
      }

      setApi(api)
    }, [api, setApi])

    React.useEffect(() => {
      if (!api) {
        return
      }

      onSelect(api)
      api.on("reInit", onSelect)
      api.on("select", onSelect)

      return () => {
        api?.off("select", onSelect)
      }
    }, [api, onSelect])

    return (
      <CarouselContext.Provider
        value={{
          carouselRef,
          api: api,
          opts,
          orientation:
            orientation || (opts?.axis === "y" ? "vertical" : "horizontal"),
          scrollPrev,
          scrollNext,
          canScrollPrev,
          canScrollNext,
        }}
      >
        <div
          ref={ref}
          onKeyDownCapture={handleKeyDown}
          className={cn("relative", className)}
          role="region"
          aria-roledescription="carousel"
          {...props}
        >
          {children}
        </div>
      </CarouselContext.Provider>
    )
  }
)
Carousel.displayName = "Carousel"

const CarouselContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { carouselRef, orientation } = useCarousel()

  return (
    <div ref={carouselRef} className="overflow-hidden">
      <div
        ref={ref}
        className={cn(
          "flex",
          orientation === "horizontal" ? "-ml-4" : "-mt-4 flex-col",
          className
        )}
        {...props}
      />
    </div>
  )
})
CarouselContent.displayName = "CarouselContent"

const CarouselItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { orientation } = useCarousel()

  return (
    <div
      ref={ref}
      role="group"
      aria-roledescription="slide"
      className={cn(
        "min-w-0 shrink-0 grow-0 basis-full",
        orientation === "horizontal" ? "pl-4" : "pt-4",
        className
      )}
      {...props}
    />
  )
})
CarouselItem.displayName = "CarouselItem"

const CarouselPrevious = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollPrev, canScrollPrev } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute  h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-left-12 top-1/2 -translate-y-1/2"
          : "-top-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollPrev}
      onClick={scrollPrev}
      {...props}
    >
      <ArrowLeft className="h-4 w-4" />
      <span className="sr-only">Previous slide</span>
    </Button>
  )
})
CarouselPrevious.displayName = "CarouselPrevious"

const CarouselNext = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollNext, canScrollNext } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-right-12 top-1/2 -translate-y-1/2"
          : "-bottom-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollNext}
      onClick={scrollNext}
      {...props}
    >
      <ArrowRight className="h-4 w-4" />
      <span className="sr-only">Next slide</span>
    </Button>
  )
})
CarouselNext.displayName = "CarouselNext"

export {
  type CarouselApi,
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselPrevious,
  CarouselNext,
}

</code>

components\ui\chart.tsx:
<code>
"use client"

import * as React from "react"
import * as RechartsPrimitive from "recharts"

import { cn } from "@/lib/utils"

// Format: { THEME_NAME: CSS_SELECTOR }
const THEMES = { light: "", dark: ".dark" } as const

export type ChartConfig = {
  [k in string]: {
    label?: React.ReactNode
    icon?: React.ComponentType
  } & (
    | { color?: string; theme?: never }
    | { color?: never; theme: Record<keyof typeof THEMES, string> }
  )
}

type ChartContextProps = {
  config: ChartConfig
}

const ChartContext = React.createContext<ChartContextProps | null>(null)

function useChart() {
  const context = React.useContext(ChartContext)

  if (!context) {
    throw new Error("useChart must be used within a <ChartContainer />")
  }

  return context
}

const ChartContainer = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    config: ChartConfig
    children: React.ComponentProps<
      typeof RechartsPrimitive.ResponsiveContainer
    >["children"]
  }
>(({ id, className, children, config, ...props }, ref) => {
  const uniqueId = React.useId()
  const chartId = `chart-${id || uniqueId.replace(/:/g, "")}`

  return (
    <ChartContext.Provider value={{ config }}>
      <div
        data-chart={chartId}
        ref={ref}
        className={cn(
          "flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none",
          className
        )}
        {...props}
      >
        <ChartStyle id={chartId} config={config} />
        <RechartsPrimitive.ResponsiveContainer>
          {children}
        </RechartsPrimitive.ResponsiveContainer>
      </div>
    </ChartContext.Provider>
  )
})
ChartContainer.displayName = "Chart"

const ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {
  const colorConfig = Object.entries(config).filter(
    ([, config]) => config.theme || config.color
  )

  if (!colorConfig.length) {
    return null
  }

  return (
    <style
      dangerouslySetInnerHTML={{
        __html: Object.entries(THEMES)
          .map(
            ([theme, prefix]) => `
${prefix} [data-chart=${id}] {
${colorConfig
  .map(([key, itemConfig]) => {
    const color =
      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||
      itemConfig.color
    return color ? `  --color-${key}: ${color};` : null
  })
  .join("\n")}
}
`
          )
          .join("\n"),
      }}
    />
  )
}

const ChartTooltip = RechartsPrimitive.Tooltip

const ChartTooltipContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &
    React.ComponentProps<"div"> & {
      hideLabel?: boolean
      hideIndicator?: boolean
      indicator?: "line" | "dot" | "dashed"
      nameKey?: string
      labelKey?: string
    }
>(
  (
    {
      active,
      payload,
      className,
      indicator = "dot",
      hideLabel = false,
      hideIndicator = false,
      label,
      labelFormatter,
      labelClassName,
      formatter,
      color,
      nameKey,
      labelKey,
    },
    ref
  ) => {
    const { config } = useChart()

    const tooltipLabel = React.useMemo(() => {
      if (hideLabel || !payload?.length) {
        return null
      }

      const [item] = payload
      const key = `${labelKey || item?.dataKey || item?.name || "value"}`
      const itemConfig = getPayloadConfigFromPayload(config, item, key)
      const value =
        !labelKey && typeof label === "string"
          ? config[label as keyof typeof config]?.label || label
          : itemConfig?.label

      if (labelFormatter) {
        return (
          <div className={cn("font-medium", labelClassName)}>
            {labelFormatter(value, payload)}
          </div>
        )
      }

      if (!value) {
        return null
      }

      return <div className={cn("font-medium", labelClassName)}>{value}</div>
    }, [
      label,
      labelFormatter,
      payload,
      hideLabel,
      labelClassName,
      config,
      labelKey,
    ])

    if (!active || !payload?.length) {
      return null
    }

    const nestLabel = payload.length === 1 && indicator !== "dot"

    return (
      <div
        ref={ref}
        className={cn(
          "grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl",
          className
        )}
      >
        {!nestLabel ? tooltipLabel : null}
        <div className="grid gap-1.5">
          {payload.map((item, index) => {
            const key = `${nameKey || item.name || item.dataKey || "value"}`
            const itemConfig = getPayloadConfigFromPayload(config, item, key)
            const indicatorColor = color || item.payload.fill || item.color

            return (
              <div
                key={item.dataKey}
                className={cn(
                  "flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground",
                  indicator === "dot" && "items-center"
                )}
              >
                {formatter && item?.value !== undefined && item.name ? (
                  formatter(item.value, item.name, item, index, item.payload)
                ) : (
                  <>
                    {itemConfig?.icon ? (
                      <itemConfig.icon />
                    ) : (
                      !hideIndicator && (
                        <div
                          className={cn(
                            "shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]",
                            {
                              "h-2.5 w-2.5": indicator === "dot",
                              "w-1": indicator === "line",
                              "w-0 border-[1.5px] border-dashed bg-transparent":
                                indicator === "dashed",
                              "my-0.5": nestLabel && indicator === "dashed",
                            }
                          )}
                          style={
                            {
                              "--color-bg": indicatorColor,
                              "--color-border": indicatorColor,
                            } as React.CSSProperties
                          }
                        />
                      )
                    )}
                    <div
                      className={cn(
                        "flex flex-1 justify-between leading-none",
                        nestLabel ? "items-end" : "items-center"
                      )}
                    >
                      <div className="grid gap-1.5">
                        {nestLabel ? tooltipLabel : null}
                        <span className="text-muted-foreground">
                          {itemConfig?.label || item.name}
                        </span>
                      </div>
                      {item.value && (
                        <span className="font-mono font-medium tabular-nums text-foreground">
                          {item.value.toLocaleString()}
                        </span>
                      )}
                    </div>
                  </>
                )}
              </div>
            )
          })}
        </div>
      </div>
    )
  }
)
ChartTooltipContent.displayName = "ChartTooltip"

const ChartLegend = RechartsPrimitive.Legend

const ChartLegendContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> &
    Pick<RechartsPrimitive.LegendProps, "payload" | "verticalAlign"> & {
      hideIcon?: boolean
      nameKey?: string
    }
>(
  (
    { className, hideIcon = false, payload, verticalAlign = "bottom", nameKey },
    ref
  ) => {
    const { config } = useChart()

    if (!payload?.length) {
      return null
    }

    return (
      <div
        ref={ref}
        className={cn(
          "flex items-center justify-center gap-4",
          verticalAlign === "top" ? "pb-3" : "pt-3",
          className
        )}
      >
        {payload.map((item) => {
          const key = `${nameKey || item.dataKey || "value"}`
          const itemConfig = getPayloadConfigFromPayload(config, item, key)

          return (
            <div
              key={item.value}
              className={cn(
                "flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground"
              )}
            >
              {itemConfig?.icon && !hideIcon ? (
                <itemConfig.icon />
              ) : (
                <div
                  className="h-2 w-2 shrink-0 rounded-[2px]"
                  style={{
                    backgroundColor: item.color,
                  }}
                />
              )}
              {itemConfig?.label}
            </div>
          )
        })}
      </div>
    )
  }
)
ChartLegendContent.displayName = "ChartLegend"

// Helper to extract item config from a payload.
function getPayloadConfigFromPayload(
  config: ChartConfig,
  payload: unknown,
  key: string
) {
  if (typeof payload !== "object" || payload === null) {
    return undefined
  }

  const payloadPayload =
    "payload" in payload &&
    typeof payload.payload === "object" &&
    payload.payload !== null
      ? payload.payload
      : undefined

  let configLabelKey: string = key

  if (
    key in payload &&
    typeof payload[key as keyof typeof payload] === "string"
  ) {
    configLabelKey = payload[key as keyof typeof payload] as string
  } else if (
    payloadPayload &&
    key in payloadPayload &&
    typeof payloadPayload[key as keyof typeof payloadPayload] === "string"
  ) {
    configLabelKey = payloadPayload[
      key as keyof typeof payloadPayload
    ] as string
  }

  return configLabelKey in config
    ? config[configLabelKey]
    : config[key as keyof typeof config]
}

export {
  ChartContainer,
  ChartTooltip,
  ChartTooltipContent,
  ChartLegend,
  ChartLegendContent,
  ChartStyle,
}

</code>

components\ui\checkbox.tsx:
<code>
"use client"

import * as React from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { Check } from "lucide-react"

import { cn } from "@/lib/utils"

const Checkbox = React.forwardRef<
  React.ElementRef<typeof CheckboxPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>
>(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      "peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",
      className
    )}
    {...props}
  >
    <CheckboxPrimitive.Indicator
      className={cn("flex items-center justify-center text-current")}
    >
      <Check className="h-4 w-4" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
))
Checkbox.displayName = CheckboxPrimitive.Root.displayName

export { Checkbox }

</code>

components\ui\collapsible.tsx:
<code>
"use client"

import * as CollapsiblePrimitive from "@radix-ui/react-collapsible"

const Collapsible = CollapsiblePrimitive.Root

const CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger

const CollapsibleContent = CollapsiblePrimitive.CollapsibleContent

export { Collapsible, CollapsibleTrigger, CollapsibleContent }

</code>

components\ui\command.tsx:
<code>
"use client"

import * as React from "react"
import { type DialogProps } from "@radix-ui/react-dialog"
import { Command as CommandPrimitive } from "cmdk"
import { Search } from "lucide-react"

import { cn } from "@/lib/utils"
import { Dialog, DialogContent } from "@/components/ui/dialog"

const Command = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive>
>(({ className, ...props }, ref) => (
  <CommandPrimitive
    ref={ref}
    className={cn(
      "flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground",
      className
    )}
    {...props}
  />
))
Command.displayName = CommandPrimitive.displayName

const CommandDialog = ({ children, ...props }: DialogProps) => {
  return (
    <Dialog {...props}>
      <DialogContent className="overflow-hidden p-0 shadow-lg">
        <Command className="[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5">
          {children}
        </Command>
      </DialogContent>
    </Dialog>
  )
}

const CommandInput = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Input>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>
>(({ className, ...props }, ref) => (
  <div className="flex items-center border-b px-3" cmdk-input-wrapper="">
    <Search className="mr-2 h-4 w-4 shrink-0 opacity-50" />
    <CommandPrimitive.Input
      ref={ref}
      className={cn(
        "flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    />
  </div>
))

CommandInput.displayName = CommandPrimitive.Input.displayName

const CommandList = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.List
    ref={ref}
    className={cn("max-h-[300px] overflow-y-auto overflow-x-hidden", className)}
    {...props}
  />
))

CommandList.displayName = CommandPrimitive.List.displayName

const CommandEmpty = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Empty>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>
>((props, ref) => (
  <CommandPrimitive.Empty
    ref={ref}
    className="py-6 text-center text-sm"
    {...props}
  />
))

CommandEmpty.displayName = CommandPrimitive.Empty.displayName

const CommandGroup = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Group>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Group
    ref={ref}
    className={cn(
      "overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground",
      className
    )}
    {...props}
  />
))

CommandGroup.displayName = CommandPrimitive.Group.displayName

const CommandSeparator = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 h-px bg-border", className)}
    {...props}
  />
))
CommandSeparator.displayName = CommandPrimitive.Separator.displayName

const CommandItem = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      className
    )}
    {...props}
  />
))

CommandItem.displayName = CommandPrimitive.Item.displayName

const CommandShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
CommandShortcut.displayName = "CommandShortcut"

export {
  Command,
  CommandDialog,
  CommandInput,
  CommandList,
  CommandEmpty,
  CommandGroup,
  CommandItem,
  CommandShortcut,
  CommandSeparator,
}

</code>

components\ui\context-menu.tsx:
<code>
"use client"

import * as React from "react"
import * as ContextMenuPrimitive from "@radix-ui/react-context-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const ContextMenu = ContextMenuPrimitive.Root

const ContextMenuTrigger = ContextMenuPrimitive.Trigger

const ContextMenuGroup = ContextMenuPrimitive.Group

const ContextMenuPortal = ContextMenuPrimitive.Portal

const ContextMenuSub = ContextMenuPrimitive.Sub

const ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup

const ContextMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <ContextMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </ContextMenuPrimitive.SubTrigger>
))
ContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName

const ContextMenuSubContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]",
      className
    )}
    {...props}
  />
))
ContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName

const ContextMenuContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Portal>
    <ContextMenuPrimitive.Content
      ref={ref}
      className={cn(
        "z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]",
        className
      )}
      {...props}
    />
  </ContextMenuPrimitive.Portal>
))
ContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName

const ContextMenuItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
ContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName

const ContextMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <ContextMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.CheckboxItem>
))
ContextMenuCheckboxItem.displayName =
  ContextMenuPrimitive.CheckboxItem.displayName

const ContextMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <ContextMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.RadioItem>
))
ContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName

const ContextMenuLabel = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold text-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
ContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName

const ContextMenuSeparator = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-border", className)}
    {...props}
  />
))
ContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName

const ContextMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
ContextMenuShortcut.displayName = "ContextMenuShortcut"

export {
  ContextMenu,
  ContextMenuTrigger,
  ContextMenuContent,
  ContextMenuItem,
  ContextMenuCheckboxItem,
  ContextMenuRadioItem,
  ContextMenuLabel,
  ContextMenuSeparator,
  ContextMenuShortcut,
  ContextMenuGroup,
  ContextMenuPortal,
  ContextMenuSub,
  ContextMenuSubContent,
  ContextMenuSubTrigger,
  ContextMenuRadioGroup,
}

</code>

components\ui\dialog.tsx:
<code>
"use client"

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}

</code>

components\ui\drawer.tsx:
<code>
"use client"

import * as React from "react"
import { Drawer as DrawerPrimitive } from "vaul"

import { cn } from "@/lib/utils"

const Drawer = ({
  shouldScaleBackground = true,
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (
  <DrawerPrimitive.Root
    shouldScaleBackground={shouldScaleBackground}
    {...props}
  />
)
Drawer.displayName = "Drawer"

const DrawerTrigger = DrawerPrimitive.Trigger

const DrawerPortal = DrawerPrimitive.Portal

const DrawerClose = DrawerPrimitive.Close

const DrawerOverlay = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Overlay
    ref={ref}
    className={cn("fixed inset-0 z-50 bg-black/80", className)}
    {...props}
  />
))
DrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName

const DrawerContent = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DrawerPortal>
    <DrawerOverlay />
    <DrawerPrimitive.Content
      ref={ref}
      className={cn(
        "fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background",
        className
      )}
      {...props}
    >
      <div className="mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted" />
      {children}
    </DrawerPrimitive.Content>
  </DrawerPortal>
))
DrawerContent.displayName = "DrawerContent"

const DrawerHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("grid gap-1.5 p-4 text-center sm:text-left", className)}
    {...props}
  />
)
DrawerHeader.displayName = "DrawerHeader"

const DrawerFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("mt-auto flex flex-col gap-2 p-4", className)}
    {...props}
  />
)
DrawerFooter.displayName = "DrawerFooter"

const DrawerTitle = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DrawerTitle.displayName = DrawerPrimitive.Title.displayName

const DrawerDescription = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DrawerDescription.displayName = DrawerPrimitive.Description.displayName

export {
  Drawer,
  DrawerPortal,
  DrawerOverlay,
  DrawerTrigger,
  DrawerClose,
  DrawerContent,
  DrawerHeader,
  DrawerFooter,
  DrawerTitle,
  DrawerDescription,
}

</code>

components\ui\dropdown-menu.tsx:
<code>
"use client"

import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]",
      className
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]",
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  )
}
DropdownMenuShortcut.displayName = "DropdownMenuShortcut"

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}

</code>

components\ui\form.tsx:
<code>
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { Slot } from "@radix-ui/react-slot"
import {
  Controller,
  FormProvider,
  useFormContext,
  type ControllerProps,
  type FieldPath,
  type FieldValues,
} from "react-hook-form"

import { cn } from "@/lib/utils"
import { Label } from "@/components/ui/label"

const Form = FormProvider

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
> = {
  name: TName
}

const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue
)

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  )
}

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext)
  const itemContext = React.useContext(FormItemContext)
  const { getFieldState, formState } = useFormContext()

  const fieldState = getFieldState(fieldContext.name, formState)

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>")
  }

  const { id } = itemContext

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  }
}

type FormItemContextValue = {
  id: string
}

const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue
)

const FormItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const id = React.useId()

  return (
    <FormItemContext.Provider value={{ id }}>
      <div ref={ref} className={cn("space-y-2", className)} {...props} />
    </FormItemContext.Provider>
  )
})
FormItem.displayName = "FormItem"

const FormLabel = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
>(({ className, ...props }, ref) => {
  const { error, formItemId } = useFormField()

  return (
    <Label
      ref={ref}
      className={cn(error && "text-destructive", className)}
      htmlFor={formItemId}
      {...props}
    />
  )
})
FormLabel.displayName = "FormLabel"

const FormControl = React.forwardRef<
  React.ElementRef<typeof Slot>,
  React.ComponentPropsWithoutRef<typeof Slot>
>(({ ...props }, ref) => {
  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()

  return (
    <Slot
      ref={ref}
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  )
})
FormControl.displayName = "FormControl"

const FormDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => {
  const { formDescriptionId } = useFormField()

  return (
    <p
      ref={ref}
      id={formDescriptionId}
      className={cn("text-sm text-muted-foreground", className)}
      {...props}
    />
  )
})
FormDescription.displayName = "FormDescription"

const FormMessage = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, children, ...props }, ref) => {
  const { error, formMessageId } = useFormField()
  const body = error ? String(error?.message ?? "") : children

  if (!body) {
    return null
  }

  return (
    <p
      ref={ref}
      id={formMessageId}
      className={cn("text-sm font-medium text-destructive", className)}
      {...props}
    >
      {body}
    </p>
  )
})
FormMessage.displayName = "FormMessage"

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
}

</code>

components\ui\hover-card.tsx:
<code>
"use client"

import * as React from "react"
import * as HoverCardPrimitive from "@radix-ui/react-hover-card"

import { cn } from "@/lib/utils"

const HoverCard = HoverCardPrimitive.Root

const HoverCardTrigger = HoverCardPrimitive.Trigger

const HoverCardContent = React.forwardRef<
  React.ElementRef<typeof HoverCardPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <HoverCardPrimitive.Content
    ref={ref}
    align={align}
    sideOffset={sideOffset}
    className={cn(
      "z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]",
      className
    )}
    {...props}
  />
))
HoverCardContent.displayName = HoverCardPrimitive.Content.displayName

export { HoverCard, HoverCardTrigger, HoverCardContent }

</code>

components\ui\input-otp.tsx:
<code>
"use client"

import * as React from "react"
import { OTPInput, OTPInputContext } from "input-otp"
import { Dot } from "lucide-react"

import { cn } from "@/lib/utils"

const InputOTP = React.forwardRef<
  React.ElementRef<typeof OTPInput>,
  React.ComponentPropsWithoutRef<typeof OTPInput>
>(({ className, containerClassName, ...props }, ref) => (
  <OTPInput
    ref={ref}
    containerClassName={cn(
      "flex items-center gap-2 has-[:disabled]:opacity-50",
      containerClassName
    )}
    className={cn("disabled:cursor-not-allowed", className)}
    {...props}
  />
))
InputOTP.displayName = "InputOTP"

const InputOTPGroup = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div">
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("flex items-center", className)} {...props} />
))
InputOTPGroup.displayName = "InputOTPGroup"

const InputOTPSlot = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div"> & { index: number }
>(({ index, className, ...props }, ref) => {
  const inputOTPContext = React.useContext(OTPInputContext)
  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]

  return (
    <div
      ref={ref}
      className={cn(
        "relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md",
        isActive && "z-10 ring-2 ring-ring ring-offset-background",
        className
      )}
      {...props}
    >
      {char}
      {hasFakeCaret && (
        <div className="pointer-events-none absolute inset-0 flex items-center justify-center">
          <div className="h-4 w-px animate-caret-blink bg-foreground duration-1000" />
        </div>
      )}
    </div>
  )
})
InputOTPSlot.displayName = "InputOTPSlot"

const InputOTPSeparator = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div">
>(({ ...props }, ref) => (
  <div ref={ref} role="separator" {...props}>
    <Dot />
  </div>
))
InputOTPSeparator.displayName = "InputOTPSeparator"

export { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }

</code>

components\ui\input.tsx:
<code>
import * as React from "react"

import { cn } from "@/lib/utils"

const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<"input">>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }

</code>

components\ui\label.tsx:
<code>
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }

</code>

components\ui\menubar.tsx:
<code>
"use client"

import * as React from "react"
import * as MenubarPrimitive from "@radix-ui/react-menubar"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

function MenubarMenu({
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {
  return <MenubarPrimitive.Menu {...props} />
}

function MenubarGroup({
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.Group>) {
  return <MenubarPrimitive.Group {...props} />
}

function MenubarPortal({
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {
  return <MenubarPrimitive.Portal {...props} />
}

function MenubarRadioGroup({
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {
  return <MenubarPrimitive.RadioGroup {...props} />
}

function MenubarSub({
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {
  return <MenubarPrimitive.Sub data-slot="menubar-sub" {...props} />
}

const Menubar = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Root
    ref={ref}
    className={cn(
      "flex h-10 items-center space-x-1 rounded-md border bg-background p-1",
      className
    )}
    {...props}
  />
))
Menubar.displayName = MenubarPrimitive.Root.displayName

const MenubarTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      className
    )}
    {...props}
  />
))
MenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName

const MenubarSubTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <MenubarPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </MenubarPrimitive.SubTrigger>
))
MenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName

const MenubarSubContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]",
      className
    )}
    {...props}
  />
))
MenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName

const MenubarContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>
>(
  (
    { className, align = "start", alignOffset = -4, sideOffset = 8, ...props },
    ref
  ) => (
    <MenubarPrimitive.Portal>
      <MenubarPrimitive.Content
        ref={ref}
        align={align}
        alignOffset={alignOffset}
        sideOffset={sideOffset}
        className={cn(
          "z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]",
          className
        )}
        {...props}
      />
    </MenubarPrimitive.Portal>
  )
)
MenubarContent.displayName = MenubarPrimitive.Content.displayName

const MenubarItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarItem.displayName = MenubarPrimitive.Item.displayName

const MenubarCheckboxItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <MenubarPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.CheckboxItem>
))
MenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName

const MenubarRadioItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <MenubarPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.RadioItem>
))
MenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName

const MenubarLabel = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarLabel.displayName = MenubarPrimitive.Label.displayName

const MenubarSeparator = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
MenubarSeparator.displayName = MenubarPrimitive.Separator.displayName

const MenubarShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
MenubarShortcut.displayname = "MenubarShortcut"

export {
  Menubar,
  MenubarMenu,
  MenubarTrigger,
  MenubarContent,
  MenubarItem,
  MenubarSeparator,
  MenubarLabel,
  MenubarCheckboxItem,
  MenubarRadioGroup,
  MenubarRadioItem,
  MenubarPortal,
  MenubarSubContent,
  MenubarSubTrigger,
  MenubarGroup,
  MenubarSub,
  MenubarShortcut,
}

</code>

components\ui\navigation-menu.tsx:
<code>
import * as React from "react"
import * as NavigationMenuPrimitive from "@radix-ui/react-navigation-menu"
import { cva } from "class-variance-authority"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const NavigationMenu = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Root
    ref={ref}
    className={cn(
      "relative z-10 flex max-w-max flex-1 items-center justify-center",
      className
    )}
    {...props}
  >
    {children}
    <NavigationMenuViewport />
  </NavigationMenuPrimitive.Root>
))
NavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName

const NavigationMenuList = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.List
    ref={ref}
    className={cn(
      "group flex flex-1 list-none items-center justify-center space-x-1",
      className
    )}
    {...props}
  />
))
NavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName

const NavigationMenuItem = NavigationMenuPrimitive.Item

const navigationMenuTriggerStyle = cva(
  "group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent"
)

const NavigationMenuTrigger = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Trigger
    ref={ref}
    className={cn(navigationMenuTriggerStyle(), "group", className)}
    {...props}
  >
    {children}{" "}
    <ChevronDown
      className="relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180"
      aria-hidden="true"
    />
  </NavigationMenuPrimitive.Trigger>
))
NavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName

const NavigationMenuContent = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Content
    ref={ref}
    className={cn(
      "left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto ",
      className
    )}
    {...props}
  />
))
NavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName

const NavigationMenuLink = NavigationMenuPrimitive.Link

const NavigationMenuViewport = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>
>(({ className, ...props }, ref) => (
  <div className={cn("absolute left-0 top-full flex justify-center")}>
    <NavigationMenuPrimitive.Viewport
      className={cn(
        "origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]",
        className
      )}
      ref={ref}
      {...props}
    />
  </div>
))
NavigationMenuViewport.displayName =
  NavigationMenuPrimitive.Viewport.displayName

const NavigationMenuIndicator = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Indicator
    ref={ref}
    className={cn(
      "top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in",
      className
    )}
    {...props}
  >
    <div className="relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md" />
  </NavigationMenuPrimitive.Indicator>
))
NavigationMenuIndicator.displayName =
  NavigationMenuPrimitive.Indicator.displayName

export {
  navigationMenuTriggerStyle,
  NavigationMenu,
  NavigationMenuList,
  NavigationMenuItem,
  NavigationMenuContent,
  NavigationMenuTrigger,
  NavigationMenuLink,
  NavigationMenuIndicator,
  NavigationMenuViewport,
}

</code>

components\ui\pagination.tsx:
<code>
import * as React from "react"
import { ChevronLeft, ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"
import { ButtonProps, buttonVariants } from "@/components/ui/button"

const Pagination = ({ className, ...props }: React.ComponentProps<"nav">) => (
  <nav
    role="navigation"
    aria-label="pagination"
    className={cn("mx-auto flex w-full justify-center", className)}
    {...props}
  />
)
Pagination.displayName = "Pagination"

const PaginationContent = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    className={cn("flex flex-row items-center gap-1", className)}
    {...props}
  />
))
PaginationContent.displayName = "PaginationContent"

const PaginationItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li ref={ref} className={cn("", className)} {...props} />
))
PaginationItem.displayName = "PaginationItem"

type PaginationLinkProps = {
  isActive?: boolean
} & Pick<ButtonProps, "size"> &
  React.ComponentProps<"a">

const PaginationLink = ({
  className,
  isActive,
  size = "icon",
  ...props
}: PaginationLinkProps) => (
  <a
    aria-current={isActive ? "page" : undefined}
    className={cn(
      buttonVariants({
        variant: isActive ? "outline" : "ghost",
        size,
      }),
      className
    )}
    {...props}
  />
)
PaginationLink.displayName = "PaginationLink"

const PaginationPrevious = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to previous page"
    size="default"
    className={cn("gap-1 pl-2.5", className)}
    {...props}
  >
    <ChevronLeft className="h-4 w-4" />
    <span>Previous</span>
  </PaginationLink>
)
PaginationPrevious.displayName = "PaginationPrevious"

const PaginationNext = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to next page"
    size="default"
    className={cn("gap-1 pr-2.5", className)}
    {...props}
  >
    <span>Next</span>
    <ChevronRight className="h-4 w-4" />
  </PaginationLink>
)
PaginationNext.displayName = "PaginationNext"

const PaginationEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    aria-hidden
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More pages</span>
  </span>
)
PaginationEllipsis.displayName = "PaginationEllipsis"

export {
  Pagination,
  PaginationContent,
  PaginationEllipsis,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
}

</code>

components\ui\popover.tsx:
<code>
"use client"

import * as React from "react"
import * as PopoverPrimitive from "@radix-ui/react-popover"

import { cn } from "@/lib/utils"

const Popover = PopoverPrimitive.Root

const PopoverTrigger = PopoverPrimitive.Trigger

const PopoverContent = React.forwardRef<
  React.ElementRef<typeof PopoverPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Portal>
    <PopoverPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]",
        className
      )}
      {...props}
    />
  </PopoverPrimitive.Portal>
))
PopoverContent.displayName = PopoverPrimitive.Content.displayName

export { Popover, PopoverTrigger, PopoverContent }

</code>

components\ui\progress.tsx:
<code>
"use client"

import * as React from "react"
import * as ProgressPrimitive from "@radix-ui/react-progress"

import { cn } from "@/lib/utils"

const Progress = React.forwardRef<
  React.ElementRef<typeof ProgressPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>
>(({ className, value, ...props }, ref) => (
  <ProgressPrimitive.Root
    ref={ref}
    className={cn(
      "relative h-4 w-full overflow-hidden rounded-full bg-secondary",
      className
    )}
    {...props}
  >
    <ProgressPrimitive.Indicator
      className="h-full w-full flex-1 bg-primary transition-all"
      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
    />
  </ProgressPrimitive.Root>
))
Progress.displayName = ProgressPrimitive.Root.displayName

export { Progress }

</code>

components\ui\radio-group.tsx:
<code>
"use client"

import * as React from "react"
import * as RadioGroupPrimitive from "@radix-ui/react-radio-group"
import { Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const RadioGroup = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Root
      className={cn("grid gap-2", className)}
      {...props}
      ref={ref}
    />
  )
})
RadioGroup.displayName = RadioGroupPrimitive.Root.displayName

const RadioGroupItem = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Item
      ref={ref}
      className={cn(
        "aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <RadioGroupPrimitive.Indicator className="flex items-center justify-center">
        <Circle className="h-2.5 w-2.5 fill-current text-current" />
      </RadioGroupPrimitive.Indicator>
    </RadioGroupPrimitive.Item>
  )
})
RadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName

export { RadioGroup, RadioGroupItem }

</code>

components\ui\resizable.tsx:
<code>
"use client"

import { GripVertical } from "lucide-react"
import * as ResizablePrimitive from "react-resizable-panels"

import { cn } from "@/lib/utils"

const ResizablePanelGroup = ({
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (
  <ResizablePrimitive.PanelGroup
    className={cn(
      "flex h-full w-full data-[panel-group-direction=vertical]:flex-col",
      className
    )}
    {...props}
  />
)

const ResizablePanel = ResizablePrimitive.Panel

const ResizableHandle = ({
  withHandle,
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {
  withHandle?: boolean
}) => (
  <ResizablePrimitive.PanelResizeHandle
    className={cn(
      "relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90",
      className
    )}
    {...props}
  >
    {withHandle && (
      <div className="z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border">
        <GripVertical className="h-2.5 w-2.5" />
      </div>
    )}
  </ResizablePrimitive.PanelResizeHandle>
)

export { ResizablePanelGroup, ResizablePanel, ResizableHandle }

</code>

components\ui\scroll-area.tsx:
<code>
"use client"

import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "@/lib/utils"

const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn("relative overflow-hidden", className)}
    {...props}
  >
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
))
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName

const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" &&
        "h-full w-2.5 border-l border-l-transparent p-[1px]",
      orientation === "horizontal" &&
        "h-2.5 flex-col border-t border-t-transparent p-[1px]",
      className
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
))
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName

export { ScrollArea, ScrollBar }

</code>

components\ui\select.tsx:
<code>
"use client"

import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { Check, ChevronDown, ChevronUp } from "lucide-react"

import { cn } from "@/lib/utils"

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
))
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("py-1.5 pl-8 pr-2 text-sm font-semibold", className)}
    {...props}
  />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>

    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
}

</code>

components\ui\separator.tsx:
<code>
"use client"

import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils"

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(
  (
    { className, orientation = "horizontal", decorative = true, ...props },
    ref
  ) => (
    <SeparatorPrimitive.Root
      ref={ref}
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "shrink-0 bg-border",
        orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
        className
      )}
      {...props}
    />
  )
)
Separator.displayName = SeparatorPrimitive.Root.displayName

export { Separator }

</code>

components\ui\sheet.tsx:
<code>
"use client"

import * as React from "react"
import * as SheetPrimitive from "@radix-ui/react-dialog"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Sheet = SheetPrimitive.Root

const SheetTrigger = SheetPrimitive.Trigger

const SheetClose = SheetPrimitive.Close

const SheetPortal = SheetPrimitive.Portal

const SheetOverlay = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName

const sheetVariants = cva(
  "fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
  {
    variants: {
      side: {
        top: "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
        bottom:
          "inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
        left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
        right:
          "inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm",
      },
    },
    defaultVariants: {
      side: "right",
    },
  }
)

interface SheetContentProps
  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,
    VariantProps<typeof sheetVariants> {}

const SheetContent = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Content>,
  SheetContentProps
>(({ side = "right", className, children, ...props }, ref) => (
  <SheetPortal>
    <SheetOverlay />
    <SheetPrimitive.Content
      ref={ref}
      className={cn(sheetVariants({ side }), className)}
      {...props}
    >
      {children}
      <SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </SheetPrimitive.Close>
    </SheetPrimitive.Content>
  </SheetPortal>
))
SheetContent.displayName = SheetPrimitive.Content.displayName

const SheetHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
SheetHeader.displayName = "SheetHeader"

const SheetFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
SheetFooter.displayName = "SheetFooter"

const SheetTitle = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold text-foreground", className)}
    {...props}
  />
))
SheetTitle.displayName = SheetPrimitive.Title.displayName

const SheetDescription = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
SheetDescription.displayName = SheetPrimitive.Description.displayName

export {
  Sheet,
  SheetPortal,
  SheetOverlay,
  SheetTrigger,
  SheetClose,
  SheetContent,
  SheetHeader,
  SheetFooter,
  SheetTitle,
  SheetDescription,
}

</code>

components\ui\sidebar.tsx:
<code>
"use client"

import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { VariantProps, cva } from "class-variance-authority"
import { PanelLeft } from "lucide-react"

import { useIsMobile } from "@/hooks/use-mobile"
import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Separator } from "@/components/ui/separator"
import {
  Sheet,
  SheetContent,
  SheetDescription,
  SheetHeader,
  SheetTitle,
} from "@/components/ui/sheet"
import { Skeleton } from "@/components/ui/skeleton"
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip"

const SIDEBAR_COOKIE_NAME = "sidebar_state"
const SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7
const SIDEBAR_WIDTH = "16rem"
const SIDEBAR_WIDTH_MOBILE = "18rem"
const SIDEBAR_WIDTH_ICON = "3rem"
const SIDEBAR_KEYBOARD_SHORTCUT = "b"

type SidebarContextProps = {
  state: "expanded" | "collapsed"
  open: boolean
  setOpen: (open: boolean) => void
  openMobile: boolean
  setOpenMobile: (open: boolean) => void
  isMobile: boolean
  toggleSidebar: () => void
}

const SidebarContext = React.createContext<SidebarContextProps | null>(null)

function useSidebar() {
  const context = React.useContext(SidebarContext)
  if (!context) {
    throw new Error("useSidebar must be used within a SidebarProvider.")
  }

  return context
}

const SidebarProvider = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    defaultOpen?: boolean
    open?: boolean
    onOpenChange?: (open: boolean) => void
  }
>(
  (
    {
      defaultOpen = true,
      open: openProp,
      onOpenChange: setOpenProp,
      className,
      style,
      children,
      ...props
    },
    ref
  ) => {
    const isMobile = useIsMobile()
    const [openMobile, setOpenMobile] = React.useState(false)

    // This is the internal state of the sidebar.
    // We use openProp and setOpenProp for control from outside the component.
    const [_open, _setOpen] = React.useState(defaultOpen)
    const open = openProp ?? _open
    const setOpen = React.useCallback(
      (value: boolean | ((value: boolean) => boolean)) => {
        const openState = typeof value === "function" ? value(open) : value
        if (setOpenProp) {
          setOpenProp(openState)
        } else {
          _setOpen(openState)
        }

        // This sets the cookie to keep the sidebar state.
        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`
      },
      [setOpenProp, open]
    )

    // Helper to toggle the sidebar.
    const toggleSidebar = React.useCallback(() => {
      return isMobile
        ? setOpenMobile((open) => !open)
        : setOpen((open) => !open)
    }, [isMobile, setOpen, setOpenMobile])

    // Adds a keyboard shortcut to toggle the sidebar.
    React.useEffect(() => {
      const handleKeyDown = (event: KeyboardEvent) => {
        if (
          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&
          (event.metaKey || event.ctrlKey)
        ) {
          event.preventDefault()
          toggleSidebar()
        }
      }

      window.addEventListener("keydown", handleKeyDown)
      return () => window.removeEventListener("keydown", handleKeyDown)
    }, [toggleSidebar])

    // We add a state so that we can do data-state="expanded" or "collapsed".
    // This makes it easier to style the sidebar with Tailwind classes.
    const state = open ? "expanded" : "collapsed"

    const contextValue = React.useMemo<SidebarContextProps>(
      () => ({
        state,
        open,
        setOpen,
        isMobile,
        openMobile,
        setOpenMobile,
        toggleSidebar,
      }),
      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]
    )

    return (
      <SidebarContext.Provider value={contextValue}>
        <TooltipProvider delayDuration={0}>
          <div
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH,
                "--sidebar-width-icon": SIDEBAR_WIDTH_ICON,
                ...style,
              } as React.CSSProperties
            }
            className={cn(
              "group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar",
              className
            )}
            ref={ref}
            {...props}
          >
            {children}
          </div>
        </TooltipProvider>
      </SidebarContext.Provider>
    )
  }
)
SidebarProvider.displayName = "SidebarProvider"

const Sidebar = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    side?: "left" | "right"
    variant?: "sidebar" | "floating" | "inset"
    collapsible?: "offcanvas" | "icon" | "none"
  }
>(
  (
    {
      side = "left",
      variant = "sidebar",
      collapsible = "offcanvas",
      className,
      children,
      ...props
    },
    ref
  ) => {
    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()

    if (collapsible === "none") {
      return (
        <div
          className={cn(
            "flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground",
            className
          )}
          ref={ref}
          {...props}
        >
          {children}
        </div>
      )
    }

    if (isMobile) {
      return (
        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>
          <SheetContent
            data-sidebar="sidebar"
            data-mobile="true"
            className="w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden"
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH_MOBILE,
              } as React.CSSProperties
            }
            side={side}
          >
            <SheetHeader className="sr-only">
              <SheetTitle>Sidebar</SheetTitle>
              <SheetDescription>Displays the mobile sidebar.</SheetDescription>
            </SheetHeader>
            <div className="flex h-full w-full flex-col">{children}</div>
          </SheetContent>
        </Sheet>
      )
    }

    return (
      <div
        ref={ref}
        className="group peer hidden text-sidebar-foreground md:block"
        data-state={state}
        data-collapsible={state === "collapsed" ? collapsible : ""}
        data-variant={variant}
        data-side={side}
      >
        {/* This is what handles the sidebar gap on desktop */}
        <div
          className={cn(
            "relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear",
            "group-data-[collapsible=offcanvas]:w-0",
            "group-data-[side=right]:rotate-180",
            variant === "floating" || variant === "inset"
              ? "group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon]"
          )}
        />
        <div
          className={cn(
            "fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex",
            side === "left"
              ? "left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]"
              : "right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]",
            // Adjust the padding for floating and inset variants.
            variant === "floating" || variant === "inset"
              ? "p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l",
            className
          )}
          {...props}
        >
          <div
            data-sidebar="sidebar"
            className="flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow"
          >
            {children}
          </div>
        </div>
      </div>
    )
  }
)
Sidebar.displayName = "Sidebar"

const SidebarTrigger = React.forwardRef<
  React.ElementRef<typeof Button>,
  React.ComponentProps<typeof Button>
>(({ className, onClick, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <Button
      ref={ref}
      data-sidebar="trigger"
      variant="ghost"
      size="icon"
      className={cn("h-7 w-7", className)}
      onClick={(event) => {
        onClick?.(event)
        toggleSidebar()
      }}
      {...props}
    >
      <PanelLeft />
      <span className="sr-only">Toggle Sidebar</span>
    </Button>
  )
})
SidebarTrigger.displayName = "SidebarTrigger"

const SidebarRail = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button">
>(({ className, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <button
      ref={ref}
      data-sidebar="rail"
      aria-label="Toggle Sidebar"
      tabIndex={-1}
      onClick={toggleSidebar}
      title="Toggle Sidebar"
      className={cn(
        "absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex",
        "[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize",
        "[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize",
        "group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar",
        "[[data-side=left][data-collapsible=offcanvas]_&]:-right-2",
        "[[data-side=right][data-collapsible=offcanvas]_&]:-left-2",
        className
      )}
      {...props}
    />
  )
})
SidebarRail.displayName = "SidebarRail"

const SidebarInset = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"main">
>(({ className, ...props }, ref) => {
  return (
    <main
      ref={ref}
      className={cn(
        "relative flex w-full flex-1 flex-col bg-background",
        "md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow",
        className
      )}
      {...props}
    />
  )
})
SidebarInset.displayName = "SidebarInset"

const SidebarInput = React.forwardRef<
  React.ElementRef<typeof Input>,
  React.ComponentProps<typeof Input>
>(({ className, ...props }, ref) => {
  return (
    <Input
      ref={ref}
      data-sidebar="input"
      className={cn(
        "h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring",
        className
      )}
      {...props}
    />
  )
})
SidebarInput.displayName = "SidebarInput"

const SidebarHeader = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="header"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarHeader.displayName = "SidebarHeader"

const SidebarFooter = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="footer"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarFooter.displayName = "SidebarFooter"

const SidebarSeparator = React.forwardRef<
  React.ElementRef<typeof Separator>,
  React.ComponentProps<typeof Separator>
>(({ className, ...props }, ref) => {
  return (
    <Separator
      ref={ref}
      data-sidebar="separator"
      className={cn("mx-2 w-auto bg-sidebar-border", className)}
      {...props}
    />
  )
})
SidebarSeparator.displayName = "SidebarSeparator"

const SidebarContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="content"
      className={cn(
        "flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarContent.displayName = "SidebarContent"

const SidebarGroup = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="group"
      className={cn("relative flex w-full min-w-0 flex-col p-2", className)}
      {...props}
    />
  )
})
SidebarGroup.displayName = "SidebarGroup"

const SidebarGroupLabel = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "div"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-label"
      className={cn(
        "flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        "group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupLabel.displayName = "SidebarGroupLabel"

const SidebarGroupAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-action"
      className={cn(
        "absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupAction.displayName = "SidebarGroupAction"

const SidebarGroupContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="group-content"
    className={cn("w-full text-sm", className)}
    {...props}
  />
))
SidebarGroupContent.displayName = "SidebarGroupContent"

const SidebarMenu = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu"
    className={cn("flex w-full min-w-0 flex-col gap-1", className)}
    {...props}
  />
))
SidebarMenu.displayName = "SidebarMenu"

const SidebarMenuItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    data-sidebar="menu-item"
    className={cn("group/menu-item relative", className)}
    {...props}
  />
))
SidebarMenuItem.displayName = "SidebarMenuItem"

const sidebarMenuButtonVariants = cva(
  "peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "hover:bg-sidebar-accent hover:text-sidebar-accent-foreground",
        outline:
          "bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]",
      },
      size: {
        default: "h-8 text-sm",
        sm: "h-7 text-xs",
        lg: "h-12 text-sm group-data-[collapsible=icon]:!p-0",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const SidebarMenuButton = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    isActive?: boolean
    tooltip?: string | React.ComponentProps<typeof TooltipContent>
  } & VariantProps<typeof sidebarMenuButtonVariants>
>(
  (
    {
      asChild = false,
      isActive = false,
      variant = "default",
      size = "default",
      tooltip,
      className,
      ...props
    },
    ref
  ) => {
    const Comp = asChild ? Slot : "button"
    const { isMobile, state } = useSidebar()

    const button = (
      <Comp
        ref={ref}
        data-sidebar="menu-button"
        data-size={size}
        data-active={isActive}
        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}
        {...props}
      />
    )

    if (!tooltip) {
      return button
    }

    if (typeof tooltip === "string") {
      tooltip = {
        children: tooltip,
      }
    }

    return (
      <Tooltip>
        <TooltipTrigger asChild>{button}</TooltipTrigger>
        <TooltipContent
          side="right"
          align="center"
          hidden={state !== "collapsed" || isMobile}
          {...tooltip}
        />
      </Tooltip>
    )
  }
)
SidebarMenuButton.displayName = "SidebarMenuButton"

const SidebarMenuAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    showOnHover?: boolean
  }
>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-action"
      className={cn(
        "absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "peer-data-[size=sm]/menu-button:top-1",
        "peer-data-[size=default]/menu-button:top-1.5",
        "peer-data-[size=lg]/menu-button:top-2.5",
        "group-data-[collapsible=icon]:hidden",
        showOnHover &&
          "group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuAction.displayName = "SidebarMenuAction"

const SidebarMenuBadge = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="menu-badge"
    className={cn(
      "pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground",
      "peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground",
      "peer-data-[size=sm]/menu-button:top-1",
      "peer-data-[size=default]/menu-button:top-1.5",
      "peer-data-[size=lg]/menu-button:top-2.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuBadge.displayName = "SidebarMenuBadge"

const SidebarMenuSkeleton = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    showIcon?: boolean
  }
>(({ className, showIcon = false, ...props }, ref) => {
  // Random width between 50 to 90%.
  const width = React.useMemo(() => {
    return `${Math.floor(Math.random() * 40) + 50}%`
  }, [])

  return (
    <div
      ref={ref}
      data-sidebar="menu-skeleton"
      className={cn("flex h-8 items-center gap-2 rounded-md px-2", className)}
      {...props}
    >
      {showIcon && (
        <Skeleton
          className="size-4 rounded-md"
          data-sidebar="menu-skeleton-icon"
        />
      )}
      <Skeleton
        className="h-4 max-w-[--skeleton-width] flex-1"
        data-sidebar="menu-skeleton-text"
        style={
          {
            "--skeleton-width": width,
          } as React.CSSProperties
        }
      />
    </div>
  )
})
SidebarMenuSkeleton.displayName = "SidebarMenuSkeleton"

const SidebarMenuSub = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu-sub"
    className={cn(
      "mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuSub.displayName = "SidebarMenuSub"

const SidebarMenuSubItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ ...props }, ref) => <li ref={ref} {...props} />)
SidebarMenuSubItem.displayName = "SidebarMenuSubItem"

const SidebarMenuSubButton = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentProps<"a"> & {
    asChild?: boolean
    size?: "sm" | "md"
    isActive?: boolean
  }
>(({ asChild = false, size = "md", isActive, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-sub-button"
      data-size={size}
      data-active={isActive}
      className={cn(
        "flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground",
        "data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground",
        size === "sm" && "text-xs",
        size === "md" && "text-sm",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuSubButton.displayName = "SidebarMenuSubButton"

export {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarGroup,
  SidebarGroupAction,
  SidebarGroupContent,
  SidebarGroupLabel,
  SidebarHeader,
  SidebarInput,
  SidebarInset,
  SidebarMenu,
  SidebarMenuAction,
  SidebarMenuBadge,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarMenuSkeleton,
  SidebarMenuSub,
  SidebarMenuSubButton,
  SidebarMenuSubItem,
  SidebarProvider,
  SidebarRail,
  SidebarSeparator,
  SidebarTrigger,
  useSidebar,
}

</code>

components\ui\skeleton.tsx:
<code>
import { cn } from "@/lib/utils"

function Skeleton({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) {
  return (
    <div
      className={cn("animate-pulse rounded-md bg-muted", className)}
      {...props}
    />
  )
}

export { Skeleton }

</code>

components\ui\slider.tsx:
<code>
"use client"

import * as React from "react"
import * as SliderPrimitive from "@radix-ui/react-slider"

import { cn } from "@/lib/utils"

const Slider = React.forwardRef<
  React.ElementRef<typeof SliderPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>
>(({ className, ...props }, ref) => (
  <SliderPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex w-full touch-none select-none items-center",
      className
    )}
    {...props}
  >
    <SliderPrimitive.Track className="relative h-2 w-full grow overflow-hidden rounded-full bg-secondary">
      <SliderPrimitive.Range className="absolute h-full bg-primary" />
    </SliderPrimitive.Track>
    <SliderPrimitive.Thumb className="block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50" />
  </SliderPrimitive.Root>
))
Slider.displayName = SliderPrimitive.Root.displayName

export { Slider }

</code>

components\ui\sonner.tsx:
<code>
"use client"

import { useTheme } from "next-themes"
import { Toaster as Sonner } from "sonner"

type ToasterProps = React.ComponentProps<typeof Sonner>

const Toaster = ({ ...props }: ToasterProps) => {
  const { theme = "system" } = useTheme()

  return (
    <Sonner
      theme={theme as ToasterProps["theme"]}
      className="toaster group"
      toastOptions={{
        classNames: {
          toast:
            "group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg",
          description: "group-[.toast]:text-muted-foreground",
          actionButton:
            "group-[.toast]:bg-primary group-[.toast]:text-primary-foreground",
          cancelButton:
            "group-[.toast]:bg-muted group-[.toast]:text-muted-foreground",
        },
      }}
      {...props}
    />
  )
}

export { Toaster }

</code>

components\ui\switch.tsx:
<code>
"use client"

import * as React from "react"
import * as SwitchPrimitives from "@radix-ui/react-switch"

import { cn } from "@/lib/utils"

const Switch = React.forwardRef<
  React.ElementRef<typeof SwitchPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
>(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      "peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input",
      className
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        "pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0"
      )}
    />
  </SwitchPrimitives.Root>
))
Switch.displayName = SwitchPrimitives.Root.displayName

export { Switch }

</code>

components\ui\table.tsx:
<code>
import * as React from "react"

import { cn } from "@/lib/utils"

const Table = React.forwardRef<
  HTMLTableElement,
  React.HTMLAttributes<HTMLTableElement>
>(({ className, ...props }, ref) => (
  <div className="relative w-full overflow-auto">
    <table
      ref={ref}
      className={cn("w-full caption-bottom text-sm", className)}
      {...props}
    />
  </div>
))
Table.displayName = "Table"

const TableHeader = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />
))
TableHeader.displayName = "TableHeader"

const TableBody = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn("[&_tr:last-child]:border-0", className)}
    {...props}
  />
))
TableBody.displayName = "TableBody"

const TableFooter = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn(
      "border-t bg-muted/50 font-medium [&>tr]:last:border-b-0",
      className
    )}
    {...props}
  />
))
TableFooter.displayName = "TableFooter"

const TableRow = React.forwardRef<
  HTMLTableRowElement,
  React.HTMLAttributes<HTMLTableRowElement>
>(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
      className
    )}
    {...props}
  />
))
TableRow.displayName = "TableRow"

const TableHead = React.forwardRef<
  HTMLTableCellElement,
  React.ThHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      "h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0",
      className
    )}
    {...props}
  />
))
TableHead.displayName = "TableHead"

const TableCell = React.forwardRef<
  HTMLTableCellElement,
  React.TdHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn("p-4 align-middle [&:has([role=checkbox])]:pr-0", className)}
    {...props}
  />
))
TableCell.displayName = "TableCell"

const TableCaption = React.forwardRef<
  HTMLTableCaptionElement,
  React.HTMLAttributes<HTMLTableCaptionElement>
>(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn("mt-4 text-sm text-muted-foreground", className)}
    {...props}
  />
))
TableCaption.displayName = "TableCaption"

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}

</code>

components\ui\tabs.tsx:
<code>
"use client"

import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground",
      className
    )}
    {...props}
  />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm",
      className
    )}
    {...props}
  />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className
    )}
    {...props}
  />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent }

</code>

components\ui\textarea.tsx:
<code>
import * as React from "react"

import { cn } from "@/lib/utils"

const Textarea = React.forwardRef<
  HTMLTextAreaElement,
  React.ComponentProps<"textarea">
>(({ className, ...props }, ref) => {
  return (
    <textarea
      className={cn(
        "flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        className
      )}
      ref={ref}
      {...props}
    />
  )
})
Textarea.displayName = "Textarea"

export { Textarea }

</code>

components\ui\toast.tsx:
<code>
"use client"

import * as React from "react"
import * as ToastPrimitives from "@radix-ui/react-toast"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const ToastProvider = ToastPrimitives.Provider

const ToastViewport = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Viewport>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Viewport
    ref={ref}
    className={cn(
      "fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]",
      className
    )}
    {...props}
  />
))
ToastViewport.displayName = ToastPrimitives.Viewport.displayName

const toastVariants = cva(
  "group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full",
  {
    variants: {
      variant: {
        default: "border bg-background text-foreground",
        destructive:
          "destructive group border-destructive bg-destructive text-destructive-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Toast = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &
    VariantProps<typeof toastVariants>
>(({ className, variant, ...props }, ref) => {
  return (
    <ToastPrimitives.Root
      ref={ref}
      className={cn(toastVariants({ variant }), className)}
      {...props}
    />
  )
})
Toast.displayName = ToastPrimitives.Root.displayName

const ToastAction = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Action>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Action
    ref={ref}
    className={cn(
      "inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive",
      className
    )}
    {...props}
  />
))
ToastAction.displayName = ToastPrimitives.Action.displayName

const ToastClose = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Close>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Close
    ref={ref}
    className={cn(
      "absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600",
      className
    )}
    toast-close=""
    {...props}
  >
    <X className="h-4 w-4" />
  </ToastPrimitives.Close>
))
ToastClose.displayName = ToastPrimitives.Close.displayName

const ToastTitle = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Title>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Title
    ref={ref}
    className={cn("text-sm font-semibold", className)}
    {...props}
  />
))
ToastTitle.displayName = ToastPrimitives.Title.displayName

const ToastDescription = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Description>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Description
    ref={ref}
    className={cn("text-sm opacity-90", className)}
    {...props}
  />
))
ToastDescription.displayName = ToastPrimitives.Description.displayName

type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>

type ToastActionElement = React.ReactElement<typeof ToastAction>

export {
  type ToastProps,
  type ToastActionElement,
  ToastProvider,
  ToastViewport,
  Toast,
  ToastTitle,
  ToastDescription,
  ToastClose,
  ToastAction,
}

</code>

components\ui\toaster.tsx:
<code>
"use client"

import { useToast } from "@/hooks/use-toast"
import {
  Toast,
  ToastClose,
  ToastDescription,
  ToastProvider,
  ToastTitle,
  ToastViewport,
} from "@/components/ui/toast"

export function Toaster() {
  const { toasts } = useToast()

  return (
    <ToastProvider>
      {toasts.map(function ({ id, title, description, action, ...props }) {
        return (
          <Toast key={id} {...props}>
            <div className="grid gap-1">
              {title && <ToastTitle>{title}</ToastTitle>}
              {description && (
                <ToastDescription>{description}</ToastDescription>
              )}
            </div>
            {action}
            <ToastClose />
          </Toast>
        )
      })}
      <ToastViewport />
    </ToastProvider>
  )
}

</code>

components\ui\toggle-group.tsx:
<code>
"use client"

import * as React from "react"
import * as ToggleGroupPrimitive from "@radix-ui/react-toggle-group"
import { type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"
import { toggleVariants } from "@/components/ui/toggle"

const ToggleGroupContext = React.createContext<
  VariantProps<typeof toggleVariants>
>({
  size: "default",
  variant: "default",
})

const ToggleGroup = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, children, ...props }, ref) => (
  <ToggleGroupPrimitive.Root
    ref={ref}
    className={cn("flex items-center justify-center gap-1", className)}
    {...props}
  >
    <ToggleGroupContext.Provider value={{ variant, size }}>
      {children}
    </ToggleGroupContext.Provider>
  </ToggleGroupPrimitive.Root>
))

ToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName

const ToggleGroupItem = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &
    VariantProps<typeof toggleVariants>
>(({ className, children, variant, size, ...props }, ref) => {
  const context = React.useContext(ToggleGroupContext)

  return (
    <ToggleGroupPrimitive.Item
      ref={ref}
      className={cn(
        toggleVariants({
          variant: context.variant || variant,
          size: context.size || size,
        }),
        className
      )}
      {...props}
    >
      {children}
    </ToggleGroupPrimitive.Item>
  )
})

ToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName

export { ToggleGroup, ToggleGroupItem }

</code>

components\ui\toggle.tsx:
<code>
"use client"

import * as React from "react"
import * as TogglePrimitive from "@radix-ui/react-toggle"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const toggleVariants = cva(
  "inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2",
  {
    variants: {
      variant: {
        default: "bg-transparent",
        outline:
          "border border-input bg-transparent hover:bg-accent hover:text-accent-foreground",
      },
      size: {
        default: "h-10 px-3 min-w-10",
        sm: "h-9 px-2.5 min-w-9",
        lg: "h-11 px-5 min-w-11",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const Toggle = React.forwardRef<
  React.ElementRef<typeof TogglePrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, ...props }, ref) => (
  <TogglePrimitive.Root
    ref={ref}
    className={cn(toggleVariants({ variant, size, className }))}
    {...props}
  />
))

Toggle.displayName = TogglePrimitive.Root.displayName

export { Toggle, toggleVariants }

</code>

components\ui\tooltip.tsx:
<code>
"use client"

import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"

import { cn } from "@/lib/utils"

const TooltipProvider = TooltipPrimitive.Provider

const Tooltip = TooltipPrimitive.Root

const TooltipTrigger = TooltipPrimitive.Trigger

const TooltipContent = React.forwardRef<
  React.ElementRef<typeof TooltipPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Content
    ref={ref}
    sideOffset={sideOffset}
    className={cn(
      "z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]",
      className
    )}
    {...props}
  />
))
TooltipContent.displayName = TooltipPrimitive.Content.displayName

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }

</code>

components\ui\use-mobile.tsx:
<code>
import * as React from "react"

const MOBILE_BREAKPOINT = 768

export function useIsMobile() {
  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)

  React.useEffect(() => {
    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)
    const onChange = () => {
      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    }
    mql.addEventListener("change", onChange)
    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    return () => mql.removeEventListener("change", onChange)
  }, [])

  return !!isMobile
}

</code>

components\ui\use-toast.ts:
<code>
"use client"

// Inspired by react-hot-toast library
import * as React from "react"

import type {
  ToastActionElement,
  ToastProps,
} from "@/components/ui/toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }

</code>

components\auth-forms.tsx:
<code>
'use client'

import React, { useState } from 'react'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Alert, AlertDescription } from '@/components/ui/alert'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { Github, Mail, Eye, EyeOff, AlertCircle, CheckCircle } from 'lucide-react'
import { supabase } from '@/lib/supabase'

interface AuthFormsProps {
  onClose?: () => void
}

export default function AuthForms({ onClose }: AuthFormsProps) {
  const [isLoading, setIsLoading] = useState(false)
  const [showPassword, setShowPassword] = useState(false)
  const [message, setMessage] = useState<{ type: 'success' | 'error'; text: string } | null>(null)
  
  const [signUpData, setSignUpData] = useState({
    email: '',
    password: '',
    confirmPassword: ''
  })
  
  const [signInData, setSignInData] = useState({
    email: '',
    password: ''
  })

  const handleSignUp = async (e: React.FormEvent) => {
    e.preventDefault()
    if (signUpData.password !== signUpData.confirmPassword) {
      setMessage({ type: 'error', text: 'Passwords do not match' })
      return
    }
    
    setIsLoading(true)
    setMessage(null)
    
    try {
      const { data, error } = await supabase.auth.signUp({
        email: signUpData.email,
        password: signUpData.password,
        // No email confirmation - direct signup for faster onboarding
      })
      
      if (error) throw error
      
      // User must manually switch to login after signup
      setMessage({
        type: 'success',
        text: 'Account created successfully! Please manually switch to login to continue.'
      })
      // REMOVED: Automatic tab switch - user must manually choose
    } catch (error: any) {
      setMessage({ type: 'error', text: error.message })
    } finally {
      setIsLoading(false)
    }
  }

  const handleSignIn = async (e: React.FormEvent) => {
    e.preventDefault()
    setIsLoading(true)
    setMessage(null)

    // Check if user entered a username instead of email
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
    if (!emailRegex.test(signInData.email)) {
      setMessage({
        type: 'error',
        text: 'Please enter a valid email address. For GitHub login, use the GitHub button below instead of entering your username here.'
      })
      setIsLoading(false)
      return
    }

    try {
      const { data, error } = await supabase.auth.signInWithPassword({
        email: signInData.email,
        password: signInData.password
      })

      if (error) throw error

      setMessage({
        type: 'success',
        text: 'Signed in successfully! Please manually navigate to your desired page.'
      })
      // REMOVED: Automatic redirect - user must manually navigate
    } catch (error: any) {
      setMessage({ type: 'error', text: error.message })
    } finally {
      setIsLoading(false)
    }
  }

  const handleGitHubSignIn = async () => {
    setIsLoading(true)
    setMessage(null)

    try {
      const { error } = await supabase.auth.signInWithOAuth({
        provider: 'github',
        options: {
          redirectTo: `${window.location.origin}/`,
          queryParams: {
            access_type: 'offline',
            prompt: 'consent',
          }
        }
      })

      if (error) throw error
    } catch (error: any) {
      setMessage({ type: 'error', text: error.message })
      setIsLoading(false)
    }
  }

  const handleGoogleSignIn = async () => {
    setIsLoading(true)
    setMessage(null)

    try {
      const { error } = await supabase.auth.signInWithOAuth({
        provider: 'google',
        options: {
          redirectTo: `${window.location.origin}/`,
          queryParams: {
            access_type: 'offline',
            prompt: 'consent',
          }
        }
      })

      if (error) throw error
    } catch (error: any) {
      setMessage({ type: 'error', text: error.message })
      setIsLoading(false)
    }
  }

  return (
    <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
      <Card className="w-full max-w-md">
        <CardHeader className="space-y-1">
          <div className="flex items-center justify-between">
            <CardTitle className="text-2xl font-bold">Welcome to NeatRepo</CardTitle>
            {onClose && (
              <Button variant="ghost" size="sm" onClick={onClose}>
                ×
              </Button>
            )}
          </div>
          <CardDescription>
            Sign in to your account or create a new one
          </CardDescription>
        </CardHeader>
        <CardContent>
          {message && (
            <Alert className={`mb-4 ${message.type === 'error' ? 'border-destructive' : 'border-green-500'}`}>
              {message.type === 'error' ? (
                <AlertCircle className="h-4 w-4" />
              ) : (
                <CheckCircle className="h-4 w-4" />
              )}
              <AlertDescription className={message.type === 'error' ? 'text-destructive' : 'text-green-600'}>
                {message.text}
              </AlertDescription>
            </Alert>
          )}

          <Tabs defaultValue="signin" className="w-full">
            <TabsList className="grid w-full grid-cols-2">
              <TabsTrigger value="signin">Sign In</TabsTrigger>
              <TabsTrigger value="signup">Sign Up</TabsTrigger>
            </TabsList>
            
            <TabsContent value="signin" className="space-y-4">
              <form onSubmit={handleSignIn} className="space-y-4">
                <div className="space-y-2">
                  <Label htmlFor="signin-email">Email</Label>
                  <Input
                    id="signin-email"
                    type="email"
                    placeholder="your@email.com"
                    value={signInData.email}
                    onChange={(e) => setSignInData(prev => ({ ...prev, email: e.target.value }))}
                    required
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="signin-password">Password</Label>
                  <div className="relative">
                    <Input
                      id="signin-password"
                      type={showPassword ? 'text' : 'password'}
                      placeholder="••••••••"
                      value={signInData.password}
                      onChange={(e) => setSignInData(prev => ({ ...prev, password: e.target.value }))}
                      required
                    />
                    <Button
                      type="button"
                      variant="ghost"
                      size="sm"
                      className="absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent"
                      onClick={() => setShowPassword(!showPassword)}
                    >
                      {showPassword ? <EyeOff className="h-4 w-4" /> : <Eye className="h-4 w-4" />}
                    </Button>
                  </div>
                </div>
                <Button type="submit" className="w-full" disabled={isLoading}>
                  {isLoading ? 'Signing in...' : 'Sign In'}
                </Button>
              </form>
            </TabsContent>
            
            <TabsContent value="signup" className="space-y-4">
              <form onSubmit={handleSignUp} className="space-y-4">
                <div className="space-y-2">
                  <Label htmlFor="signup-email">Email</Label>
                  <Input
                    id="signup-email"
                    type="email"
                    placeholder="your@email.com"
                    value={signUpData.email}
                    onChange={(e) => setSignUpData(prev => ({ ...prev, email: e.target.value }))}
                    required
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="signup-password">Password</Label>
                  <Input
                    id="signup-password"
                    type="password"
                    placeholder="••••••••"
                    value={signUpData.password}
                    onChange={(e) => setSignUpData(prev => ({ ...prev, password: e.target.value }))}
                    required
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="confirm-password">Confirm Password</Label>
                  <Input
                    id="confirm-password"
                    type="password"
                    placeholder="••••••••"
                    value={signUpData.confirmPassword}
                    onChange={(e) => setSignUpData(prev => ({ ...prev, confirmPassword: e.target.value }))}
                    required
                  />
                </div>
                <Button type="submit" className="w-full" disabled={isLoading}>
                  {isLoading ? 'Creating account...' : 'Create Account'}
                </Button>
              </form>
            </TabsContent>
          </Tabs>

          <div className="relative my-4">
            <div className="absolute inset-0 flex items-center">
              <span className="w-full border-t" />
            </div>
            <div className="relative flex justify-center text-xs uppercase">
              <span className="bg-background px-2 text-muted-foreground">Or continue with</span>
            </div>
          </div>

          <div className="grid grid-cols-2 gap-3">
            <Button
              variant="outline"
              className="w-full"
              onClick={handleGoogleSignIn}
              disabled={isLoading}
            >
              <svg className="mr-2 h-4 w-4" viewBox="0 0 24 24">
                <path fill="#4285F4" d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"/>
                <path fill="#34A853" d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"/>
                <path fill="#FBBC05" d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"/>
                <path fill="#EA4335" d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"/>
              </svg>
              Google
            </Button>
            <Button
              variant="outline"
              className="w-full"
              onClick={handleGitHubSignIn}
              disabled={isLoading}
            >
              <Github className="mr-2 h-4 w-4" />
              GitHub
            </Button>
          </div>
        </CardContent>
      </Card>
    </div>
  )
}

</code>

components\auth-guard.tsx:
<code>
"use client"

import { useEffect, useState } from 'react'
import { useRouter, useSearchParams } from 'next/navigation'
import { useAuth } from './auth-provider'

interface AuthGuardProps {
  children: React.ReactNode
  requireAuth?: boolean
}

export function AuthGuard({ children, requireAuth = true }: AuthGuardProps) {
  const { user, loading } = useAuth()
  const router = useRouter()
  const searchParams = useSearchParams()
  const [isChecking, setIsChecking] = useState(true)

  useEffect(() => {
    // If we don't require auth, just render children
    if (!requireAuth) {
      setIsChecking(false)
      return
    }

    // If still loading, wait
    if (loading) {
      return
    }

    // Check for auth success parameter (fresh from OAuth)
    const authSuccess = searchParams.get('auth')
    if (authSuccess === 'success') {
      console.log('🔄 AUTH GUARD: Auth success parameter detected, waiting for session...')
      
      // Give the session a moment to establish after OAuth callback
      const sessionTimeout = setTimeout(() => {
        if (!user) {
          console.log('⚠️ AUTH GUARD: Session not established after OAuth - user must manually navigate')
          // REMOVED: Automatic redirect - user must manually choose where to go
        } else {
          console.log('✅ AUTH GUARD: Session established successfully')
          // Clean up the URL parameter
          const url = new URL(window.location.href)
          url.searchParams.delete('auth')
          window.history.replaceState({}, '', url.toString())
        }
        setIsChecking(false)
      }, 2000) // Give 2 seconds for session to establish

      return () => clearTimeout(sessionTimeout)
    }

    // Normal auth check
    if (!user) {
      console.log('🚫 AUTH GUARD: No user found - user must manually navigate')
      // REMOVED: Automatic redirect - user must manually choose where to go
      setIsChecking(false)
      return
    }

    console.log('✅ AUTH GUARD: User authenticated, allowing access')
    setIsChecking(false)
  }, [user, loading, requireAuth, router, searchParams])

  // Show loading state while checking auth
  if (isChecking || loading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4"></div>
          <p className="text-muted-foreground">Authenticating...</p>
        </div>
      </div>
    )
  }

  // If we require auth and don't have a user, don't render children
  if (requireAuth && !user) {
    return null
  }

  return <>{children}</>
}
</code>

components\auth-provider.tsx:
<code>
"use client"

import React, { useEffect, useState } from "react";
import { User } from "@supabase/supabase-js";
import { supabase } from "@/lib/supabase";
import { AuthContext, AuthContextType, UserProfile, useAuth } from "./auth/auth-context";
import { fetchProfileService, updateTokenService, deleteTokenService, validateTokenService } from "@/lib/auth/profile-service";
import GitHubTokenPopup from "./github-token-popup";

// Re-export useAuth for convenience if other files import it from here
export { useAuth };

export function AuthProvider({ children }: { children: React.ReactNode }) {
  const [user, setUser] = useState<User | null>(null);
  const [profile, setProfile] = useState<UserProfile | null>(null);
  const [loading, setLoading] = useState(true);
  const [showTokenPopupState, setShowTokenPopupState] = useState(false);
  const [isSubmitting, setIsSubmitting] = useState(false);
  // Track if the token is invalid
  const [isTokenInvalid, setIsTokenInvalid] = useState(false);

  useEffect(() => {
    setLoading(true);
    console.log("🚀 AUTH: Provider mounted. Setting up auth listener.");
    
    const { data: { subscription } } = supabase.auth.onAuthStateChange(
        async (event, session) => {
            console.log("🔄 AUTH: Auth state changed:", { event, hasSession: !!session });

            if (session?.user) {
                const currentUser = session.user;
                setUser(currentUser);

                if (typeof window !== 'undefined') {
                    sessionStorage.setItem('current_user_id', currentUser.id);
                }

                if (typeof window !== 'undefined') {
                    const cachedPat = localStorage.getItem(`github_pat_token_${currentUser.id}`);
                    if (cachedPat && !cachedPat.startsWith('gho_')) {
                        console.log('🔄 AUTH: Preemptively hydrating profile with cached PAT.');
                        setProfile(prev => ({ ...(prev || { id: currentUser.id }), github_pat_token: cachedPat } as UserProfile));
                    }
                }
                

                const fetchedProfile = await fetchProfileService(currentUser.id, currentUser);
                setProfile(fetchedProfile);

                // ✨ NEW VALIDATION LOGIC ✨
                // If the fetched profile contains a PAT, validate it immediately on load.
                if (fetchedProfile?.github_pat_token) {
                    const isTokenValid = await validateTokenService(fetchedProfile.github_pat_token);
                    if (!isTokenValid) {
                        setIsTokenInvalid(true);
                    }
                }

            } else {
                setUser(null);
                setProfile(null);
                if (typeof window !== 'undefined') {
                    sessionStorage.removeItem('current_user_id');
                }
            }

            setLoading(false);
            console.log("✅ AUTH: State processing complete. Loading is now false.");
        }
    );

    const initialSessionCheck = async () => {
        const { data: { session } } = await supabase.auth.getSession();
        if (!session) {
            setLoading(false);
            console.log("✅ AUTH: No initial session found. Authentication finished.");
        }
    };

    initialSessionCheck();

    return () => {
        subscription.unsubscribe();
    };
}, []);

  const signOut = async () => {
    const userInfo = {
      username: profile?.github_username || user?.email || 'User',
      avatar: profile?.avatar_url || user?.user_metadata?.avatar_url || ''
    };
  
    if (user) {
      localStorage.removeItem(`token_popup_skipped_permanently_${user.id}`);
    }
  
    setProfile(null);
  
    if (typeof window !== 'undefined') {
      localStorage.clear();
      sessionStorage.clear();
    }
  
    await supabase.auth.signOut({ scope: 'global' });
  
    const signoutUrl = new URL('/signout', window.location.origin);
    signoutUrl.searchParams.set('username', userInfo.username);
    signoutUrl.searchParams.set('avatar', userInfo.avatar);
    window.location.href = signoutUrl.toString();
  };

  const updateToken = async (token: string) => {
    if (!user) return;
    setIsSubmitting(true);
    try {
      await updateTokenService(user.id, token);
      setProfile(prev => (prev ? { ...prev, github_pat_token: token } : null));
      setIsTokenInvalid(false); // Reset invalid status on update
      if (typeof window !== 'undefined') {
        localStorage.setItem(`github_pat_token_${user.id}`, token);
        localStorage.removeItem(`token_popup_skipped_permanently_${user.id}`);
      }
      setShowTokenPopupState(false);
    } catch (error) {
      alert('Failed to save token. Please check the console for details.');
      console.error("AuthProvider: updateToken failed", error);
    } finally {
      setIsSubmitting(false);
    }
  };

  const deleteToken = async () => {
    if (!user) return;
    setIsSubmitting(true);
    try {
      await deleteTokenService(user.id);
      setProfile(prev => (prev ? { ...prev, github_pat_token: undefined } : null));
      if (typeof window !== 'undefined') {
        localStorage.removeItem(`github_pat_token_${user.id}`);
      }
    } catch (error) {
      alert('Failed to delete token. Please try again.');
      console.error("AuthProvider: deleteToken failed", error);
    } finally {
      setIsSubmitting(false);
    }
  };

  const getEffectiveToken = async (): Promise<string | null> => {
    console.log("--- 🕵️‍♂️ getEffectiveToken Diagnostic ---");

    // Priority 1: Check the live profile state from React.
    if (profile) {
        if (profile.github_pat_token) {
            console.log("✅ [SUCCESS] Found PAT in the loaded profile state.");
            console.log("--- Diagnostic END ---");
            return profile.github_pat_token;
        } else {
            console.log("🟡 [INFO] Profile is loaded, but it does not contain a PAT.");
        }
    } else {
        console.log("🟡 [INFO] Profile state is currently null (still loading or not found).");
    }

    // Priority 2: Check localStorage as a fast fallback. This is crucial for hard refreshes.
    if (user && typeof window !== 'undefined') {
        const key = `github_pat_token_${user.id}`;
        const cachedPat = localStorage.getItem(key);
        
        if (cachedPat) {
            if (!cachedPat.startsWith('gho_')) {
                console.log("✅ [SUCCESS] Found PAT in localStorage cache.");
                console.log("--- Diagnostic END ---");
                return cachedPat;
            } else {
                console.log("🔴 [ERROR] An OAuth token (gho_) was incorrectly saved as a PAT in localStorage. Ignoring it.");
            }
        } else {
            console.log(`🟡 [INFO] No PAT found in localStorage for key: \"${key}\"`);
        }
    } else {
        console.log("🟡 [INFO] Cannot check localStorage because the user object isn't available yet.");
    }

    console.log("🔴 [FAILURE] No valid Personal Access Token (PAT) was found.");
    console.log("--- Diagnostic END ---");
    return null; // Explicitly return null. DO NOT fall back to any other token.
  };
  
  const handleSkipToken = () => {
    if (user && typeof window !== 'undefined') {
      localStorage.setItem(`token_popup_skipped_permanently_${user.id}`, 'true');
    }
    setShowTokenPopupState(false);
  };

  const value: AuthContextType = {
    user,
    profile,
    loading,
    signOut,
    showTokenPopup: () => setShowTokenPopupState(true),
    getEffectiveToken,
    updateToken,
    deleteToken,
    isTokenInvalid,
    markTokenAsInvalid: () => setIsTokenInvalid(true),
  };

  return (
    <AuthContext.Provider value={value}>
      {showTokenPopupState && (
        <GitHubTokenPopup
          onTokenSubmit={updateToken}
          isSubmitting={isSubmitting}
          onClose={() => setShowTokenPopupState(false)}
          onSkip={handleSkipToken}
        />
      )}
      {children}
    </AuthContext.Provider>
  );
}
</code>

components\dashboard-header.tsx:
<code>
"use client"

import { User, LogOut, Settings } from "lucide-react"
import { ThemeToggle } from "@/components/theme-toggle"
import { useTheme } from "next-themes"
import { Badge } from "@/components/ui/badge"
import { Button } from "@/components/ui/button"

import { useAuth } from "@/components/auth-provider"
import { useRouter } from "next/navigation"

export default function DashboardHeader() {
  const { user, profile, loading, signOut } = useAuth()
  const router = useRouter()
  const { theme } = useTheme()

  // Prefer avatar from profile, fallback to metadata
  const avatarSrc = profile?.avatar_url || user?.user_metadata?.avatar_url || '';

  const handleSignOut = async () => {
    await signOut();
    // Redirect is handled within the AuthProvider's signOut implementation
  }

  const handleSignIn = () => {
    router.push('/')
  }

  const handleProfileSettings = () => {
    router.push('/profile')
  }

  return (
    <header className="border-b border-border bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60 sticky top-0 z-50">
      <div className="container mx-auto px-4 py-3">
        <div className="flex items-center justify-between">
          {/* Logo & Brand */}
          <div className="flex items-center space-x-3">
            <img 
              src={theme === 'dark' ? '/logo-dark.png' : '/logo-light.png'}
              alt="NeatRepo Logo"
              className="h-8 w-8"
            />
            <div className="flex flex-col">
              <span className="text-xl font-bold">NeatRepo</span>
              <div className="flex items-center space-x-2">
                <Badge variant="secondary" className="text-xs">
                  Dashboard
                </Badge>
              </div>
            </div>
          </div>

          {/* Navigation Actions */}
          <div className="flex items-center space-x-4">
            <ThemeToggle />

            {/* User Menu with Profile Settings */}
            {user ? (
              <div className="flex items-center space-x-2">
                                {avatarSrc ? (
                  <img
                    src={avatarSrc}
                    alt={profile?.username || user?.user_metadata?.user_name || 'User'}
                    className="w-6 h-6 rounded-full"
                  />
                ) : (
                  <User className="w-4 h-4" />
                )}
                <span className="text-sm">
                  {profile?.username || user.email || 'User'}
                </span>
                <Button
                  variant="ghost"
                  size="icon"
                  onClick={handleProfileSettings}
                  disabled={loading}
                >
                  <Settings className="w-4 h-4" />
                </Button>
                <Button
                  variant="ghost"
                  size="icon"
                  onClick={handleSignOut}
                  disabled={loading}
                >
                  <LogOut className="w-4 h-4" />
                </Button>
              </div>
            ) : (
              <Button
                variant="ghost"
                onClick={handleSignIn}
                disabled={loading}
              >
                <User className="w-4 h-4 mr-2" />
                Sign In
              </Button>
            )}
          </div>
        </div>
      </div>
    </header>
  )
}

</code>

components\github-auth.tsx:
<code>
"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Alert, AlertDescription } from "@/components/ui/alert"
import { Github, Users, Zap, Shield, GitBranch, Star, X, AlertCircle } from "lucide-react"
import { supabase } from "@/lib/supabase"

interface GitHubAuthProps {
  onClose?: () => void
}

export default function GitHubAuth({ onClose }: GitHubAuthProps) {
  const [isLoading, setIsLoading] = useState(false)
  const [error, setError] = useState<string | null>(null)

  const handleGitHubSignIn = async () => {
    setIsLoading(true)
    setError(null)

    try {
      const { error } = await supabase.auth.signInWithOAuth({
        provider: 'github',
        options: {
          // Use custom OAuth callback route to handle session exchange server-side
          redirectTo: `${window.location.origin}/api/auth/callback?next=/dashboard`,
          scopes: 'repo read:user',
          queryParams: {
            access_type: 'offline',
            prompt: 'consent',
          }
        }
      })

      if (error) {
        throw error
      }
    } catch (err: any) {
      console.error('GitHub OAuth error:', err)
      setError(err.message || 'Failed to sign in with GitHub')
      setIsLoading(false)
    }
  }

  return (
    <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
      <Card className="w-full max-w-lg mx-auto">
        <CardHeader className="text-center">
          <div className="flex items-center justify-between">
            <div className="flex-1" />
            <Github className="h-10 w-10 text-primary" />
            {onClose && (
              <Button
                variant="ghost"
                size="sm"
                onClick={onClose}
                className="flex-shrink-0"
              >
                <X className="h-4 w-4" />
              </Button>
            )}
          </div>
          <CardTitle className="text-2xl">Welcome to NeatRepo</CardTitle>
          <CardDescription className="text-base">
            Professional GitHub Repository Management
          </CardDescription>
        </CardHeader>
        
        <CardContent className="space-y-6">
          {error && (
            <Alert variant="destructive">
              <AlertCircle className="h-4 w-4" />
              <AlertDescription>{error}</AlertDescription>
            </Alert>
          )}
          
          {/* Features Grid */}
          <div className="grid grid-cols-2 gap-4 text-sm">
            <div className="flex items-center space-x-3">
              <Zap className="h-4 w-4 text-yellow-500" />
              <span>Lightning Fast</span>
            </div>
            <div className="flex items-center space-x-3">
              <Shield className="h-4 w-4 text-green-500" />
              <span>Secure OAuth</span>
            </div>
            <div className="flex items-center space-x-3">
              <GitBranch className="h-4 w-4 text-purple-500" />
              <span>Bulk Operations</span>
            </div>
            <div className="flex items-center space-x-3">
              <Users className="h-4 w-4 text-blue-500" />
              <span>Repository Management</span>
            </div>
          </div>

          {/* Professional Features Highlight */}
          <div className="bg-gradient-to-r from-blue-50 to-purple-50 dark:from-blue-950/20 dark:to-purple-950/20 p-4 rounded-lg border">
            <div className="flex items-center space-x-2 mb-2">
              <Star className="h-4 w-4 text-yellow-500" />
              <span className="font-semibold text-sm">Professional Repository Management</span>
              <Badge variant="secondary" className="text-xs">Production Ready</Badge>
            </div>
            <p className="text-sm text-muted-foreground">
              Organize, manage, and optimize your GitHub repositories with powerful bulk operations and AI assistance.
            </p>
          </div>
          
          {/* Sign In Button */}
          <Button 
            onClick={handleGitHubSignIn}
            disabled={isLoading}
            className="w-full h-12 text-base"
            size="lg"
          >
            {isLoading ? (
              <>
                <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-white mr-3" />
                Connecting to GitHub...
              </>
            ) : (
              <>
                <Github className="h-5 w-5 mr-3" />
                Continue with GitHub
              </>
            )}
          </Button>
          
          {/* Benefits */}
          <div className="space-y-2 text-xs text-muted-foreground">
            <p className="flex items-center justify-center space-x-1">
              <Shield className="h-3 w-3" />
              <span>We only request necessary permissions</span>
            </p>
            <p className="flex items-center justify-center space-x-1">
              <Users className="h-3 w-3" />
              <span>Easy account switching • No email required</span>
            </p>
          </div>
        </CardContent>
      </Card>
    </div>
  )
}

</code>

components\github-connect-popup.tsx:
<code>
"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Github, Shield, Zap, X } from "lucide-react"
import { supabase } from "@/lib/supabase"

interface GitHubConnectPopupProps {
  onClose: () => void
  onSkip: () => void
  userEmail?: string
}

export default function GitHubConnectPopup({ onClose, onSkip, userEmail }: GitHubConnectPopupProps) {
  const [isConnecting, setIsConnecting] = useState(false)

  const handleConnectGitHub = async () => {
    setIsConnecting(true)
    
    try {
      const currentUrl = window.location.href
      const { error } = await supabase.auth.signInWithOAuth({
        provider: 'github',
        options: {
          redirectTo: currentUrl,
          scopes: 'repo read:user'
        }
      })
      
      if (error) {
        console.error('❌ GitHub OAuth failed:', error)
        setIsConnecting(false)
      }
    } catch (error) {
      console.error('❌ GitHub connection error:', error)
      setIsConnecting(false)
    }
  }

  return (
    <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
      <Card className="w-full max-w-md mx-auto">
        <CardHeader className="text-center">
          <div className="flex items-center justify-between">
            <div className="flex-1" />
            <Github className="h-8 w-8 text-primary" />
            <Button
              variant="ghost"
              size="sm"
              onClick={onClose}
              className="flex-shrink-0"
            >
              <X className="h-4 w-4" />
            </Button>
          </div>
          <CardTitle className="text-xl">Connect Your GitHub Account</CardTitle>
          <CardDescription>
            To access your repositories and use NeatRepo's features, please connect your GitHub account.
          </CardDescription>
        </CardHeader>
        
        <CardContent className="space-y-4">
          {userEmail && (
            <div className="bg-muted p-3 rounded-lg text-sm">
              <p className="text-muted-foreground">Currently signed in as:</p>
              <p className="font-medium">{userEmail}</p>
            </div>
          )}
          
          <div className="space-y-3">
            <div className="flex items-center space-x-3 text-sm">
              <Shield className="h-4 w-4 text-green-500" />
              <span>Secure OAuth authentication</span>
            </div>
            <div className="flex items-center space-x-3 text-sm">
              <Zap className="h-4 w-4 text-blue-500" />
              <span>Access your repositories</span>
            </div>
            <div className="flex items-center space-x-3 text-sm">
              <Github className="h-4 w-4 text-purple-500" />
              <span>Manage repositories efficiently</span>
            </div>
          </div>
          
          <div className="space-y-3 pt-4">
            <Button 
              onClick={handleConnectGitHub}
              disabled={isConnecting}
              className="w-full"
              size="lg"
            >
              {isConnecting ? (
                <>
                  <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2" />
                  Connecting...
                </>
              ) : (
                <>
                  <Github className="h-4 w-4 mr-2" />
                  Connect GitHub Account
                </>
              )}
            </Button>
            
            <Button 
              variant="outline" 
              onClick={onSkip}
              className="w-full"
              disabled={isConnecting}
            >
              Skip for now
              <Badge variant="secondary" className="ml-2 text-xs">
                Limited features
              </Badge>
            </Button>
          </div>
          
          <p className="text-xs text-muted-foreground text-center">
            You can connect your GitHub account later from your profile settings.
          </p>
        </CardContent>
      </Card>
    </div>
  )
}

</code>

components\github-token-popup.tsx:
<code>
import React, { useState } from 'react';
import { GithubIcon, X, ExternalLink, AlertTriangle, CheckCircle } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Badge } from '@/components/ui/badge';

interface GitHubTokenPopupProps {
  onTokenSubmit: (token: string) => void;
  isSubmitting: boolean;
  onClose: () => void;
  onSkip: () => void;
}

export default function GitHubTokenPopup({ onTokenSubmit, isSubmitting, onClose, onSkip }: GitHubTokenPopupProps) {
  const [token, setToken] = useState('');

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (token.trim()) {
      onTokenSubmit(token.trim());
    }
  };

  return (
    <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/50 backdrop-blur-sm p-4">
      <div className="bg-background border rounded-lg shadow-lg max-w-lg w-full max-h-[90vh] overflow-y-auto relative">
        <Button
          variant="ghost"
          size="icon"
          onClick={onClose}
          className="absolute top-4 right-4 h-8 w-8"
        >
          <X className="h-4 w-4" />
        </Button>

        <div className="p-6">
          <div className="flex items-center gap-3 mb-6">
            <div className="p-2 bg-muted rounded-lg">
              <GithubIcon className="h-6 w-6" />
            </div>
            <div>
              <h2 className="text-xl font-semibold">Connect GitHub Account</h2>
              <p className="text-sm text-muted-foreground">Set up your Personal Access Token</p>
            </div>
          </div>
          <Alert className="mb-4">
            <AlertTriangle className="h-4 w-4" />
            <AlertDescription>
              <strong>Required Permissions:</strong> The following scopes are needed for full functionality.
            </AlertDescription>
          </Alert>

          <div className="grid grid-cols-2 gap-2 mb-4">
            <Badge variant="secondary" className="justify-center">
              <CheckCircle className="h-3 w-3 mr-1" />
              repo
            </Badge>
            <Badge variant="secondary" className="justify-center">
              <CheckCircle className="h-3 w-3 mr-1" />
              delete_repo
            </Badge>
            <Badge variant="secondary" className="justify-center">
              <CheckCircle className="h-3 w-3 mr-1" />
              admin:org
            </Badge>
            <Badge variant="secondary" className="justify-center">
              <CheckCircle className="h-3 w-3 mr-1" />
              user
            </Badge>
          </div>

          <div className="space-y-3 mb-6 text-sm text-muted-foreground">
            <div className="flex items-start gap-2">
              <span className="flex-shrink-0 w-5 h-5 bg-primary text-primary-foreground rounded-full flex items-center justify-center text-xs font-medium">1</span>
              <span>Click the button below to open GitHub token page</span>
            </div>
            <div className="flex items-start gap-2">
              <span className="flex-shrink-0 w-5 h-5 bg-primary text-primary-foreground rounded-full flex items-center justify-center text-xs font-medium">2</span>
              <span>Name your token "NeatRepo" in the Note field</span>
            </div>
            <div className="flex items-start gap-2">
              <span className="flex-shrink-0 w-5 h-5 bg-primary text-primary-foreground rounded-full flex items-center justify-center text-xs font-medium">3</span>
              <span>Select all 4 required scopes shown above</span>
            </div>
            <div className="flex items-start gap-2">
              <span className="flex-shrink-0 w-5 h-5 bg-primary text-primary-foreground rounded-full flex items-center justify-center text-xs font-medium">4</span>
              <span>Generate and copy the token</span>
            </div>
            <div className="flex items-start gap-2">
              <span className="flex-shrink-0 w-5 h-5 bg-primary text-primary-foreground rounded-full flex items-center justify-center text-xs font-medium">5</span>
              <span>Paste the token in the field below</span>
            </div>
          </div>
          <form onSubmit={handleSubmit} className="space-y-4">
            <div className="space-y-2">
              <Label htmlFor="github-token">GitHub Personal Access Token</Label>
              <Input
                id="github-token"
                type="password"
                value={token}
                onChange={(e) => setToken(e.target.value)}
                placeholder="ghp_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
              />
            </div>

            <Button
              type="button"
              variant="outline"
              className="w-full"
              asChild
            >
              <a
                href="https://github.com/settings/tokens/new?scopes=repo,delete_repo,admin:org,user&description=NeatRepo%20-%20Full%20Access"
                target="_blank"
                rel="noopener noreferrer"
                className="flex items-center justify-center gap-2"
              >
                <ExternalLink className="h-4 w-4" />
                Open GitHub & Auto-Select Scopes
              </a>
            </Button>
            <div className="flex flex-col gap-2">
              <Button
                type="submit"
                disabled={isSubmitting || !token.trim()}
                className="w-full"
              >
                {isSubmitting ? 'Saving...' : 'Save and Continue'}
              </Button>

              <Button
                type="button"
                variant="ghost"
                onClick={onSkip}
                disabled={isSubmitting}
                className="w-full text-muted-foreground"
              >
                Skip for now (Limited functionality)
              </Button>
            </div>
          </form>
        </div>
      </div>
    </div>
  );
}

</code>

components\github-token-warning.tsx:
<code>
'use client'

import { useState } from 'react'
import { Alert, AlertDescription } from '@/components/ui/alert'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { AlertTriangle, Github, X, Trash2, Zap } from 'lucide-react'

interface GitHubTokenWarningProps {
  onSetupToken: () => void
}

export default function GitHubTokenWarning({ onSetupToken }: GitHubTokenWarningProps) {
  const [isDismissed, setIsDismissed] = useState(false)

  if (isDismissed) {
    return null
  }

  return (
    <Alert className="border-yellow-200 bg-yellow-50 dark:bg-yellow-900/20 dark:border-yellow-800 mb-6">
      <AlertTriangle className="h-4 w-4 text-yellow-600" />
      <AlertDescription className="flex items-center justify-between w-full">
        <div className="flex-1 pr-4">
          <div className="flex items-center gap-2 mb-2">
            <span className="font-medium text-yellow-800 dark:text-yellow-200">
              GitHub Token Not Configured
            </span>
            <Badge variant="outline" className="text-xs border-yellow-300 text-yellow-700">
              Limited Features
            </Badge>
          </div>
          
          <p className="text-sm text-yellow-700 dark:text-yellow-300 mb-3">
            Some features are disabled without a GitHub token. Set up your token to unlock:
          </p>
          
          <div className="grid grid-cols-1 sm:grid-cols-2 gap-2 mb-3">
            <div className="flex items-center gap-2 text-xs text-yellow-700 dark:text-yellow-300">
              <Trash2 className="w-3 h-3" />
              <span>Bulk Delete Repositories</span>
            </div>
            <div className="flex items-center gap-2 text-xs text-yellow-700 dark:text-yellow-300">
              <Zap className="w-3 h-3" />
              <span>Advanced Repository Management</span>
            </div>
            <div className="flex items-center gap-2 text-xs text-yellow-700 dark:text-yellow-300">
              <Github className="w-3 h-3" />
              <span>Private Repository Access</span>
            </div>
            <div className="flex items-center gap-2 text-xs text-yellow-700 dark:text-yellow-300">
              <Zap className="w-3 h-3" />
              <span>Real-time Repository Sync</span>
            </div>
          </div>
          
          <div className="flex items-center gap-2">
            <Button 
              onClick={onSetupToken}
              size="sm" 
              className="bg-yellow-600 hover:bg-yellow-700 text-white"
            >
              <Github className="w-3 h-3 mr-1" />
              Setup GitHub Token
            </Button>
            <Button 
              onClick={() => setIsDismissed(true)}
              variant="ghost" 
              size="sm"
              className="text-yellow-700 hover:text-yellow-800 hover:bg-yellow-100 dark:text-yellow-300 dark:hover:text-yellow-200 dark:hover:bg-yellow-800/30"
            >
              Dismiss
            </Button>
          </div>
        </div>
        
        <Button
          onClick={() => setIsDismissed(true)}
          variant="ghost"
          size="sm"
          className="text-yellow-600 hover:text-yellow-700 hover:bg-yellow-100 dark:text-yellow-400 dark:hover:text-yellow-300 dark:hover:bg-yellow-800/30 p-1"
        >
          <X className="w-4 h-4" />
        </Button>
      </AlertDescription>
    </Alert>
  )
}

</code>

components\navigation-error-boundary.tsx:
<code>
'use client'

import React from 'react'
import { Button } from '@/components/ui/button'
import { Alert, AlertDescription } from '@/components/ui/alert'
import { RefreshCw, Home } from 'lucide-react'

interface NavigationErrorBoundaryState {
  hasError: boolean
  error?: Error
}

interface NavigationErrorBoundaryProps {
  children: React.ReactNode
}

export class NavigationErrorBoundary extends React.Component<
  NavigationErrorBoundaryProps,
  NavigationErrorBoundaryState
> {
  constructor(props: NavigationErrorBoundaryProps) {
    super(props)
    this.state = { hasError: false }
  }

  static getDerivedStateFromError(error: Error): NavigationErrorBoundaryState {
    return { hasError: true, error }
  }

  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {
    console.error('🚨 Navigation Error Boundary caught an error:', error, errorInfo)
    
    // Send error details to console for debugging
    console.error('🔍 Error Details:', {
      message: error.message,
      stack: error.stack,
      name: error.name,
      componentStack: errorInfo.componentStack,
      errorBoundary: errorInfo.errorBoundary,
      timestamp: new Date().toISOString(),
      userAgent: typeof window !== 'undefined' ? window.navigator.userAgent : 'server',
      url: typeof window !== 'undefined' ? window.location.href : 'unknown'
    })
  }

  handleRefresh = () => {
    // Clear any cached data that might be causing issues
    localStorage.removeItem('github_repositories')
    localStorage.removeItem('github_repositories_time')
    
    // Reset error state and reload
    this.setState({ hasError: false })
    window.location.reload()
  }

  handleGoHome = () => {
    // Clear cached data and go to home
    localStorage.removeItem('github_repositories')
    localStorage.removeItem('github_repositories_time')
    window.location.href = '/'
  }

  render() {
    if (this.state.hasError) {
      return (
        <div className="min-h-screen flex items-center justify-center p-4">
          <div className="max-w-md w-full space-y-4">
            <Alert variant="destructive">
              <AlertDescription>
                Something went wrong with navigation. This might be due to browser back/forward 
                navigation or a temporary issue.
              </AlertDescription>
            </Alert>
            
            <div className="space-y-2">
              <Button 
                onClick={this.handleRefresh} 
                className="w-full"
                variant="default"
              >
                <RefreshCw className="mr-2 h-4 w-4" />
                Refresh Page
              </Button>
              
              <Button 
                onClick={this.handleGoHome} 
                className="w-full"
                variant="outline"
              >
                <Home className="mr-2 h-4 w-4" />
                Go to Home
              </Button>
            </div>
            
            {process.env.NODE_ENV === 'development' && (
              <details className="text-xs text-muted-foreground">
                <summary>Error Details (Development)</summary>
                <pre className="mt-2 p-2 bg-muted rounded text-xs overflow-auto">
                  {this.state.error?.stack}
                </pre>
              </details>
            )}
          </div>
        </div>
      )
    }

    return this.props.children
  }
}

</code>

components\oauth-debug.tsx:
<code>
"use client"

import { useState } from "react"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { supabase } from "@/lib/supabase"
import { AlertTriangle, CheckCircle, XCircle, RefreshCw } from "lucide-react"

export function OAuthDebug() {
  const [testResults, setTestResults] = useState<any>(null)
  const [isLoading, setIsLoading] = useState(false)

  const runDiagnostics = async () => {
    setIsLoading(true)
    const results: any = {
      timestamp: new Date().toISOString(),
      tests: {},
    }

    try {
      // Test 1: Environment Variables
      results.tests.envVars = {
        name: "Environment Variables",
        status: "success",
        details: {
          supabaseUrl: !!process.env.NEXT_PUBLIC_SUPABASE_URL,
          supabaseKey: !!process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY,
          urlValue: process.env.NEXT_PUBLIC_SUPABASE_URL?.substring(0, 20) + "...",
        },
      }

      // Test 2: Supabase Connection
      try {
        const { data, error } = await supabase.auth.getSession()
        results.tests.supabaseConnection = {
          name: "Supabase Connection",
          status: error ? "error" : "success",
          details: {
            connected: !error,
            session: !!data.session,
            error: error?.message,
          },
        }
      } catch (err) {
        results.tests.supabaseConnection = {
          name: "Supabase Connection",
          status: "error",
          details: { error: err instanceof Error ? err.message : "Unknown error" },
        }
      }

      // Test 3: GitHub OAuth Configuration
      try {
        // This will fail but we can catch the error to see if OAuth is configured
        await supabase.auth.signInWithOAuth({
          provider: "github",
          options: { redirectTo: "test" },
        })
      } catch (err: any) {
        results.tests.githubOAuth = {
          name: "GitHub OAuth Setup",
          status: err.message?.includes("not enabled") ? "error" : "warning",
          details: {
            configured: !err.message?.includes("not enabled"),
            error: err.message,
          },
        }
      }

      // Test 4: Network Connectivity
      try {
        const response = await fetch("https://api.github.com/", { method: "HEAD" })
        results.tests.networkConnectivity = {
          name: "Network Connectivity",
          status: response.ok ? "success" : "error",
          details: {
            githubApi: response.ok,
            status: response.status,
          },
        }
      } catch (err) {
        results.tests.networkConnectivity = {
          name: "Network Connectivity",
          status: "error",
          details: { error: err instanceof Error ? err.message : "Network error" },
        }
      }

      // Test 5: Browser Environment
      results.tests.browserEnv = {
        name: "Browser Environment",
        status: "success",
        details: {
          localStorage: typeof localStorage !== "undefined",
          sessionStorage: typeof sessionStorage !== "undefined",
          cookies: typeof document !== "undefined" && document.cookie !== undefined,
          https: window.location.protocol === "https:" || window.location.hostname === "localhost",
        },
      }

      setTestResults(results)
    } catch (error) {
      console.error("Diagnostics error:", error)
      results.tests.diagnosticsError = {
        name: "Diagnostics Error",
        status: "error",
        details: { error: error instanceof Error ? error.message : "Unknown error" },
      }
      setTestResults(results)
    } finally {
      setIsLoading(false)
    }
  }

  const getStatusIcon = (status: string) => {
    switch (status) {
      case "success":
        return <CheckCircle className="h-4 w-4 text-green-400" />
      case "warning":
        return <AlertTriangle className="h-4 w-4 text-yellow-400" />
      case "error":
        return <XCircle className="h-4 w-4 text-red-400" />
      default:
        return <RefreshCw className="h-4 w-4 text-gray-400" />
    }
  }

  const getStatusColor = (status: string) => {
    switch (status) {
      case "success":
        return "border-green-500/50 bg-green-900/20"
      case "warning":
        return "border-yellow-500/50 bg-yellow-900/20"
      case "error":
        return "border-red-500/50 bg-red-900/20"
      default:
        return "border-gray-500/50 bg-gray-900/20"
    }
  }

  return (
    <Card className="bg-gray-800/30 border-gray-700/50">
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <AlertTriangle className="h-5 w-5 text-yellow-400" />
          OAuth Diagnostics
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        <Button onClick={runDiagnostics} disabled={isLoading} className="w-full">
          {isLoading ? (
            <>
              <RefreshCw className="h-4 w-4 mr-2 animate-spin" />
              Running Diagnostics...
            </>
          ) : (
            "Run OAuth Diagnostics"
          )}
        </Button>

        {testResults && (
          <div className="space-y-3">
            <div className="text-sm text-gray-400">Last run: {new Date(testResults.timestamp).toLocaleString()}</div>

            {Object.entries(testResults.tests).map(([key, test]: [string, any]) => (
              <Card key={key} className={`${getStatusColor(test.status)} border`}>
                <CardContent className="p-4">
                  <div className="flex items-center justify-between mb-2">
                    <h4 className="font-semibold flex items-center gap-2">
                      {getStatusIcon(test.status)}
                      {test.name}
                    </h4>
                    <Badge variant={test.status === "success" ? "default" : "destructive"}>
                      {test.status.toUpperCase()}
                    </Badge>
                  </div>
                  <div className="text-sm space-y-1">
                    {Object.entries(test.details).map(([detailKey, value]: [string, any]) => (
                      <div key={detailKey} className="flex justify-between">
                        <span className="text-gray-400">{detailKey}:</span>
                        <span className={typeof value === "boolean" ? (value ? "text-green-400" : "text-red-400") : ""}>
                          {typeof value === "boolean" ? (value ? "✅" : "❌") : String(value)}
                        </span>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        )}
      </CardContent>
    </Card>
  )
}

</code>

components\theme-provider.tsx:
<code>
"use client"
import { ThemeProvider as NextThemesProvider } from "next-themes"
import type { ThemeProviderProps } from "next-themes"

export function ThemeProvider({ children, ...props }: ThemeProviderProps) {
  return (
    <NextThemesProvider attribute="class" defaultTheme="dark" enableSystem={false} {...props}>
      {children}
    </NextThemesProvider>
  )
}

</code>

components\theme-toggle.tsx:
<code>
"use client"
import { Moon, Sun } from "lucide-react"
import { useTheme } from "next-themes"

import { Button } from "@/components/ui/button"

export function ThemeToggle() {
  const { theme, setTheme } = useTheme()

  return (
    <Button
      variant="ghost"
      size="sm"
      onClick={() => setTheme(theme === "light" ? "dark" : "light")}
      className="text-gray-400 hover:text-white dark:text-gray-400 dark:hover:text-white"
    >
      <Sun className="h-4 w-4 rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0" />
      <Moon className="absolute h-4 w-4 rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100" />
      <span className="sr-only">Toggle theme</span>
    </Button>
  )
}

</code>

components\token-management.tsx:
<code>
import React, { useState } from 'react';
import { Settings, Trash2, Plus, AlertTriangle, CheckCircle, ExternalLink, ShieldAlert } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Alert, AlertDescription } from '@/components/ui/alert';
import GitHubTokenPopup from './github-token-popup';
import { useAuth } from './auth-provider';

export default function TokenManagement() {
  const { profile, updateToken, deleteToken, isTokenInvalid } = useAuth();
  const [showTokenPopup, setShowTokenPopup] = useState(false);
  const [isDeleting, setIsDeleting] = useState(false);
  const [showDeleteConfirm, setShowDeleteConfirm] = useState(false);
  const [isSubmitting, setIsSubmitting] = useState(false);

  const currentToken = profile?.github_pat_token;

  const handleDeleteToken = async () => {
    setIsDeleting(true);
    try {
      await deleteToken();
      setShowDeleteConfirm(false);
    } catch (error) {
      console.error('Error deleting token:', error);
    } finally {
      setIsDeleting(false);
    }
  };

  const handleTokenSubmit = async (token: string) => {
    setIsSubmitting(true);
    try {
      await updateToken(token);
      setShowTokenPopup(false);
    } catch (error) {
      console.error('Error updating token:', error);
    } finally {
      setIsSubmitting(false);
    }
  };

  const maskedToken = currentToken ? `${currentToken.substring(0, 8)}${'*'.repeat(32)}` : 'No token set';

  return (
    <>
      <Card className="w-full max-w-2xl">
        <CardHeader>
          <div className="flex items-center gap-2">
            <Settings className="h-5 w-5" />
            <CardTitle>GitHub Token Management</CardTitle>
          </div>
          <CardDescription>
            Manage your GitHub Personal Access Token for repository operations
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-6">
          {/* Current Token Status */}
          <div className="space-y-3">
            <h3 className="font-medium">Current Token Status</h3>
            {/* ✨ NEW DYNAMIC STATUS ALERT ✨ */}
            {isTokenInvalid && currentToken && (
              <Alert variant="destructive">
                <ShieldAlert className="h-4 w-4" />
                <AlertDescription>
                  Your saved token is invalid or has expired. Please delete it and generate a new one.
                </AlertDescription>
              </Alert>
            )}
            <div className="flex items-center justify-between p-3 bg-muted rounded-lg">
              <div className="flex items-center gap-3">
                {currentToken && !isTokenInvalid ? (
                  <CheckCircle className="h-5 w-5 text-green-500" />
                ) : (
                  <AlertTriangle className={`h-5 w-5 ${isTokenInvalid ? 'text-red-500' : 'text-yellow-500'}`} />
                )}
                <div>
                  <p className="font-mono text-sm">{maskedToken}</p>
                  <p className={`text-xs ${isTokenInvalid ? 'text-red-500' : 'text-muted-foreground'}`}>
                    {isTokenInvalid ? 'Token is invalid' : currentToken ? 'Token is active' : 'No token configured'}
                  </p>
                </div>
              </div>
              {currentToken && (
                <Button
                  variant="destructive"
                  size="sm"
                  onClick={() => setShowDeleteConfirm(true)}
                  disabled={isDeleting}
                >
                  <Trash2 className="h-4 w-4 mr-2" />
                  Delete
                </Button>
              )}
            </div>
          </div>

          {/* Token Permissions Check */}
          {currentToken && (
            <Alert>
              <AlertTriangle className="h-4 w-4" />
              <AlertDescription>
                <strong>Having issues with delete functionality?</strong> Your token might be missing required scopes. 
                Generate a new token with all required permissions.
              </AlertDescription>
            </Alert>
          )}

          {/* Action Buttons */}
          <div className="flex gap-3">
            <Button
              onClick={() => setShowTokenPopup(true)}
              className="flex-1"
              variant={currentToken ? "outline" : "default"}
            >
              <Plus className="h-4 w-4 mr-2" />
              {currentToken ? 'Update Token' : 'Add Token'}
            </Button>
            
            <Button
              variant="outline"
              onClick={() => window.open('https://github.com/settings/tokens', '_blank')}
            >
              <ExternalLink className="h-4 w-4 mr-2" />
              GitHub Settings
            </Button>
          </div>

          {/* Help Section */}
          <div className="bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg p-4">
            <h4 className="font-medium text-blue-800 dark:text-blue-200 mb-2">
              🔧 Token Issues? Common Solutions:
            </h4>
            <ul className="text-sm text-blue-700 dark:text-blue-300 space-y-1">
              <li>• <strong>Lost access after system update?</strong> Recent authentication improvements may require re-entering your PAT</li>
              <li>• <strong>Delete not working?</strong> Generate new token with all 4 scopes</li>
              <li>• <strong>Wrong scopes selected?</strong> Delete current token and create new one</li>
              <li>• <strong>Token expired?</strong> GitHub tokens can expire, create a fresh one</li>
              <li>• <strong>Permission denied?</strong> Make sure you have admin access to repositories</li>
            </ul>
          </div>

          {/* Recovery Notice */}
          {!currentToken && (
            <Alert className="border-amber-200 bg-amber-50 dark:bg-amber-900/20">
              <AlertTriangle className="h-4 w-4 text-amber-600" />
              <AlertDescription className="text-amber-800 dark:text-amber-200">
                <strong>Need to re-enter your PAT?</strong> Recent system improvements may have reset authentication settings.
                This is a one-time setup to restore your repository access. Your data is safe and secure.
              </AlertDescription>
            </Alert>
          )}
        </CardContent>
      </Card>

      {/* Delete Confirmation Dialog */}
      {showDeleteConfirm && (
        <div className="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50 backdrop-blur-sm">
          <div className="bg-card text-card-foreground rounded-lg shadow-lg p-6 max-w-md w-full mx-4">
            <div className="flex items-center gap-3 mb-4">
              <AlertTriangle className="h-6 w-6 text-red-500" />
              <h3 className="text-lg font-semibold">Delete GitHub Token</h3>
            </div>
            <p className="text-muted-foreground mb-6">
              Are you sure you want to delete your GitHub token? You'll need to add a new one to continue using repository features.
            </p>
            <div className="flex gap-3">
              <Button
                variant="outline"
                onClick={() => setShowDeleteConfirm(false)}
                className="flex-1"
              >
                Cancel
              </Button>
              <Button
                variant="destructive"
                onClick={handleDeleteToken}
                disabled={isDeleting}
                className="flex-1"
              >
                {isDeleting ? 'Deleting...' : 'Delete Token'}
              </Button>
            </div>
          </div>
        </div>
      )}

      {/* Token Popup */}
      {showTokenPopup && (
        <GitHubTokenPopup
          onTokenSubmit={handleTokenSubmit}
          isSubmitting={isSubmitting}
          onClose={() => setShowTokenPopup(false)}
          onSkip={() => setShowTokenPopup(false)}
        />
      )}
    </>
  );
}

</code>

components\token-warning-badge.tsx:
<code>
'use client'

import React from 'react'
import { AlertTriangle, Settings } from 'lucide-react'
import { useAuth } from '@/components/auth-provider'

export default function TokenWarningBadge() {
  const { hasToken, showTokenPopup } = useAuth()

  // Don't show if user has token
  if (hasToken) return null

  return (
    <div className="bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800 rounded-lg p-3 mb-4">
      <div className="flex items-start gap-3">
        <AlertTriangle className="h-5 w-5 text-yellow-600 dark:text-yellow-400 flex-shrink-0 mt-0.5" />
        <div className="flex-1">
          <h3 className="font-semibold text-yellow-800 dark:text-yellow-200 text-sm mb-1">
            GitHub Token Not Configured
          </h3>
          <p className="text-yellow-700 dark:text-yellow-300 text-xs mb-3">
            Some features like <strong>bulk delete</strong>, <strong>repository creation</strong>, and <strong>advanced operations</strong> will not function properly without a GitHub Personal Access Token.
          </p>
          <button
            onClick={showTokenPopup}
            className="inline-flex items-center gap-2 bg-yellow-600 hover:bg-yellow-700 text-white px-3 py-1.5 rounded-md text-xs font-medium transition-colors"
          >
            <Settings className="h-3 w-3" />
            Configure Token Now
          </button>
        </div>
      </div>
    </div>
  )
}

</code>

hooks\use-mobile.tsx:
<code>
import * as React from "react"

const MOBILE_BREAKPOINT = 768

export function useIsMobile() {
  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)

  React.useEffect(() => {
    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)
    const onChange = () => {
      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    }
    mql.addEventListener("change", onChange)
    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    return () => mql.removeEventListener("change", onChange)
  }, [])

  return !!isMobile
}

</code>

hooks\use-toast.ts:
<code>
"use client"

// Inspired by react-hot-toast library
import * as React from "react"

import type {
  ToastActionElement,
  ToastProps,
} from "@/components/ui/toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }

</code>

lib\ai\actions\.keep:
<code>

</code>

lib\ai\actions\analyzeComplexity.ts:
<code>
import { AIResponse, UserContext } from '../types';
import { analyzeRepositoryComplexity } from '../analysis/repositoryAnalysis';

export const handleAnalyzeComplexity = async (
  context: UserContext,
  params: { repoName: string }
): Promise<AIResponse> => {
  const repo = context.repositories.find(r => r.name === params.repoName);

  if (!repo) {
    const errorMessage = `Error: Repository "${params.repoName}" not found.`;
    console.error(errorMessage);
    return { message: errorMessage, success: false };
  }

  try {
    const { complexity, reasoning } = await analyzeRepositoryComplexity(
      repo,
      context.userProfile ?? null
    );

    const responseMessage = `The complexity of the repository **${params.repoName}** is **${complexity}**.\n\n*Reasoning:*\n${reasoning}`;

    return { message: responseMessage, success: true };
  } catch (error: any) {
    console.error(`Error analyzing complexity for repo "${params.repoName}":`, error);
    return {
      message: `Sorry, an error occurred while analyzing the repository: ${error.message}`,
      success: false,
    };
  }
};


</code>

lib\ai\actions\createFile.ts:
<code>
// lib/ai/actions/createFile.ts

import { AIResponse, UserContext } from '../types';
import { GitHubAPIService } from '../../github-api';

interface CreateFileParams {
  repoName: string;
  filePath: string;
  content: string;
  commitMessage?: string;
}

/**
 * Handles the creation of a new file in a GitHub repository.
 */
export async function handleCreateFile(
  context: UserContext,
  params: CreateFileParams
): Promise<AIResponse> {
  const { repoName, filePath, content, commitMessage } = params;
  const { githubAccessToken, githubUsername } = context;

  if (!repoName || !filePath || !content) {
    return {
      message: 'To create a file, I need a repository name, a file path, and the content.',
      success: false,
    };
  }

  if (!githubAccessToken || !githubUsername) {
    return {
      message: 'GitHub credentials are not configured. Please connect your GitHub account.',
      success: false,
    };
  }

  try {
    const githubAPI = new GitHubAPIService(githubAccessToken, githubUsername);
    const result = await githubAPI.createFile({
      owner: githubUsername,
      repo: repoName,
      path: filePath,
      content: content,
      message: commitMessage || `feat: create ${filePath}`,
    });

    if (result.success) {
      return {
        message: `Successfully created file! You can find it at: ${result.url}`,
        success: true,
        data: result.file,
      };
    } else {
      return {
        message: `Failed to create file: ${result.error}`,
        success: false,
      };
    }
  } catch (error: any) {
    console.error('Error creating file:', error);
    return {
      message: `An unexpected error occurred: ${error.message}`,
      success: false,
    };
  }
}

</code>

lib\ai\actions\createRepo.ts:
<code>
// lib/ai/actions/createRepo.ts

import { AIResponse, UserContext } from '../types';
import { GitHubAPIService } from '../../github-api';

/**
 * Handles the creation of a new GitHub repository.
 * 
 * @param context The user's context, including their profile and repositories.
 * @param params The parameters for the action, expecting a 'name' for the repository.
 * @returns An AIResponse indicating the result of the operation.
 */
export async function handleCreateRepo(
  context: UserContext,
  params: { name: string }
): Promise<AIResponse> {
  const { name } = params;
  const { githubAccessToken, githubUsername } = context;

  if (!name) {
    return {
      message: 'You need to provide a name for the new repository.',
      success: false,
    };
  }

  if (!githubAccessToken || !githubUsername) {
    return {
      message: 'GitHub credentials are not configured. Please connect your GitHub account.',
      success: false,
    };
  }

  try {
    const githubAPI = new GitHubAPIService(githubAccessToken, githubUsername);
    const result = await githubAPI.createRepository({ name });

    if (result.success) {
      return {
        message: `Successfully created repository! You can find it at: ${result.url}`,
        success: true,
        data: result.repository,
      };
    } else {
      return {
        message: `Failed to create repository: ${result.error}`,
        success: false,
      };
    }
  } catch (error: any) {
    console.error('Error creating repository:', error);
    return {
      message: `An unexpected error occurred: ${error.message}`,
      success: false,
    };
  }
}

</code>

lib\ai\actions\deleteRepo.ts:
<code>
// lib/ai/actions/deleteRepo.ts

import { AIResponse, UserContext } from '../types';
import { GitHubAPIService } from '../../github-api';

/**
 * Handles the deletion of a GitHub repository.
 */
export async function handleDeleteRepo(
  context: UserContext,
  params: { name: string }
): Promise<AIResponse> {
  const { name } = params;
  const { githubAccessToken, githubUsername } = context;

  if (!name) {
    return {
      message: 'You need to provide the name of the repository to delete.',
      success: false,
    };
  }

  if (!githubAccessToken || !githubUsername) {
    return {
      message: 'GitHub credentials are not configured. Please connect your GitHub account.',
      success: false,
    };
  }

  try {
    const githubAPI = new GitHubAPIService(githubAccessToken, githubUsername);
    const result = await githubAPI.deleteRepository({ owner: githubUsername, name });

    if (result.success) {
      return {
        message: `Successfully deleted repository "${name}".`,
        success: true,
      };
    } else {
      return {
        message: `Failed to delete repository: ${result.error}`,
        success: false,
      };
    }
  } catch (error: any) {
    console.error('Error deleting repository:', error);
    return {
      message: `An unexpected error occurred: ${error.message}`,
      success: false,
    };
  }
}

</code>

lib\ai\actions\handleGeneralResponse.ts:
<code>
// lib/ai/actions/handleGeneralResponse.ts
import { AIResponse, UserContext } from '../types';
import { geminiAI } from '@/lib/gemini';

export const handleGeneralResponse = async (context: UserContext, params: any): Promise<AIResponse> => {
    const { repositories } = context;
    const { analyzeRepos, isCriticMode } = params;

    // Guard clause: if not analyzing or no repos, return a helpful message.
    if (!analyzeRepos || !repositories || repositories.length === 0) {
        const helpMessage = `I can help with various repository tasks. For example, you can ask me to "analyze my repositories," "generate a portfolio README," or "recommend projects for a frontend developer job." What would you like to do?`;
        return { message: helpMessage, success: true };
    }

    try {
        const repoSummaries = repositories
            .filter(repo => !repo.fork) // Focus on original work
            .slice(0, 20) // Limit to a reasonable number to avoid huge prompts
            .map(r => `- ${r.name}: ${r.description || 'No description.'} (Lang: ${r.language || 'N/A'}, Stars: ${r.stargazers_count})`)
            .join('\n');

        const criticPrompt = isCriticMode
            ? "Your tone should be brutally honest, direct, and witty, like a senior engineer who has seen it all. Don't hold back on constructive criticism. Point out weaknesses bluntly."
            : "Your tone should be encouraging, professional, and helpful, like a friendly mentor. Focus on positive aspects and frame suggestions constructively.";

        const prompt = `
            As a senior engineering manager reviewing a developer's GitHub portfolio, provide a high-level analysis of the following repositories.
            ${criticPrompt}

            Based on this list of repositories:
            ${repoSummaries}

            Please provide:
            1.  **Overall Impression:** A brief, one-paragraph summary of the portfolio's strengths and weaknesses.
            2.  **Key Strengths:** 2-3 bullet points highlighting what this portfolio does well (e.g., language diversity, project complexity, clear focus).
            3.  **Top Areas for Improvement:** 2-3 actionable bullet points on what to improve next (e.g., add project descriptions, create more complex projects, add live demos).

            Keep the entire response concise and easy to read in a chat window.
        `;

        const analysisMessage = await geminiAI.generateResponse(prompt);

        return {
            message: analysisMessage,
            success: true,
        };
    } catch (error: any) {
        console.error("Error in handleGeneralResponse calling Gemini:", error);
        return {
            message: "I had some trouble analyzing your repositories right now. Please check if the AI integration is configured correctly and try again.",
            success: false,
        };
    }
};

</code>

lib\ai\actions\handleInterviewAnswer.ts:
<code>
// lib/ai/actions/handleInterviewAnswer.ts

import { AIResponse, UserContext, InterviewState } from '../types';

/**
 * Generates a personalized README from the interview answers.
 */
function generatePersonalReadme(answers: Record<string, string>, repositories: any[]): string {
  let readme = `# Hello, I'm `;
  
  // Extract name from the first answer
  const nameMatch = answers.name_and_passion?.match(/(?:I'm|I am|My name is|Call me)\s+([A-Za-z]+)/i);
  const name = nameMatch ? nameMatch[1] : 'a Developer';
  
  readme += `${name}! 👋\n\n`;
  
  // Add a dynamic intro based on their passion
  if (answers.name_and_passion) {
    const passionText = answers.name_and_passion.replace(/(?:I'm|I am|My name is|Call me)\s+[A-Za-z]+[,.]?\s*/i, '');
    readme += `## � What Drives Me\n\n${passionText}\n\n`;
  }
  
  // Add hobbies section
  if (answers.hobbies_and_interests) {
    readme += `## 🎯 Beyond the Code\n\nWhen I'm not crafting solutions in code, you'll find me ${answers.hobbies_and_interests.toLowerCase()}. I believe these experiences make me a more creative and well-rounded developer!\n\n`;
  }
  
  // Add coding journey
  if (answers.coding_journey) {
    readme += `## 🚀 My Coding Journey\n\n${answers.coding_journey}\n\n`;
  }

  // Add tech stack
  if (answers.tech_stack_and_preferences) {
    readme += `## 🛠️ My Tech Arsenal\n\n${answers.tech_stack_and_preferences}\n\n`;
  }

  // Add featured project
  if (answers.proudest_achievement) {
    readme += `## 🏆 Project I'm Most Proud Of\n\n${answers.proudest_achievement}\n\n`;
  }

  // Add problem solving approach
  if (answers.problem_solving_approach) {
    readme += `## 🧠 How I Tackle Challenges\n\n${answers.problem_solving_approach}\n\n`;
  }

  // Add collaboration style
  if (answers.collaboration_style) {
    readme += `## 🤝 Working Together\n\n${answers.collaboration_style}\n\n`;
  }

  // Add repository showcase
  if (repositories && repositories.length > 0) {
    readme += `## 📈 Featured Repositories\n\n`;
    const topRepos = repositories.slice(0, 6);
    topRepos.forEach(repo => {
      const stars = repo.stargazers_count > 0 ? ` ⭐ ${repo.stargazers_count}` : '';
      readme += `- **[${repo.name}](${repo.html_url})**${stars} - ${repo.description || 'A showcase of my development skills'}\n`;
    });
    readme += `\n`;
  }

  // Add future aspirations
  if (answers.future_dreams) {
    readme += `## 🌟 Future Aspirations\n\n${answers.future_dreams}\n\n`;
  }

  // Add contact footer
  readme += `## 📬 Let's Connect!\n\n`;
  readme += `I'm always excited to collaborate on interesting projects or discuss new opportunities. Feel free to reach out!\n\n`;
  
  // Add GitHub stats
  readme += `---\n\n`;
  readme += `### 📊 GitHub Stats\n\n`;
  readme += `![GitHub Stats](https://github-readme-stats.vercel.app/api?username=YOUR_USERNAME&show_icons=true&theme=radical)\n\n`;
  readme += `![Top Languages](https://github-readme-stats.vercel.app/api/top-langs/?username=YOUR_USERNAME&layout=compact&theme=radical)\n\n`;
  
  readme += `*This personalized README was crafted through an AI-powered interview with NeatRepo - showcasing not just my code, but who I am as a developer and person.* ✨`;

  return readme;
}


/**
 * Handles a user's answer during a portfolio interview.
 */
export async function handleInterviewAnswer(
  context: UserContext,
  params: { answer: string }
): Promise<AIResponse> {
  const { interviewState } = context;
  const { answer } = params;

  if (!interviewState || !interviewState.isActive) {
    return {
      message: "There's no interview currently active. Say 'start interview' to begin.",
      success: false,
    };
  }

  // Create a new state object to avoid direct mutation
  const newInterviewState: InterviewState = JSON.parse(JSON.stringify(interviewState));

  // Store the answer
  const currentQuestionId = newInterviewState.questions[newInterviewState.currentQuestion].id;
  newInterviewState.answers[currentQuestionId] = answer;

  // Move to the next question
  newInterviewState.currentQuestion++;

  // Check if the interview is complete
  if (newInterviewState.currentQuestion >= newInterviewState.questions.length) {
    newInterviewState.isActive = false;
    const personalReadme = generatePersonalReadme(newInterviewState.answers, context.repositories);
    
    return {
      message: `🎉 Interview Complete! I've generated your personalized README based on our conversation:

---

${personalReadme}`,
      success: true,
      data: { 
        interviewState: newInterviewState,
        portfolioReadme: personalReadme,
        interviewActive: false,
        progress: 100
      },
    };
  }

  // Ask the next question
  const nextQuestion = newInterviewState.questions[newInterviewState.currentQuestion];
  const progress = ((newInterviewState.currentQuestion + 1) / newInterviewState.questions.length) * 100;
  const questionNumber = newInterviewState.currentQuestion + 1;
  const totalQuestions = newInterviewState.questions.length;
  
  // Generate encouraging transition messages
  const encouragements = [
    "Thanks for sharing that! 😊",
    "Great insight! 🌟", 
    "Love hearing about that! 💫",
    "Awesome response! 🚀",
    "Fantastic! 🎯",
    "Really appreciate that perspective! ✨",
    "That's so interesting! 🤔"
  ];
  
  const randomEncouragement = encouragements[Math.floor(Math.random() * encouragements.length)];
  
  return {
    message: `${randomEncouragement}

**Question ${questionNumber} of ${totalQuestions}:**
${nextQuestion.question}`,
    success: true,
    data: { 
      interviewState: newInterviewState,
      interviewActive: true,
      progress: progress
    },
  };
}

</code>

lib\ai\actions\recommendCVRepos.ts:
<code>
// lib/ai/actions/recommendCVRepos.ts

import { AIResponse, UserContext } from '../types';
import { RepositorySorter } from '../../github-api';

/**
 * Handles generating CV recommendations based on repository analysis.
 */
export async function handleRecommendCVRepos(
  context: UserContext,
  params: {}
): Promise<AIResponse> {
  const { repositories } = context;

  if (!repositories || repositories.length === 0) {
    return {
      message: "I need to know about your repositories first. Please connect your GitHub account and refresh.",
      success: false,
    };
  }

  try {
    // Note: This assumes repositories have been analyzed for complexity beforehand.
    const recommendations = RepositorySorter.generateCVRecommendations(repositories);
    
    let message = "Here are my recommendations for your CV based on your repositories:\n\n";

    recommendations.forEach(rec => {
      message += `**${rec.title}**\n`;
      message += `${rec.description}\n`;
      if (rec.repositories) {
        rec.repositories.forEach((repo: any) => {
          message += `- **${repo.name}**: ${repo.reason}\n`;
        });
      }
      message += '\n';
    });

    return {
      message,
      success: true,
      data: recommendations,
    };
  } catch (error: any) {
    console.error('Error generating CV recommendations:', error);
    return {
      message: `An unexpected error occurred while generating CV recommendations: ${error.message}`,
      success: false,
    };
  }
}

</code>

lib\ai\actions\recommendReposForJob.ts:
<code>
// lib/ai/actions/recommendReposForJob.ts
import { AIResponse, UserContext } from '../types';
import { geminiAI } from '@/lib/gemini';
import { GitHubRepo } from '@/app/dashboard/types';

export const recommendReposForJob = async (context: UserContext, params: { jobTitle: string }): Promise<AIResponse> => {
    const { jobTitle } = params;
    const { repositories } = context;

    if (!jobTitle) {
        return { message: "Please provide a job title so I can recommend the best repositories.", success: false };
    }
    if (!repositories || repositories.length === 0) {
        return { message: "I need your repositories to be loaded to make a recommendation.", success: false };
    }

    const originalRepos = repositories.filter(repo => !repo.fork);

    if (originalRepos.length === 0) {
        return { message: "You don't have any original repositories. I can't make a recommendation without them.", success: true, data: { recommendedRepos: [] } };
    }

    const repoList = originalRepos.map(r =>
        `- Name: ${r.name}, Description: ${r.description || 'N/A'}, Language: ${r.language || 'N/A'}, Stars: ${r.stargazers_count}`
    ).join('\n');

    // More robust prompt asking for a specific format (JSON)
    const prompt = `
        Analyze the following list of GitHub repositories and select the top 4 most relevant projects for a person applying to a "${jobTitle}" position.

        Consider technical relevance (frameworks, languages), project complexity, and overall appeal to a recruiter for this specific role.

        Repositories:
        ${repoList}

        Respond ONLY with a JSON array of strings containing the exact names of the 4 recommended repositories. For example: ["repo-one", "project-x", "another-repo", "final-choice"]. Do not include any other text, explanation, or markdown formatting.
    `;

    try {
        const rawResponse = await geminiAI.generateResponse(prompt);
        let recommendedRepoNames: string[] = [];

        // More robust parsing logic to find and parse the JSON array
        try {
            const jsonMatch = rawResponse.match(/\[[\s\S]*?\]/);
            if (jsonMatch) {
                recommendedRepoNames = JSON.parse(jsonMatch[0]);
            } else {
                console.warn("AI response was not valid JSON, falling back to comma-separated parsing.");
                recommendedRepoNames = rawResponse.split(',').map(name => name.trim().replace(/["']/g, ''));
            }
        } catch (parseError) {
            console.error("Failed to parse AI response, falling back to simple split:", parseError);
            recommendedRepoNames = rawResponse.split(',').map(name => name.trim().replace(/["']/g, ''));
        }
        
        // Filter the original repo list to find the full objects using a precise match
        const recommendedRepos = recommendedRepoNames
            .map(name => originalRepos.find(repo => repo.name.toLowerCase() === name.toLowerCase()))
            .filter((repo): repo is GitHubRepo => repo !== undefined); // Type guard to filter out any undefined matches

        const finalRepos = recommendedRepos.slice(0, 4);
        
        if (finalRepos.length === 0) {
            return {
                message: `I couldn't confidently select relevant repositories for a "${jobTitle}" role. Here are your top repositories by stars instead:`,
                success: true,
                data: { 
                    recommendedRepos: originalRepos
                        .sort((a, b) => (b.stargazers_count || 0) - (a.stargazers_count || 0))
                        .slice(0, 4)
                }
            };
        }

        let message = `### 🎯 Job Template for: **${jobTitle}**\n\nHere are the **${finalRepos.length} most relevant repositories** to showcase for this position:\n\n`;
        
        finalRepos.forEach((repo, index) => {
            message += `**${index + 1}. ${repo.name}**\n`;
            message += `   • Language: ${repo.language || 'Multiple'}\n`;
            message += `   • Stars: ${repo.stargazers_count || 0}\n`;
            message += `   • ${repo.description || 'No description available'}\n\n`;
        });
        
        message += `💡 **Pro tip**: Update the README files of these repositories to highlight features most relevant to ${jobTitle} roles!`;

        return {
            message,
            success: true,
            data: { recommendedRepos: finalRepos },
        };
    } catch (error: any) {
        console.error("Error in recommendReposForJob calling Gemini:", error);
        return {
            message: "I had trouble analyzing your repositories for that job title. Please check if the AI integration is configured correctly and try again.",
            success: false,
        };
    }
};
</code>

lib\ai\actions\sortRepos.ts:
<code>
// lib/ai/actions/sortRepos.ts

import { AIResponse, UserContext } from '../types';
import { RepositorySorter } from '../../github-api';
import { GitHubRepo } from '@/app/dashboard/types';

/**
 * Handles sorting the user's repositories based on specified criteria.
 */
export async function handleSortRepos(
  context: UserContext,
  params: { criteria: 'complexity' | 'date'; order: 'asc' | 'desc' }
): Promise<AIResponse> {
  const { criteria, order } = params;
  const { repositories } = context;

  if (!repositories || repositories.length === 0) {
    return {
      message: "I don't have any repositories to sort. Please connect your GitHub account and refresh.",
      success: false,
    };
  }

  let sortedRepos: GitHubRepo[] = [];
  let sortDescription = '';

  try {
    if (criteria === 'complexity') {
      // The RepositorySorter expects repositories to have a 'complexity' object.
      // This is a placeholder for now, as complexity analysis is its own action.
      // In a real scenario, we'd fetch this data first if it's not already available.
      sortedRepos = RepositorySorter.sortByComplexity(repositories, order);
      sortDescription = `by complexity (${order === 'asc' ? 'Simple → Advanced' : 'Advanced → Simple'})`;
    } else {
      // Default to sorting by date (updated_at)
      sortedRepos = [...repositories].sort((a, b) => {
        const dateA = new Date(a.updated_at).getTime();
        const dateB = new Date(b.updated_at).getTime();
        return order === 'asc' ? dateA - dateB : dateB - dateA;
      });
      sortDescription = `by last update date (${order === 'asc' ? 'Oldest → Newest' : 'Newest → Oldest'})`;
    }

    const repoList = sortedRepos.map(repo => `- **${repo.name}**`).join('\n');

    return {
      message: `I have sorted your repositories ${sortDescription}:\n\n${repoList}`,
      success: true,
      data: sortedRepos,
    };
  } catch (error: any) {
    console.error('Error sorting repositories:', error);
    return {
      message: `An unexpected error occurred while sorting: ${error.message}`,
      success: false,
    };
  }
}

</code>

lib\ai\actions\startInterview.ts:
<code>
// lib/ai/actions/startInterview.ts

import { AIResponse, UserContext, InterviewQuestion } from '../types';

const interviewQuestions: InterviewQuestion[] = [
  {
    id: 'name_and_passion',
    question: 'Hi there! 👋 Let\'s start with the basics - what\'s your name, and what do you love most about coding? What makes you jump out of bed excited to write code?'
  },
  {
    id: 'hobbies_and_interests',
    question: 'Great! Now tell me, what do you do when you\'re not coding? Any hobbies, interests, or activities that fuel your creativity? I\'m curious about the person behind the programmer! 🎨'
  },
  {
    id: 'coding_journey',
    question: 'Love hearing about that! 🌟 Now, let\'s dive into your coding story - what sparked your journey into programming? Was there a particular moment or project that made you think "This is it, this is what I want to do"?'
  },
  {
    id: 'tech_stack_and_preferences',
    question: 'Fantastic journey! 🚀 What technologies or programming languages make you feel most at home? Are there any tools or frameworks you\'re particularly excited about or want to master?'
  },
  {
    id: 'proudest_achievement',
    question: 'Awesome choices! 💪 Looking at your repositories, which project makes you proudest? Tell me the story - what challenges did you overcome, what did you learn, and why does it mean so much to you?'
  },
  {
    id: 'problem_solving_approach',
    question: 'That\'s impressive! 🧠 Everyone has their unique approach to tackling tough problems. How do you usually approach a challenging bug or a complex feature? What\'s your problem-solving superpower?'
  },
  {
    id: 'collaboration_style',
    question: 'Smart approach! 🤝 Tell me about your collaboration style - do you prefer pair programming, code reviews, leading teams, or working solo? What brings out your best work in a team environment?'
  },
  {
    id: 'future_dreams',
    question: 'Perfect! 🌈 Finally, let\'s talk dreams and aspirations - where do you see yourself in the next few years? What kind of impact do you hope to make through your code? Any wild ideas or projects you\'d love to tackle?'
  }
];

/**
 * Handles starting a new portfolio interview.
 */
export async function handleStartInterview(
  context: UserContext,
  params: {}
): Promise<AIResponse> {
  
  // Initialize the interview state
  const newInterviewState = {
    isActive: true,
    currentQuestion: 0,
    questions: interviewQuestions,
    answers: {},
  };

  const firstQuestion = interviewQuestions[0];
  const progress = (1 / interviewQuestions.length) * 100;

  return {
    message: `🎉 Welcome to your Personal README Interview! 

This quick interview will help me create a personalized README that showcases not just your code, but YOU as a developer and person.

We'll go through ${interviewQuestions.length} fun questions that should take about 5-10 minutes. Ready? Let's dive in!

**Question 1 of ${interviewQuestions.length}:**
${firstQuestion.question}`,
    success: true,
    data: { 
      interviewState: newInterviewState,
      interviewActive: true,
      progress: progress
    },
  };
}

</code>

lib\ai\analysis\.keep:
<code>

</code>

lib\ai\analysis\repositoryAnalysis.ts:
<code>
// lib/ai/analysis/repositoryAnalysis.ts

import { Repository } from '@/lib/repository-sorter';
import { geminiAI } from '@/lib/gemini';
import { buildRepositoryAnalysisPrompt } from '../prompts/analysisPrompts';
import { UserProfile } from '../types';

/**
 * Analyzes a list of repositories for language stats and key highlights.
 */
export const analyzeRepositories = (repos: Repository[]) => {
  const languages: Record<string, number> = {};
  let totalStars = 0;
  let mostStarredRepo: Repository | null = null;
  let maxStars = -1;

  repos.forEach(repo => {
    if (repo.language) {
      languages[repo.language] = (languages[repo.language] || 0) + 1;
    }
    totalStars += repo.stargazers_count || 0;
    if ((repo.stargazers_count || 0) > maxStars) {
      maxStars = repo.stargazers_count || 0;
      mostStarredRepo = repo;
    }
  });

  const primaryLanguages = Object.entries(languages)
    .sort(([, a], [, b]) => b - a)
    .slice(0, 3)
    .map(([lang]) => lang);

  return {
    primaryLanguages,
    totalStars,
    mostStarredRepo,
    totalRepos: repos.length,
    languages
  };
};

/**
 * Gets the most recently updated projects from a list of repositories.
 */
export const getRecentProjects = (repos: Repository[], count: number = 3) => {
  return repos
    .filter(repo => !repo.private) // Exclude private repos for showcases
    .sort((a, b) => new Date(b.updated_at).getTime() - new Date(a.updated_at).getTime())
    .slice(0, count);
};

/**
 * Analyzes the complexity of a repository.
 */
export async function analyzeRepositoryComplexity(repo: Repository, userProfile: UserProfile | null): Promise<{ complexity: string, reasoning: string }> {
  const prompt = buildRepositoryAnalysisPrompt(repo, userProfile);
  const response = await geminiAI.generateResponse(prompt);
  const text = response;

  // Simple parsing, assuming the model returns "Complexity: [level]\nReasoning: [text]"
  const complexityMatch = text.match(/Complexity:\s*(.*)/);
  const reasoningMatch = text.match(/Reasoning:\s*([\s\S]*)/);

  const complexity = complexityMatch ? complexityMatch[1].trim() : 'Could not determine';
  const reasoning = reasoningMatch ? reasoningMatch[1].trim() : 'No reasoning provided.';

  return { complexity, reasoning };
}

</code>

lib\ai\prompts\.keep:
<code>

</code>

lib\ai\prompts\analysisPrompts.ts:
<code>
// lib/ai/prompts/analysisPrompts.ts

import { Repository } from '@/lib/repository-sorter';
import { UserProfile } from '../types';

export function buildRepositoryAnalysisPrompt(
  repo: Repository,
  userProfile: UserProfile | null
): string {
  let prompt = `🧠 **Repository Analysis Request**

You are a helpful AI assistant that helps developers improve their GitHub repositories before applying for internships or jobs.

The user will provide you a repository's structure and basic information. Based on this, your task is to analyze and give specific feedback across the following categories:

---

📁 **Repository Name**: ${repo.name || "Unknown"}
📝 **Description**: ${repo.description || "No description provided"}
📂 **Primary Language**: ${repo.language || "Unknown"}
⭐ **Stars**: ${repo.stargazers_count || 0}
🍴 **Forks**: ${repo.forks_count || 0}
🔗 **Repository URL**: ${repo.html_url || "Not available"}

`;

  if (userProfile) {
    prompt += '🧑‍💻 **User Profile**:\n';
    if (userProfile.bio) {
      prompt += `- Bio: ${userProfile.bio}\n`;
    }
    if (userProfile.techStack && userProfile.techStack.length > 0) {
      prompt += `- Tech stack: ${userProfile.techStack.join(', ')}\n`;
    }
    if (userProfile.interests && userProfile.interests.length > 0) {
      prompt += `- Interests: ${userProfile.interests.join(', ')}\n`;
    }
  }

  prompt += `
---

Return your analysis in **markdown** format with the following sections:

## ✅ What This Project Does
- Short summary of what the project is about (in 1-2 sentences)

## 🔍 How Recruiters Might See It
- Review from the perspective of a hiring manager or tech recruiter

## 🧹 Suggestions to Improve This Repo
- Documentation (e.g. missing sections?)
- File/folder structure (e.g. too deep, unclear names?)
- Code quality hints (if possible)
- Deployment and demo recommendations

## 🧠 How to Include This in Your Resume
- One-sentence resume bullet point in STAR format
- Tips to describe it during interview

## ⭐ Final Portfolio Score
- Give a rating from 1-10 based on how job-ready this repo is
- Brief explanation of the score

Keep the tone friendly but professional.`;

  return prompt;
}

</code>

lib\ai\types.ts:
<code>
// lib/ai/types.ts

import { GitHubRepo } from "@/app/dashboard/types";

// The context of the user, including their repos, preferences, and chat history
export interface UserProfile {
  name?: string;
  bio?: string;
  techStack?: string[];
  interests?: string[];
}

// Represents a single entry in the conversation history
export interface ConversationEntry {
  role: 'user' | 'assistant';
  content: string;
  timestamp: Date;
}

// The context of the user, including their repos, preferences, and chat history
export interface InterviewQuestion {
  id: string;
  question: string;
}

export interface InterviewState {
  isActive: boolean;
  currentQuestion: number;
  questions: InterviewQuestion[];
  answers: Record<string, string>;
}

export interface UserContext {
  repositories: GitHubRepo[];
  conversationHistory: ConversationEntry[];
  preferences: Record<string, any>;
  userProfile?: UserProfile | null;
  githubAccessToken?: string;
  githubUsername?: string;
  interviewState?: InterviewState;
}

// The action parsed from the user's message
export interface AIAction {
  type: string;
  intent: string;
  parameters: any;
  confidence: number;
}

// The response from the AI after executing an action
export interface AIResponse {
  message: string;
  success: boolean;
  action?: AIAction;
  data?: any;
}

</code>

lib\auth\profile-service.ts:
<code>
/**
 * Performs a lightweight check with the GitHub API to see if a token is valid.
 * @param token - The GitHub PAT to validate.
 * @returns {Promise<boolean>} - True if the token is valid, false otherwise.
 */
export const validateTokenService = async (token: string): Promise<boolean> => {
  try {
    console.log("🔍 PROFILE_SERVICE: Validating PAT with GitHub API...");
    const response = await fetch("https://api.github.com/user", {
      headers: {
        Authorization: `token ${token}`,
        Accept: "application/vnd.github.v3+json",
      },
    });

    if (response.status === 200) {
      console.log("✅ PROFILE_SERVICE: PAT is valid.");
      return true;
    }

    console.warn(`⚠️ PROFILE_SERVICE: PAT is invalid. GitHub API responded with ${response.status}.`);
    return false;

  } catch (error) {
    console.error("❌ PROFILE_SERVICE: Error during token validation network request:", error);
    return false; // Assume invalid on any network error
  }
};

import { supabase } from "@/lib/supabase";
import { User } from "@supabase/supabase-js";
import { UserProfile } from "@/components/auth/auth-context";


/**
 * Fetches a user's profile by calling our secure, server-side API route.
 * @param userId - The ID of the user.
 * @param user - The full Supabase user object.
 * @returns The user's profile.
 */
export const fetchProfileService = async (userId: string, user: User): Promise<UserProfile> => {
  try {
    console.log("🔍 PROFILE_SERVICE: Fetching profile via API route for user:", userId);
    
    const response = await fetch('/api/user/profile', { cache: 'no-store' }); // Ensure it's not cached

    if (!response.ok) {
      throw new Error(`API call failed with status: ${response.status}`);
    }

    const data: UserProfile | null = await response.json();

    if (data) {
      console.log("✅ PROFILE_SERVICE: Profile fetched successfully via API.");
      if (data.github_pat_token?.startsWith('gho_')) {
        data.github_pat_token = undefined;
      }
      return data;
    }

    // API returned null, meaning profile doesn't exist yet. Create it.
    console.log('🔧 PROFILE_SERVICE: Profile not found via API, creating a new one...');
    const githubUsername = user.user_metadata?.user_name || user.email?.split('@')[0] || `user_${userId.substring(0, 8)}`;
    const newProfile: UserProfile = {
      id: userId,
      github_username: githubUsername,
      display_name: user.user_metadata?.full_name || user.user_metadata?.name,
      avatar_url: user.user_metadata?.avatar_url,
    };

    const { error: insertError } = await supabase.from('user_profiles').insert(newProfile);
    if (insertError) {
      console.error("❌ PROFILE_SERVICE: Error creating profile after API check:", insertError);
    } else {
      console.log("✅ PROFILE_SERVICE: New basic profile created successfully.");
    }
    return newProfile;

  } catch (err) {
    console.error('❌ PROFILE_SERVICE: Fetch/create failed. Building fallback profile.', err);

    const fallbackProfile: UserProfile = {
      id: userId,
      github_username: user.user_metadata?.user_name || 'user',
      avatar_url: user.user_metadata?.avatar_url,
      display_name: user.user_metadata?.full_name || user.user_metadata?.name,
    };

    if (typeof window !== 'undefined') {
        const cachedPat = localStorage.getItem(`github_pat_token_${userId}`);
        if (cachedPat && !cachedPat.startsWith('gho_')) {
            console.log('🔄 PROFILE_SERVICE: Recovering PAT from localStorage for fallback profile.');
            fallbackProfile.github_pat_token = cachedPat;
        }
    }
    return fallbackProfile;
  }
};

/**
 * Updates or inserts a user's GitHub Personal Access Token (PAT) in the database.
 * @param userId - The ID of the user.
 * @param token - The GitHub PAT to save.
 */
export const updateTokenService = async (userId: string, token: string): Promise<void> => {
  console.log('💾 PROFILE_SERVICE: Saving PAT for user:', userId);

  const { error } = await supabase
    .from('user_profiles')
    .update({ github_pat_token: token, updated_at: new Date().toISOString() })
    .eq('id', userId);

  if (error) {
    console.error('❌ PROFILE_SERVICE: Error updating token:', error);
    throw error;
  }
  
  console.log('✅ PROFILE_SERVICE: PAT saved to database successfully.');
};

/**
 * Deletes a user's GitHub Personal Access Token (PAT) from the database.
 * @param userId - The ID of the user.
 */
export const deleteTokenService = async (userId: string): Promise<void> => {
  console.log('🗑️ PROFILE_SERVICE: Deleting PAT for user:', userId);

  const { error } = await supabase
    .from('user_profiles')
    .update({ github_pat_token: null, updated_at: new Date().toISOString() })
    .eq('id', userId);

  if (error) {
    console.error('❌ PROFILE_SERVICE: Error deleting token:', error);
    throw error;
  }
  
  console.log('✅ PROFILE_SERVICE: PAT deleted from database successfully.');
};
</code>

lib\ai-assistant.ts:
<code>
import { AIAction, AIResponse, UserContext, ConversationEntry } from './ai/types';

// Action Handlers
import { handleAnalyzeComplexity } from './ai/actions/analyzeComplexity';
import { handleGeneralResponse } from './ai/actions/handleGeneralResponse';
import { recommendReposForJob } from './ai/actions/recommendReposForJob';
import { handleCreateRepo } from './ai/actions/createRepo';
import { handleCreateFile } from './ai/actions/createFile';
import { handleDeleteRepo } from './ai/actions/deleteRepo';
import { handleSortRepos } from './ai/actions/sortRepos';
import { handleRecommendCVRepos } from './ai/actions/recommendCVRepos';
import { handleStartInterview } from './ai/actions/startInterview';
import { handleInterviewAnswer } from './ai/actions/handleInterviewAnswer';

// A map of action names to their handler functions
const actionHandlers: {
  [key: string]: (context: UserContext, params: any) => Promise<AIResponse>;
} = {
  create_repo: handleCreateRepo,
  create_file: handleCreateFile,
  delete_repo: handleDeleteRepo,
  sort_repos: handleSortRepos,
  recommend_cv_repos: handleRecommendCVRepos,
  start_interview: handleStartInterview,
  handle_interview_answer: handleInterviewAnswer,
  analyze_complexity: handleAnalyzeComplexity,
  recommend_repos_for_job: recommendReposForJob,
  general_response: handleGeneralResponse,
};

/**
 * A simple intent parser based on keywords.
 * This is a placeholder and can be replaced with a more sophisticated NLU/NLP service.
 * @param message The user's message.
 * @returns An AIAction object representing the detected intent.
 */
function parseIntent(message: string, context: UserContext): AIAction {
  const lowerMessage = message.toLowerCase();

  // If an interview is active, treat any message as an answer.
  if (context.interviewState?.isActive) {
    return {
      type: 'handle_interview_answer',
      intent: 'User is answering an interview question.',
      parameters: { answer: message },
      confidence: 1.0, // Highest confidence because it's a stateful override
    };
  }

  if (lowerMessage.includes('create') && lowerMessage.includes('file')) {
    const fileMatch = message.match(/create a file named ['"]?([^'"\s]+)['"]?/i);
    const repoMatch = message.match(/in (?:repo|repository) ['"]?([^'"\s]+)['"]?/i);
    const contentMatch = message.match(/with content ['"](.*)['"]/i);

    const filePath = fileMatch ? fileMatch[1] : '';
    const repoName = repoMatch ? repoMatch[1] : '';
    const content = contentMatch ? contentMatch[1] : `// ${filePath} created by NeatRepo AI`;

    return {
      type: 'create_file',
      intent: 'User wants to create a new file in a repository.',
      parameters: { repoName, filePath, content },
      confidence: 0.9,
    };
  }

  if (lowerMessage.includes('start') && lowerMessage.includes('interview')) {
    return {
      type: 'start_interview',
      intent: 'User wants to start the portfolio interview.',
      parameters: {},
      confidence: 0.95,
    };
  }

  if ((lowerMessage.includes('cv') || lowerMessage.includes('resume')) && lowerMessage.includes('recommend')) {
    return {
      type: 'recommend_cv_repos',
      intent: 'User wants CV recommendations for their repositories.',
      parameters: {},
      confidence: 0.9,
    };
  }

  if (lowerMessage.includes('sort') && lowerMessage.includes('repos')) {
    let criteria: 'complexity' | 'date' = 'date';
    let order: 'asc' | 'desc' = 'desc';

    if (lowerMessage.includes('complexity')) {
      criteria = 'complexity';
    }

    if (lowerMessage.includes('asc') || lowerMessage.includes('simple to complex') || lowerMessage.includes('oldest')) {
      order = 'asc';
    }

    return {
      type: 'sort_repos',
      intent: 'User wants to sort repositories.',
      parameters: { criteria, order },
      confidence: 0.9,
    };
  }

  if (lowerMessage.includes('delete') && lowerMessage.includes('repo')) {
    const nameMatch = message.match(/(?:delete|remove) (?:repo|repository) ['"]?([^'"\s]+)['"]?/i);
    const repoName = nameMatch ? nameMatch[1] : '';
    return {
      type: 'delete_repo',
      intent: 'User wants to delete a repository.',
      parameters: { name: repoName },
      confidence: 0.9,
    };
  }

  if (lowerMessage.includes('create') && lowerMessage.includes('repo')) {
    const nameMatch = message.match(/(?:named?|called)\s+['"]?([^'"\s]+)['"]?/i);
    const repoName = nameMatch ? nameMatch[1] : '';
    return {
      type: 'create_repo',
      intent: 'User wants to create a new repository.',
      parameters: { name: repoName },
      confidence: 0.9,
    };
  }

  if (lowerMessage.includes('analyze') && lowerMessage.includes('complexity')) {
    // Extract repo name if available, e.g., "analyze complexity of my-repo"
    const repoNameMatch = lowerMessage.match(/of (.*?)$/);
    const repoName = repoNameMatch ? repoNameMatch[1].trim() : '';
    return {
      type: 'analyze_complexity',
      intent: 'User wants to analyze repository complexity.',
      parameters: { repoName }, // Pass repoName to handler
      confidence: 0.8,
    };
  }

  if (lowerMessage.includes('recommend') && (lowerMessage.includes('job') || lowerMessage.includes('position'))) {
    const jobTitleMatch = lowerMessage.match(/for (?:a |an )?(.*?)(?:\s+position|$)/);
    const jobTitle = jobTitleMatch ? jobTitleMatch[1].trim() : 'developer';
    return {
      type: 'recommend_repos_for_job',
      intent: 'User wants repository recommendations for a job application.',
      parameters: { jobTitle },
      confidence: 0.8,
    };
  }

  if (lowerMessage.includes('generate') && lowerMessage.includes('personal') && lowerMessage.includes('readme')) {
    return {
      type: 'start_interview',
      intent: 'User wants to generate a personal README through interview.',
      parameters: {},
      confidence: 0.95,
    };
  }

  if (lowerMessage.includes('generate') && lowerMessage.includes('portfolio') && lowerMessage.includes('readme')) {
    return {
      type: 'start_interview',
      intent: 'User wants to generate a portfolio README through interview.',
      parameters: {},
      confidence: 0.9,
    };
  }

  if (lowerMessage.includes('analyze') || lowerMessage.includes('structure') || lowerMessage.includes('suggestions') || lowerMessage.includes('improve') || lowerMessage.includes('think') || lowerMessage.includes('opinion')) {
    return {
      type: 'general_response',
      intent: 'User wants analysis or suggestions about their repositories.',
      parameters: { 
        originalMessage: message, 
        analyzeRepos: true,
        isCriticMode: context.preferences?.isCriticMode || false
      },
      confidence: 0.7,
    };
  }

  return {
    type: 'general_response',
    intent: 'General query or fallback.',
    parameters: { originalMessage: message },
    confidence: 0.5,
  };
}

export class AIAssistant {
  private static instance: AIAssistant;
  private userContext: UserContext;
  private conversationHistory: ConversationEntry[] = [];

  private constructor() {
    this.userContext = {
      repositories: [],
      githubUsername: undefined,
      githubAccessToken: undefined,
      conversationHistory: [],
      interviewState: undefined,
      preferences: {},
      userProfile: null,
    };
  }

  public static getInstance(): AIAssistant {
    if (!AIAssistant.instance) {
      AIAssistant.instance = new AIAssistant();
    }
    return AIAssistant.instance;
  }

  public updateUserContext(updates: Partial<UserContext>) {
    this.userContext = { ...this.userContext, ...updates };
  }

  public getContext(): UserContext {
    return this.userContext;
  }

  private addToConversationHistory(entry: ConversationEntry) {
    this.userContext.conversationHistory.push(entry);
  }

  public async processMessage(message: string): Promise<AIResponse> {
    this.addToConversationHistory({
      role: 'user',
      content: message,
      timestamp: new Date(),
    });

    const detectedAction = parseIntent(message, this.userContext);
    const handler = actionHandlers[detectedAction.type];

    if (!handler) {
      const errorResponse: AIResponse = {
        message: `Error: Action "${detectedAction.type}" is not supported.`,
        success: false,
      };
      this.addToConversationHistory({ role: 'assistant', content: errorResponse.message, timestamp: new Date() });
      return errorResponse;
    }

    try {
      const response = await handler(this.userContext, detectedAction.parameters);

      // Check if the action returned a state update for the interview
      if (response.data?.interviewState) {
        this.userContext.interviewState = response.data.interviewState;
      }

      this.addToConversationHistory({
        role: 'assistant',
        content: response.message,
        timestamp: new Date(),
      });

      return response;
    } catch (error: any) {
      console.error(`Error processing action "${detectedAction.type}":`, error);
      const errorResponse: AIResponse = {
        message: `Sorry, an error occurred: ${error.message}`,
        success: false,
      };
      this.addToConversationHistory({ role: 'assistant', content: errorResponse.message, timestamp: new Date() });
      return errorResponse;
    }
  }
}

// Singleton instance of the AI assistant, initialized with empty context.
export const aiAssistant = AIAssistant.getInstance();

</code>

lib\gemini.ts:
<code>
// Gemini AI integration using Gemini 2.5 Flash
import { GoogleGenerativeAI } from "@google/generative-ai"

interface ChatMessage {
  role: "user" | "assistant"
  content: string
}

export class GeminiAI {
  private apiKey: string
  private genAI: GoogleGenerativeAI
  private model: any

  constructor() {
    this.apiKey = process.env.NEXT_PUBLIC_GEMINI_API_KEY || ""
    if (!this.apiKey) {
      throw new Error("NEXT_PUBLIC_GEMINI_API_KEY environment variable is required")
    }

    this.genAI = new GoogleGenerativeAI(this.apiKey)
    // Using configurable Gemini model with environment-based settings
    this.model = this.genAI.getGenerativeModel({
      model: process.env.GEMINI_MODEL || "gemini-2.5-flash",
      generationConfig: {
        temperature: parseFloat(process.env.GEMINI_TEMPERATURE || "0.7"),
        topP: parseFloat(process.env.GEMINI_TOP_P || "0.8"),
        topK: parseInt(process.env.GEMINI_TOP_K || "40"),
        maxOutputTokens: parseInt(process.env.GEMINI_MAX_TOKENS || "8192"),
      },
    })
  }

  async generateResponse(
    message: string,
    conversationHistory: ChatMessage[] = [],
    systemPrompt?: string,
    signal?: AbortSignal,
  ): Promise<string> {
    try {
      // Build conversation context
      let prompt = ""

      if (systemPrompt) {
        prompt += `${systemPrompt}\n\n`
      }

      // Add conversation history
      if (conversationHistory.length > 0) {
        prompt += "Previous conversation:\n"
        conversationHistory.forEach((msg) => {
          prompt += `${msg.role === "user" ? "Human" : "Assistant"}: ${msg.content}\n`
        })
        prompt += "\n"
      }

      prompt += `Human: ${message}\nAssistant:`

      const result = await this.model.generateContent(prompt, { signal })
      const response = await result.response
      const text = response.text()

      if (!text) {
        throw new Error("Empty response from Gemini API")
      }

      return text
    } catch (error) {
      console.error("Gemini AI Error:", error)
      throw new Error(`Failed to generate response: ${error instanceof Error ? error.message : "Unknown error"}`)
    }
  }

  async analyzeRepository(
    repoData: any,
    userProfile?: {
      targetJob?: string
      techStack?: string
      userNotes?: string
    },
  ) {
    const prompt = this.buildRepositoryAnalysisPrompt(repoData, userProfile)

    try {
      const response = await this.generateResponse(
        prompt,
        [],
        "You are a helpful AI assistant that helps developers improve their GitHub repositories before applying for internships or jobs. Always respond in markdown format with the exact sections requested.",
      )

      // Try to parse structured response, fallback to raw response if parsing fails
      try {
        return {
          analysis: response,
          suggestions: this.extractSuggestionsFromAnalysis(response),
          score: this.extractScoreFromAnalysis(response),
          resumeBullet: this.extractResumeBulletFromAnalysis(response),
        }
      } catch {
        return {
          analysis: response,
          suggestions: [
            {
              type: "analysis",
              title: "Repository Analysis",
              description: response,
              priority: "medium",
            },
          ],
          score: 75,
          resumeBullet: `Built ${repoData.name} using ${repoData.language || "modern technologies"} with focus on clean code architecture and user experience.`,
        }
      }
    } catch (error) {
      console.error("Repository analysis error:", error)
      throw new Error("Failed to analyze repository")
    }
  }

  private buildRepositoryAnalysisPrompt(
    repoData: any,
    userProfile?: {
      targetJob?: string
      techStack?: string
      userNotes?: string
    },
  ): string {
    return `🧠 **Repository Analysis Request**

You are a helpful AI assistant that helps developers improve their GitHub repositories before applying for internships or jobs.

The user will provide you a repository's structure and basic information. Based on this, your task is to analyze and give specific feedback across the following categories:

---

📁 **Repository Name**: ${repoData.name || "Unknown"}
📝 **Description**: ${repoData.description || "No description provided"}
📂 **Primary Language**: ${repoData.language || "Unknown"}
⭐ **Stars**: ${repoData.stargazers_count || 0}
🍴 **Forks**: ${repoData.forks_count || 0}
🔗 **Repository URL**: ${repoData.html_url || "Not available"}

🧑‍💻 **User Profile**:
- Target job: ${userProfile?.targetJob || "General software development"} (e.g. frontend dev, fullstack intern, ML engineer)
- Tech stack: ${userProfile?.techStack || "Not specified"} (e.g. React, TypeScript, Python, FastAPI)
- Notes: ${userProfile?.userNotes || "No additional notes"}

---

Return your analysis in **markdown** format with the following sections:

## ✅ What This Project Does
- Short summary of what the project is about (in 1-2 sentences)

## 🔍 How Recruiters Might See It
- Review from the perspective of a hiring manager or tech recruiter

## 🧹 Suggestions to Improve This Repo
- Documentation (e.g. missing sections?)
- File/folder structure (e.g. too deep, unclear names?)
- Code quality hints (if possible)
- Deployment and demo recommendations

## 🧠 How to Include This in Your Resume
- One-sentence resume bullet point in STAR format  
- Tips to describe it during interview

## ⭐ Final Portfolio Score
- Give a rating from 1-10 based on how job-ready this repo is
- Brief explanation of the score

Keep the tone friendly but professional.

**Example Output Format:**

### ✅ What This Project Does
A grammar correction web app that uses OpenAI GPT API to detect and fix typos in English text. Users paste input and see fixes in real time.

### 🔍 How Recruiters Might See It
This is a solid showcase of frontend + AI integration. The use of GPT adds uniqueness, and the tech stack (React + TypeScript) is aligned with modern frontend roles. README is decent, but could use deployment link and example screenshots.

### 🧹 Suggestions to Improve This Repo
- Add live demo link on Vercel
- Include before/after grammar example in README
- Add unit tests for grammar fixing component
- Rename \`api/\` to \`services/\` for clarity
- Improve folder grouping (move utils under \`lib/\`)

### 🧠 How to Include This in Your Resume
> 🛠 Built a grammar correction web app using React and GPT API, enabling real-time feedback for over 300+ users, with clean TypeScript architecture.

Tip: In interviews, emphasize the API integration challenge and how you handled prompt engineering.

### ⭐ Final Portfolio Score
**7.5 / 10** — Good tech stack, cool idea, just missing polish (demos, tests, better README).`
  }

  private extractSuggestionsFromAnalysis(analysis: string): any[] {
    const suggestions = []
    const lines = analysis.split("\n")
    let inSuggestionsSection = false

    for (const line of lines) {
      if (line.includes("🧹") && line.includes("Suggestions")) {
        inSuggestionsSection = true
        continue
      }

      if (inSuggestionsSection && line.startsWith("###")) {
        inSuggestionsSection = false
        break
      }

      if (inSuggestionsSection && line.trim().startsWith("-")) {
        const suggestion = line.trim().substring(1).trim()
        if (suggestion) {
          suggestions.push({
            type: "improvement",
            title: suggestion.split(" ")[0] || "Improvement",
            description: suggestion,
            priority: "medium",
          })
        }
      }
    }

    return suggestions.length > 0
      ? suggestions
      : [
          {
            type: "general",
            title: "Code Review Needed",
            description: "Consider adding more documentation and examples",
            priority: "medium",
          },
        ]
  }

  private extractScoreFromAnalysis(analysis: string): number {
    const scoreMatch = analysis.match(/(\d+(?:\.\d+)?)\s*\/\s*10/)
    if (scoreMatch) {
      return Number.parseFloat(scoreMatch[1]) * 10 // Convert to 100-point scale
    }
    return 75 // Default score
  }

  private extractResumeBulletFromAnalysis(analysis: string): string {
    const lines = analysis.split("\n")
    let inResumeSection = false

    for (const line of lines) {
      if (line.includes("🧠") && line.includes("Resume")) {
        inResumeSection = true
        continue
      }

      if (inResumeSection && line.startsWith("###")) {
        inResumeSection = false
        break
      }

      if (inResumeSection && line.trim().startsWith(">")) {
        return line.trim().substring(1).trim()
      }
    }

    return "Built a comprehensive application showcasing modern development practices and clean architecture."
  }

  async generateReadme(repoData: any) {
    const prompt = `Generate a comprehensive README.md for this GitHub repository:
    
    Repository: ${repoData.name}
    Description: ${repoData.description}
    Language: ${repoData.language}
    
    Include sections for:
    - Project description
    - Features
    - Installation
    - Usage
    - Contributing
    - License
    
    Make it professional and informative.`

    try {
      return await this.generateResponse(
        prompt,
        [],
        "You are a technical writer creating professional README documentation.",
      )
    } catch (error) {
      console.error("README generation error:", error)
      // Fallback README
      return `# ${repoData.name}

${repoData.description || "A project built with modern technologies."}

## Installation

\`\`\`bash
git clone ${repoData.clone_url || ""}
cd ${repoData.name}
npm install
\`\`\`

## Usage

Please refer to the documentation for usage instructions.

## Contributing

Contributions are welcome! Please feel free to submit a Pull Request.

## License

This project is licensed under the MIT License.`
    }
  }

  async analyzeRepositoryDetailed(
    repoData: any,
    options?: {
      readmeContent?: string
      folderStructure?: string
      userProfile?: {
        targetJob?: string
        techStack?: string
        userNotes?: string
      }
    },
  ) {
    const prompt = `🧠 **Detailed Repository Analysis Request**

You are a helpful AI assistant that helps developers improve their GitHub repositories before applying for internships or jobs.

The user will provide you a repository's structure and basic information like the README content. Based on this, your task is to analyze and give specific feedback across the following categories:

---

📁 **Repository Name**: ${repoData.name || "Unknown"}
📝 **README.md Content**: 
${options?.readmeContent || "No README content provided"}

📂 **Folder Structure**:
${options?.folderStructure || "No folder structure provided"}

🔗 **Repository Details**:
- Description: ${repoData.description || "No description"}
- Language: ${repoData.language || "Unknown"}
- Stars: ${repoData.stargazers_count || 0}
- Forks: ${repoData.forks_count || 0}
- URL: ${repoData.html_url || "Not available"}

🧑‍💻 **User Profile**:
- Target job: ${options?.userProfile?.targetJob || "General software development"} (e.g. frontend dev, fullstack intern, ML engineer)
- Tech stack: ${options?.userProfile?.techStack || "Not specified"} (e.g. React, TypeScript, Python, FastAPI)
- Notes: ${options?.userProfile?.userNotes || "No additional notes"}

---

Return your analysis in **markdown** format with the following sections:

## ✅ What This Project Does
- Short summary of what the project is about (in 1-2 sentences)

## 🔍 How Recruiters Might See It
- Review from the perspective of a hiring manager or tech recruiter
- Alignment with target job role

## 🧹 Suggestions to Improve This Repo
- Documentation improvements (missing sections, clarity issues)
- File/folder structure recommendations
- Code quality and organization hints
- Deployment and demo suggestions
- Missing features or enhancements

## 🧠 How to Include This in Your Resume
- One-sentence resume bullet point in STAR format (Situation, Task, Action, Result)
- Tips to describe it during interview
- Key technical skills to highlight

## ⭐ Final Portfolio Score
- Give a rating from 1-10 based on how job-ready this repo is
- Brief explanation of the score with specific areas for improvement

Keep the tone friendly but professional. Be specific and actionable in your suggestions.`

    try {
      const response = await this.generateResponse(
        prompt,
        [],
        "You are a senior software engineer and technical recruiter helping developers improve their GitHub portfolios for job applications. Always respond in clean markdown format.",
      )

      return {
        analysis: response,
        suggestions: this.extractSuggestionsFromAnalysis(response),
        score: this.extractScoreFromAnalysis(response),
        resumeBullet: this.extractResumeBulletFromAnalysis(response),
        recruitersView: this.extractRecruitersViewFromAnalysis(response),
      }
    } catch (error) {
      console.error("Detailed repository analysis error:", error)
      throw new Error("Failed to analyze repository in detail")
    }
  }

  private extractRecruitersViewFromAnalysis(analysis: string): string {
    const lines = analysis.split("\n")
    let inRecruitersSection = false
    let content = ""

    for (const line of lines) {
      if (line.includes("🔍") && line.includes("Recruiters")) {
        inRecruitersSection = true
        continue
      }

      if (inRecruitersSection && line.startsWith("##")) {
        break
      }

      if (inRecruitersSection && line.trim()) {
        content += line.trim() + " "
      }
    }

    return (
      content.trim() || "This repository shows good technical skills and would be interesting to potential employers."
    )
  }

  async generateCommitMessage(changes: string[]) {
    const prompt = `Generate a clear, conventional commit message for these changes:
    
    Changes:
    ${changes.join("\n")}
    
    Follow conventional commit format (feat:, fix:, docs:, etc.)`

    try {
      return await this.generateResponse(
        prompt,
        [],
        "You are a developer creating conventional commit messages. Keep them concise and clear.",
      )
    } catch (error) {
      console.error("Commit message generation error:", error)
      return "feat: update project files and documentation"
    }
  }
}

export const geminiAI = new GeminiAI()

</code>

lib\github-api.ts:
<code>
// GitHub API Integration for Real Actions
import { Octokit } from "@octokit/rest";

export interface CreateRepoParams {
  name: string;
  description?: string;
  private?: boolean;
  auto_init?: boolean;
  gitignore_template?: string;
  license_template?: string;
}

export interface CreateFileParams {
  owner: string;
  repo: string;
  path: string;
  content: string;
  message: string;
  branch?: string;
}

interface DeleteRepoParams {
  owner: string;
  name: string;
}

export interface RepositoryComplexity {
  score: number;
  factors: {
    languages: number;
    fileCount: number;
    dependencies: number;
    architecture: number;
    documentation: number;
  };
  level: 'Simple' | 'Intermediate' | 'Complex' | 'Advanced';
  reasoning: string;
}

export class GitHubAPIService {
  private octokit: Octokit;
  private username: string;

  constructor(accessToken: string, username: string) {
    this.octokit = new Octokit({
      auth: accessToken,
    });
    this.username = username;
  }

  // 🚀 CREATE NEW REPOSITORY
  async createRepository(params: CreateRepoParams) {
    try {
      console.log(`🚀 Creating repository: ${params.name}`);

      // Test if octokit is properly initialized
      console.log('🔍 Testing Octokit instance:', typeof this.octokit);
      console.log('🔍 Testing rest property:', typeof this.octokit.rest);
      console.log('🔍 Testing repos property:', typeof this.octokit.rest?.repos);

      const response = await this.octokit.request('POST /user/repos', {
        name: params.name,
        description: params.description || `Repository created by NeatRepo`,
        private: params.private || false,
        auto_init: params.auto_init || true,
        gitignore_template: params.gitignore_template,
        license_template: params.license_template,
      });

      console.log(`✅ Repository created: ${response.data.html_url}`);
      return {
        success: true,
        repository: response.data,
        url: response.data.html_url,
      };
    } catch (error: any) {
      console.error('❌ Failed to create repository:', error);
      return {
        success: false,
        error: error.message || 'Failed to create repository',
      };
    }
  }

  // 📄 CREATE FILE IN REPOSITORY
  async createFile(params: CreateFileParams) {
    try {
      console.log(`📄 Creating file: ${params.path} in ${params.owner}/${params.repo}`);
      
      const content = Buffer.from(params.content).toString('base64');
      
      const response = await this.octokit.rest.repos.createOrUpdateFileContents({
        owner: params.owner,
        repo: params.repo,
        path: params.path,
        message: params.message,
        content: content,
        branch: params.branch || 'main',
      });

      console.log(`✅ File created: ${response.data.content?.html_url}`);
      return {
        success: true,
        file: response.data,
        url: response.data.content?.html_url,
      };
    } catch (error: any) {
      console.error('❌ Failed to create file:', error);
      return {
        success: false,
        error: error.message || 'Failed to create file',
      };
    }
  }

  // 🗑️ DELETE REPOSITORY
  async deleteRepository(params: DeleteRepoParams) {
    try {
      console.log(`🗑️ Deleting repository: ${params.owner}/${params.name}`);

      const response = await this.octokit.request('DELETE /repos/{owner}/{repo}', {
        owner: params.owner,
        repo: params.name,
      });

      console.log(`✅ Repository deleted: ${params.owner}/${params.name}`);
      return {
        success: true,
        message: `Repository ${params.name} has been permanently deleted`,
      };
    } catch (error: any) {
      console.error('❌ Failed to delete repository:', error);
      return {
        success: false,
        error: error.message || 'Failed to delete repository',
      };
    }
  }

  // 🧠 ANALYZE REPOSITORY COMPLEXITY
  async analyzeRepositoryComplexity(owner: string, repo: string): Promise<RepositoryComplexity> {
    try {
      console.log(`🧠 Analyzing complexity for: ${owner}/${repo}`);

      // Get repository details
      const repoData = await this.octokit.rest.repos.get({ owner, repo });
      
      // Get languages
      const languages = await this.octokit.rest.repos.listLanguages({ owner, repo });
      
      // Get repository contents
      const contents = await this.octokit.rest.repos.getContent({ 
        owner, 
        repo, 
        path: '' 
      });

      // Calculate complexity factors
      const languageCount = Object.keys(languages.data).length;
      const fileCount = Array.isArray(contents.data) ? contents.data.length : 1;
      
      // Check for package.json, requirements.txt, etc.
      let dependencyComplexity = 0;
      if (Array.isArray(contents.data)) {
        const hasPackageJson = contents.data.some(file => file.name === 'package.json');
        const hasRequirements = contents.data.some(file => file.name === 'requirements.txt');
        const hasCargoToml = contents.data.some(file => file.name === 'Cargo.toml');
        const hasPomXml = contents.data.some(file => file.name === 'pom.xml');
        
        dependencyComplexity = [hasPackageJson, hasRequirements, hasCargoToml, hasPomXml]
          .filter(Boolean).length * 2;
      }

      // Check for documentation
      const hasReadme = Array.isArray(contents.data) && 
        contents.data.some(file => file.name.toLowerCase().includes('readme'));
      const documentationScore = hasReadme ? 2 : 0;

      // Calculate architecture complexity (based on folder structure)
      const architectureScore = fileCount > 10 ? 3 : fileCount > 5 ? 2 : 1;

      // Calculate total complexity score
      const factors = {
        languages: languageCount,
        fileCount: Math.min(fileCount / 5, 5), // Normalize to max 5
        dependencies: dependencyComplexity,
        architecture: architectureScore,
        documentation: documentationScore,
      };

      const totalScore = Object.values(factors).reduce((sum, score) => sum + score, 0);
      
      // Determine complexity level
      let level: RepositoryComplexity['level'];
      let reasoning: string;

      if (totalScore <= 5) {
        level = 'Simple';
        reasoning = 'Basic project with minimal dependencies and straightforward structure';
      } else if (totalScore <= 10) {
        level = 'Intermediate';
        reasoning = 'Well-structured project with moderate complexity and dependencies';
      } else if (totalScore <= 15) {
        level = 'Complex';
        reasoning = 'Advanced project with multiple technologies and sophisticated architecture';
      } else {
        level = 'Advanced';
        reasoning = 'Highly complex project with extensive dependencies and advanced patterns';
      }

      console.log(`✅ Complexity analysis complete: ${level} (${totalScore})`);

      return {
        score: totalScore,
        factors,
        level,
        reasoning,
      };
    } catch (error: any) {
      console.error('❌ Failed to analyze repository complexity:', error);
      return {
        score: 0,
        factors: {
          languages: 0,
          fileCount: 0,
          dependencies: 0,
          architecture: 0,
          documentation: 0,
        },
        level: 'Simple',
        reasoning: 'Unable to analyze repository complexity',
      };
    }
  }

  // 📊 GET USER REPOSITORIES WITH COMPLEXITY
  async getRepositoriesWithComplexity() {
    try {
      console.log(`📊 Fetching repositories with complexity analysis...`);
      
      const repos = await this.octokit.rest.repos.listForAuthenticatedUser({
        sort: 'updated',
        per_page: 100,
      });

      const repositoriesWithComplexity = await Promise.all(
        repos.data.map(async (repo) => {
          const complexity = await this.analyzeRepositoryComplexity(repo.owner.login, repo.name);
          return {
            ...repo,
            complexity,
          };
        })
      );

      console.log(`✅ Analyzed ${repositoriesWithComplexity.length} repositories`);
      return repositoriesWithComplexity;
    } catch (error: any) {
      console.error('❌ Failed to fetch repositories with complexity:', error);
      throw new Error('Failed to analyze repositories');
    }
  }
}

// 🎯 REPOSITORY SORTING UTILITIES
export class RepositorySorter {
  static sortByComplexity(repositories: any[], order: 'asc' | 'desc' = 'asc') {
    return repositories.sort((a, b) => {
      const scoreA = a.complexity?.score || 0;
      const scoreB = b.complexity?.score || 0;
      return order === 'asc' ? scoreA - scoreB : scoreB - scoreA;
    });
  }

  static sortForCV(repositories: any[]) {
    // Sort repositories in optimal order for CV:
    // 1. Complex/Advanced projects first
    // 2. Well-documented projects
    // 3. Recent projects
    // 4. Projects with good naming
    
    return repositories.sort((a, b) => {
      // Primary: Complexity score (higher first)
      const complexityDiff = (b.complexity?.score || 0) - (a.complexity?.score || 0);
      if (complexityDiff !== 0) return complexityDiff;
      
      // Secondary: Documentation (has README)
      const aHasReadme = a.complexity?.factors?.documentation > 0 ? 1 : 0;
      const bHasReadme = b.complexity?.factors?.documentation > 0 ? 1 : 0;
      const docDiff = bHasReadme - aHasReadme;
      if (docDiff !== 0) return docDiff;
      
      // Tertiary: Recent updates
      const aDate = new Date(a.updated_at).getTime();
      const bDate = new Date(b.updated_at).getTime();
      return bDate - aDate;
    });
  }

  static generateCVRecommendations(repositories: any[]) {
    const sorted = this.sortForCV(repositories);
    const recommendations = [];

    // Top 5 repositories for CV
    const topRepos = sorted.slice(0, 5);
    
    recommendations.push({
      type: 'cv_order',
      title: '🎯 Recommended CV Order',
      description: 'These repositories should be featured prominently on your CV',
      repositories: topRepos.map((repo, index) => ({
        position: index + 1,
        name: repo.name,
        reason: this.getRecommendationReason(repo, index),
        complexity: repo.complexity?.level || 'Unknown',
      })),
    });

    // Improvement suggestions
    const improvements = this.generateImprovementSuggestions(repositories);
    recommendations.push(...improvements);

    return recommendations;
  }

  private static getRecommendationReason(repo: any, position: number): string {
    const complexity = repo.complexity?.level || 'Unknown';
    const hasReadme = repo.complexity?.factors?.documentation > 0;
    
    if (position === 0) {
      return `Lead project - ${complexity} complexity showcases your technical skills`;
    } else if (complexity === 'Advanced' || complexity === 'Complex') {
      return `Demonstrates advanced technical capabilities (${complexity})`;
    } else if (hasReadme) {
      return `Well-documented project shows professionalism`;
    } else {
      return `Recent project demonstrates current activity`;
    }
  }

  private static generateImprovementSuggestions(repositories: any[]) {
    const suggestions = [];
    
    // Check for repositories without README
    const noReadme = repositories.filter(repo => 
      repo.complexity?.factors?.documentation === 0
    );
    
    if (noReadme.length > 0) {
      suggestions.push({
        type: 'improvement',
        title: '📝 Add Documentation',
        description: 'These repositories would benefit from README files',
        repositories: noReadme.slice(0, 3).map(repo => ({
          name: repo.name,
          suggestion: 'Add a comprehensive README with project description, setup instructions, and usage examples',
        })),
      });
    }

    return suggestions;
  }
}

</code>

lib\repository-manager.ts:
<code>
// ULTRA-FAST repository manager - TARGET: 1-3 SECOND LOADING 🚀

// Custom error for invalid GitHub tokens
export class InvalidTokenError extends Error {
  constructor(message: string) {
    super(message);
    this.name = 'InvalidTokenError';
  }
}
class RepositoryManager {
  private static instance: RepositoryManager;
  private repositories: any[] = [];
  private lastFetch: number = 0;
  private isInitialized: boolean = false;
  private listeners: Set<(repos: any[]) => void> = new Set();
  private streamingListeners: Set<(repo: any) => void> = new Set();
  private isFetching: boolean = false;
  private loadingStartTime: number = 0;

  private constructor() {
    this.loadFromCache();
  }

  static getInstance(): RepositoryManager {
    if (!RepositoryManager.instance) {
      RepositoryManager.instance = new RepositoryManager();
    }
    return RepositoryManager.instance;
  }

  private loadFromCache(userId?: string) {
    // Skip on server side
    if (typeof window === 'undefined') return false;

    try {
      // Try user-specific cache first, then fall back to global cache
      const cacheKey = userId ? `github_repositories_${userId}` : 'github_repositories';
      const timeKey = userId ? `github_repositories_time_${userId}` : 'github_repositories_time';

      const cached = localStorage.getItem(cacheKey);
      const cacheTime = localStorage.getItem(timeKey);

      if (cached && cacheTime) {
        const timeSinceCache = Date.now() - parseInt(cacheTime);
        // 🚀 IMPROVED UX: Only use cache if very recent (5 minutes) for better freshness
        if (timeSinceCache < 300000) { // 5 minutes instead of 1 hour
          this.repositories = JSON.parse(cached);
          this.lastFetch = parseInt(cacheTime);
          this.isInitialized = true;
          console.log(`⚡ SINGLETON: Loaded ${this.repositories.length} repositories from ${userId ? 'user-specific' : 'global'} cache (${Math.round(timeSinceCache/1000)}s old)`);
          this.notifyListeners();
          return true;
        } else {
          console.log(`🔄 SINGLETON: Cache is stale (${Math.round(timeSinceCache/60000)} minutes old), will fetch fresh data`);
        }
      }
    } catch (error) {
      console.log('📁 SINGLETON: Cache load failed:', error);
    }
    return false;
  }

  private saveToCache(userId?: string) {
    // Skip on server side
    if (typeof window === 'undefined') return;

    try {
      // Save to user-specific cache if userId provided, otherwise global cache
      const cacheKey = userId ? `github_repositories_${userId}` : 'github_repositories';
      const timeKey = userId ? `github_repositories_time_${userId}` : 'github_repositories_time';

      localStorage.setItem(cacheKey, JSON.stringify(this.repositories));
      localStorage.setItem(timeKey, Date.now().toString());
      this.lastFetch = Date.now();
      console.log(`💾 SINGLETON: Repositories cached to ${userId ? 'user-specific' : 'global'} storage`);
    } catch (error) {
      console.log('📁 SINGLETON: Cache save failed:', error);
    }
  }

  private notifyListeners() {
    this.listeners.forEach(listener => listener([...this.repositories]));
  }

  subscribe(listener: (repos: any[]) => void): () => void {
    this.listeners.add(listener);
    // Immediately provide current data
    listener([...this.repositories]);
    
    return () => {
      this.listeners.delete(listener);
    };
  }

  getRepositories(): any[] {
    return [...this.repositories];
  }

  // Add streaming listener for real-time updates
  addStreamingListener(listener: (repo: any) => void): () => void {
    this.streamingListeners.add(listener);
    return () => {
      this.streamingListeners.delete(listener);
    };
  }

  private notifyStreamingListeners(repo: any) {
    this.streamingListeners.forEach(listener => {
      try {
        listener(repo);
      } catch (error) {
        console.error('🚨 SINGLETON: Streaming listener error:', error);
      }
    });
  }

  async fetchRepositories(token: string, forceRefresh = false, userId?: string): Promise<void> {
    // CRITICAL DEBUG: Log token information (safely)
    console.log('🔑 SINGLETON: Starting fetch with token:', {
      hasToken: !!token,
      tokenLength: token?.length,
      tokenPrefix: token?.substring(0, 7) + '...',
      forceRefresh
    });

    // Validate token before proceeding – if missing, try public-repo fallback instead of hard-erroring
    if (!token || token.trim() === '') {
      console.warn(' SINGLETON: No GitHub token – attempting public-repo fallback');

      // If we have the GitHub username cached we can still show public repos (read-only)
      if (typeof window !== 'undefined') {
        const cachedUsername =
          (userId ? localStorage.getItem(`github_username_${userId}`) : null) ||
          localStorage.getItem('github_username');

        if (cachedUsername) {
          try {
            const res = await fetch(`https://api.github.com/users/${cachedUsername}/repos?per_page=100`);
            if (res.ok) {
              this.repositories = await res.json();
              console.log(` SINGLETON: Loaded public repos for ${cachedUsername} (count: ${this.repositories.length})`);
              this.saveToCache(userId);
              this.notifyListeners();
              return; // Success – no token required
            }
            console.error(' SINGLETON: Public-repo fetch failed', res.status);
          } catch (publicErr) {
            console.error(' SINGLETON: Exception during public-repo fetch', publicErr);
          }
        }
      }

      // Still no data – propagate original error
      throw new Error('No GitHub token available for repository access');
    }

    // IMPROVED UX: Always fetch fresh data unless explicitly using cache
    // Only skip if we have recent data (less than 5 minutes old) and not forced
    if (!forceRefresh && this.repositories.length > 0) {
      const timeSinceLastFetch = Date.now() - this.lastFetch;
      if (timeSinceLastFetch < 300000) { // 5 minutes
        console.log(' SINGLETON: Using recent data, INSTANT LOAD!');
        console.log('⚡ SINGLETON: Using recent data, INSTANT LOAD!');
        return;
      } else {
        console.log('🔄 SINGLETON: Data is stale, fetching fresh repositories...');
      }
    }

    // Prevent multiple simultaneous fetches
    if (this.isFetching) {
      console.log('⏳ SINGLETON: Fetch already in progress');
      return;
    }

    this.isFetching = true;
    this.loadingStartTime = Date.now();

    try {
      console.log('🚀 SINGLETON: ULTRA-FAST FETCH STARTING...');

      // PARALLEL REQUESTS for maximum speed
      console.log('🌐 SINGLETON: Making parallel GitHub API requests...');
      const [userRepos, starredRepos] = await Promise.allSettled([
        fetch("https://api.github.com/user/repos?sort=updated&per_page=50", {
          headers: {
            Authorization: `token ${token}`,
            Accept: "application/vnd.github.v3+json",
          },
        }),
        fetch("https://api.github.com/user/starred?per_page=20", {
          headers: {
            Authorization: `token ${token}`,
            Accept: "application/vnd.github.v3+json",
          },
        })
      ]);

      // ✨ MODIFICATION: Check for 401 Unauthorized on userRepos
      if (userRepos.status === 'fulfilled' && userRepos.value.status === 401) {
        // If the token is invalid, throw our specific error
        throw new InvalidTokenError('The provided GitHub PAT is invalid, expired, or lacks repo scope.');
      }

      console.log('🌐 SINGLETON: API requests completed:', {
        userReposStatus: userRepos.status,
        starredReposStatus: starredRepos.status
      });

      let repos: any[] = [];

      // Process user repos
      if (userRepos.status === 'fulfilled' && userRepos.value.ok) {
        const userReposData = await userRepos.value.json();
        repos = userReposData;

        // STREAMING: Notify as data arrives
        userReposData.forEach((repo: any, index: number) => {
          setTimeout(() => {
            this.notifyStreamingListeners(repo);
          }, index * 10); // Stagger for smooth streaming effect
        });
      }

      const fetchTime = Date.now() - this.loadingStartTime;

      console.log(`🚀 ULTRA-FAST: Loaded ${repos.length} repositories in ${fetchTime}ms`);

      // PERFORMANCE METRICS
      if (fetchTime < 1000) {
        console.log('🏆 PERFORMANCE: SUB-1-SECOND LOADING ACHIEVED!');
      } else if (fetchTime < 2000) {
        console.log('⚡ PERFORMANCE: SUB-2-SECOND LOADING!');
      } else if (fetchTime < 3000) {
        console.log('✅ PERFORMANCE: SUB-3-SECOND LOADING!');
      }

      this.repositories = repos;
      this.lastFetch = Date.now();
      this.isInitialized = true;
      this.saveToCache(userId);
      this.notifyListeners();

    } catch (error) {
      console.error('❌ SINGLETON: Fetch error:', error);

      // 🚨 CRITICAL DEBUG: Log detailed error information
      if (error instanceof Error) {
        console.error('❌ SINGLETON: Error details:', {
          message: error.message,
          name: error.name,
          stack: error.stack
        });
      }

      // Check if it's a token-related error
      if (error instanceof InvalidTokenError) {
        console.error('🔑 SINGLETON: Token appears to be invalid or expired');
        // Clear cached data for invalid tokens
        this.clearCache();
      }

      // Fallback to cached data if available
      if (this.repositories.length > 0) {
        console.log('🔄 SINGLETON: Using cached data as fallback');
        this.notifyListeners();
      } else {
        // If no cached data, ensure listeners are still notified with empty array
        console.log('🔄 SINGLETON: No cached data available, notifying with empty state');
        this.notifyListeners();
      }
      throw error;
    } finally {
      this.isFetching = false;
      console.log('🔄 SINGLETON: Fetch operation completed, isFetching reset to false');
    }
  }

  isDataAvailable(): boolean {
    return this.repositories.length > 0;
  }

  getLastFetchTime(): number {
    return this.lastFetch;
  }

  async deleteRepository(token: string, owner: string, repoName: string): Promise<boolean> {
    try {
      const response = await fetch(`https://api.github.com/repos/${owner}/${repoName}`, {
        method: 'DELETE',
        headers: {
          'Authorization': `token ${token}`,
          'Accept': 'application/vnd.github.v3+json'
        },
      });

      if (response.status === 204) {
        console.log(`RepositoryManager: Successfully deleted ${owner}/${repoName}`);
        return true;
      } else {
        const errorData = await response.json();
        console.error(`RepositoryManager: Failed to delete ${owner}/${repoName}:`, errorData.message);
        return false;
      }
    } catch (error) {
      console.error(`RepositoryManager: Error during fetch for deleting ${owner}/${repoName}:`, error);
      return false;
    }
  }

  // 🎯 YOUTUBE-STYLE: Enhanced background sync with long-term resilience
  async backgroundSync(token: string): Promise<void> {
    console.log('🔄 SINGLETON: Background sync starting...');
    
    try {
      // Test token validity first before attempting sync
      const tokenTest = await fetch("https://api.github.com/user", {
        headers: {
          Authorization: `token ${token}`,
          Accept: "application/vnd.github.v3+json",
        },
      });

      if (!tokenTest.ok) {
        if (tokenTest.status === 401) {
          console.error('🔑 SINGLETON: GitHub token expired or invalid');
          // Clear cached data if token is invalid
          this.clearCache();
          throw new Error('GitHub token expired');
        }
        throw new Error(`GitHub API error: ${tokenTest.status}`);
      }

      // If we have stale data (older than 1 hour), force refresh
      const timeSinceLastFetch = Date.now() - this.lastFetch;
      const forceRefresh = timeSinceLastFetch > 3600000; // 1 hour
      
      if (forceRefresh) {
        console.log('🔄 SINGLETON: Data is very stale (>1h), forcing refresh...');
      }

      await this.fetchRepositories(token, forceRefresh);
      console.log('✅ SINGLETON: Background sync completed successfully');
    } catch (error) {
      console.error('❌ SINGLETON: Background sync failed:', error);
      
      // If sync fails but we have cached data, keep using it
      if (this.repositories.length > 0) {
        console.log('🔄 SINGLETON: Using cached data due to sync failure');
        this.notifyListeners();
      }
    }
  }

  // Clear cache method for token expiry scenarios
  private clearCache(userId?: string): void {
    if (typeof window !== 'undefined') {
      if (userId) {
        localStorage.removeItem(`github_repositories_${userId}`);
        localStorage.removeItem(`github_repositories_time_${userId}`);
        console.log(`🗑️ SINGLETON: User-specific cache cleared for ${userId}`);
      } else {
        localStorage.removeItem('github_repositories');
        localStorage.removeItem('github_repositories_time');
        console.log('🗑️ SINGLETON: Global cache cleared due to token issues');
      }
    }
  }
}

export const repositoryManager = RepositoryManager.getInstance();

</code>

lib\repository-sorter.ts:
<code>
// Repository Sorting and Complexity Analysis Engine
export interface Repository {
  id: number;
  name: string;
  full_name: string;
  description?: string;
  language?: string;
  stargazers_count: number;
  forks_count: number;
  updated_at: string;
  created_at: string;
  html_url: string;
  size?: number;
  open_issues_count?: number;
  has_issues?: boolean;
  has_projects?: boolean;
  has_wiki?: boolean;
  archived?: boolean;
  disabled?: boolean;
  pushed_at?: string;
  complexity?: RepositoryComplexity;
  topics?: string[];
  private?: boolean;
  owner?: {
    login: string;
    avatar_url: string;
  };
}

export interface RepositoryComplexity {
  score: number;
  level: 'Simple' | 'Intermediate' | 'Complex' | 'Advanced';
  factors: string[];
  reasoning: string;
}

export interface CVRecommendation {
  title: string;
  description: string;
  repositories?: Repository[];
  priority: number;
}

export class RepositorySorter {
  // 🧮 CALCULATE REPOSITORY COMPLEXITY
  static calculateComplexity(repo: Repository): RepositoryComplexity {
    let score = 0;
    const factors: string[] = [];

    // Language complexity scoring
    const languageScores: Record<string, number> = {
      'TypeScript': 4,
      'JavaScript': 3,
      'Python': 3,
      'Java': 4,
      'C++': 5,
      'C#': 4,
      'Go': 4,
      'Rust': 5,
      'Swift': 4,
      'Kotlin': 4,
      'PHP': 2,
      'Ruby': 3,
      'HTML': 1,
      'CSS': 1,
      'Shell': 2,
      'Dockerfile': 2,
    };

    if (repo.language) {
      const langScore = languageScores[repo.language] || 2;
      score += langScore;
      factors.push(`${repo.language} (${langScore}pts)`);
    }

    // Repository size and activity
    const size = repo.size || 0;
    if (size > 10000) {
      score += 3;
      factors.push('Large codebase (3pts)');
    } else if (size > 1000) {
      score += 2;
      factors.push('Medium codebase (2pts)');
    } else if (size > 100) {
      score += 1;
      factors.push('Small codebase (1pt)');
    }

    // Community engagement
    const stars = repo.stargazers_count || 0;
    const forks = repo.forks_count || 0;
    if (stars > 50 || forks > 10) {
      score += 2;
      factors.push('High engagement (2pts)');
    } else if (stars > 10 || forks > 2) {
      score += 1;
      factors.push('Some engagement (1pt)');
    }

    // Documentation and features
    if (repo.has_wiki) {
      score += 1;
      factors.push('Has wiki (1pt)');
    }
    if (repo.has_issues && (repo.open_issues_count || 0) > 0) {
      score += 1;
      factors.push('Active issues (1pt)');
    }
    if (repo.has_projects) {
      score += 1;
      factors.push('Project boards (1pt)');
    }

    // Topics/tags indicate thoughtful organization
    if (repo.topics && repo.topics.length > 0) {
      score += Math.min(repo.topics.length, 3);
      factors.push(`${repo.topics.length} topics (${Math.min(repo.topics.length, 3)}pts)`);
    }

    // Recent activity
    const lastUpdate = new Date(repo.updated_at);
    const monthsAgo = (Date.now() - lastUpdate.getTime()) / (1000 * 60 * 60 * 24 * 30);
    if (monthsAgo < 1) {
      score += 2;
      factors.push('Very recent activity (2pts)');
    } else if (monthsAgo < 6) {
      score += 1;
      factors.push('Recent activity (1pt)');
    }

    // Determine complexity level
    let level: RepositoryComplexity['level'];
    let reasoning: string;

    if (score <= 4) {
      level = 'Simple';
      reasoning = 'Basic project with minimal complexity and dependencies';
    } else if (score <= 8) {
      level = 'Intermediate';
      reasoning = 'Well-structured project with moderate complexity';
    } else if (score <= 12) {
      level = 'Complex';
      reasoning = 'Advanced project with multiple technologies and features';
    } else {
      level = 'Advanced';
      reasoning = 'Highly sophisticated project with extensive features and engagement';
    }

    return {
      score,
      level,
      factors,
      reasoning,
    };
  }

  // 📊 SORT BY COMPLEXITY
  static sortByComplexity(repositories: Repository[], order: 'asc' | 'desc' = 'asc'): Repository[] {
    return repositories.sort((a, b) => {
      const complexityA = a.complexity || this.calculateComplexity(a);
      const complexityB = b.complexity || this.calculateComplexity(b);

      const scoreA = complexityA.score;
      const scoreB = complexityB.score;

      return order === 'asc' ? scoreA - scoreB : scoreB - scoreA;
    });
  }

  // 💼 SORT FOR CV OPTIMIZATION
  static sortForCV(repositories: Repository[]): Repository[] {
    return repositories.sort((a, b) => {
      const complexityA = a.complexity || this.calculateComplexity(a);
      const complexityB = b.complexity || this.calculateComplexity(b);

      // Primary: Complexity score (higher first for CV)
      const complexityDiff = complexityB.score - complexityA.score;
      if (complexityDiff !== 0) return complexityDiff;

      // Secondary: Recent activity
      const aDate = new Date(a.updated_at).getTime();
      const bDate = new Date(b.updated_at).getTime();
      const dateDiff = bDate - aDate;
      if (dateDiff !== 0) return dateDiff;

      // Tertiary: Community engagement
      const aEngagement = (a.stargazers_count || 0) + (a.forks_count || 0);
      const bEngagement = (b.stargazers_count || 0) + (b.forks_count || 0);
      return bEngagement - aEngagement;
    });
  }

  // 🎯 GENERATE CV RECOMMENDATIONS
  static generateCVRecommendations(repositories: Repository[]): CVRecommendation[] {
    const recommendations: CVRecommendation[] = [];

    // Add complexity analysis to repositories
    const reposWithComplexity = repositories.map(repo => ({
      ...repo,
      complexity: repo.complexity || this.calculateComplexity(repo),
    }));

    // Top Complex Projects
    const complexProjects = reposWithComplexity
      .filter(repo => repo.complexity!.score >= 8)
      .sort((a, b) => b.complexity!.score - a.complexity!.score)
      .slice(0, 3);

    if (complexProjects.length > 0) {
      recommendations.push({
        title: '⭐ Showcase Projects (Lead with these)',
        description: 'Your most complex and impressive repositories that demonstrate advanced skills.',
        repositories: complexProjects,
        priority: 1,
      });
    }

    // Recent Active Projects
    const recentProjects = reposWithComplexity
      .filter(repo => {
        const monthsAgo = (Date.now() - new Date(repo.updated_at).getTime()) / (1000 * 60 * 60 * 24 * 30);
        return monthsAgo < 3 && repo.complexity!.score >= 4;
      })
      .sort((a, b) => new Date(b.updated_at).getTime() - new Date(a.updated_at).getTime())
      .slice(0, 3);

    if (recentProjects.length > 0) {
      recommendations.push({
        title: '🚀 Recent Work (Show current activity)',
        description: 'Recently updated projects that show you\'re actively coding.',
        repositories: recentProjects,
        priority: 2,
      });
    }

    // Well-Documented Projects
    const documentedProjects = reposWithComplexity
      .filter(repo => repo.has_wiki || repo.description || (repo.topics && repo.topics.length > 0))
      .sort((a, b) => b.complexity!.score - a.complexity!.score)
      .slice(0, 3);

    if (documentedProjects.length > 0) {
      recommendations.push({
        title: '📚 Well-Documented Projects',
        description: 'Projects with good documentation that show your communication skills.',
        repositories: documentedProjects,
        priority: 3,
      });
    }

    return recommendations;
  }
}
</code>

lib\supabase.ts:
<code>
import { createBrowserClient } from "@supabase/ssr"

// Remove hardcoded values - require environment variables
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY

if (!supabaseUrl || !supabaseAnonKey) {
  throw new Error('Missing required Supabase environment variables. Please set NEXT_PUBLIC_SUPABASE_URL and NEXT_PUBLIC_SUPABASE_ANON_KEY')
}

// 🔧 CRITICAL FIX: Use createBrowserClient for proper session persistence in Next.js
export const supabase = createBrowserClient(supabaseUrl, supabaseAnonKey)

// Database types based on our schema

export interface UserProfile {
  id: string
  github_username: string
  github_user_id: number
  github_pat_token?: string
  display_name?: string
  avatar_url?: string
  bio?: string
  goals?: string[]
  preferences: Record<string, any>
  created_at: string
  updated_at: string
}

export interface UserRepository {
  id: string
  user_id: string
  github_repo_id: number
  repo_data: GitHubRepository
  priority_order: number
  user_notes?: string
  ai_analysis?: RepositoryAnalysis
  is_featured: boolean
  created_at: string
  updated_at: string
}

export interface GitHubRepository {
  id: number
  name: string
  full_name: string
  description?: string
  language?: string
  stargazers_count: number
  forks_count: number
  updated_at: string
  created_at: string
  html_url: string
  clone_url: string
  default_branch: string
  topics: string[]
  private: boolean
  owner: {
    login: string
    avatar_url: string
  }
  // Additional fields from GitHub API
  size?: number
  open_issues_count?: number
  has_issues?: boolean
  has_projects?: boolean
  has_wiki?: boolean
  archived?: boolean
  disabled?: boolean
  pushed_at?: string
  // Custom fields for our app
  priority_order?: number
  user_notes?: string | null
  ai_analysis?: RepositoryAnalysis | null
  is_featured?: boolean
}

export interface RepositoryAnalysis {
  complexity_score: number
  tech_stack: string[]
  project_type: string
  completeness_score: number
  suggestions: string[]
  generated_at: string
}

export interface ChatSession {
  id: string
  user_id: string
  title?: string
  repository_id?: number // GitHub repository ID (bigint)
  messages?: ChatMessage[]
  context?: Record<string, any>
  created_at: string
  updated_at: string
}

export interface ChatMessage {
  id: string
  session_id?: string
  role: "user" | "assistant"
  content: string
  timestamp?: string
  created_at: string
  context?: {
    repository?: UserRepository
    action_type?: "analysis" | "suggestion" | "generation"
  }
}

export interface GeneratedContent {
  id: string
  user_id: string
  repository_id: string // This should be a UUID from the repositories table
  content_type: "readme" | "file" | "folder"
  content: Record<string, any>
  status: "draft" | "applied" | "rejected"
  github_commit_sha?: string
  created_at: string
}

// Database helper functions
export const createUserProfile = async (userData: {
  id: string
  github_username: string
  github_user_id: number
  display_name?: string
  avatar_url?: string
  bio?: string
}) => {
  const { data, error } = await supabase.from("user_profiles").insert([userData]).select().single()

  return { data, error }
}

export const getUserProfile = async (userId: string) => {
  const { data, error } = await supabase.from("user_profiles").select("*").eq("id", userId).single()

  return { data, error }
}

export const updateUserProfile = async (userId: string, updates: Partial<UserProfile>) => {
  const { data, error } = await supabase.from("user_profiles").update(updates).eq("id", userId).select().single()

  return { data, error }
}

export const getUserRepositories = async (userId: string) => {
  const { data, error } = await supabase
    .from("user_repositories")
    .select("*")
    .eq("user_id", userId)
    .order("priority_order", { ascending: true })

  return { data, error }
}

export const saveUserRepositories = async (
  repositories: Omit<UserRepository, "id" | "created_at" | "updated_at">[],
) => {
  const { data, error } = await supabase
    .from("user_repositories")
    .upsert(repositories, {
      onConflict: "user_id,github_repo_id",
      ignoreDuplicates: false,
    })
    .select()

  return { data, error }
}

export const updateRepositoryOrder = async (repositoryId: string, newOrder: number) => {
  const { data, error } = await supabase
    .from("user_repositories")
    .update({ priority_order: newOrder })
    .eq("id", repositoryId)
    .select()
    .single()

  return { data, error }
}

</code>

lib\utils.ts:
<code>
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

</code>

scripts\add-github-token-column.sql:
<code>
-- Add missing github_token column to user_profiles table
-- This fixes the profile loading issue where the account switcher gets stuck

-- Add github_token column if it doesn't exist
ALTER TABLE user_profiles 
ADD COLUMN IF NOT EXISTS github_token TEXT;

-- Add index for better performance on token lookups
CREATE INDEX IF NOT EXISTS idx_user_profiles_github_token 
ON user_profiles(github_token) 
WHERE github_token IS NOT NULL;

-- Update the table comment
COMMENT ON COLUMN user_profiles.github_token IS 'GitHub Personal Access Token for repository operations';

-- Verify the column was added
SELECT column_name, data_type, is_nullable 
FROM information_schema.columns 
WHERE table_name = 'user_profiles' 
AND column_name = 'github_token';

</code>

tests\oauth-token-persistence.spec.js:
<code>
const { test, expect } = require('@playwright/test');

test.describe('GitHub OAuth Token Persistence Test', () => {
  test('should persist GitHub token after sign out and re-login', async ({ page }) => {
    console.log('🎯 Starting GitHub OAuth Token Persistence Test...');
    
    // Navigate to production app
    await page.goto('https://neatrepo.vercel.app');
    await page.waitForLoadState('networkidle');
    
    console.log('✅ Navigated to NeatRepo');
    
    // Take initial screenshot
    await page.screenshot({ path: 'test-results/01-landing-page.png' });
    
    // Click "Get Started" or "Sign In" button to open auth forms
    const getStartedButton = page.locator('button:has-text("Get Started")').first();
    const signInButton = page.locator('button:has-text("Sign In")').first();
    
    if (await getStartedButton.isVisible()) {
      await getStartedButton.click();
      console.log('✅ Clicked Get Started button');
    } else if (await signInButton.isVisible()) {
      await signInButton.click();
      console.log('✅ Clicked Sign In button');
    } else {
      throw new Error('❌ No auth button found');
    }
    
    await page.waitForTimeout(1000);
    await page.screenshot({ path: 'test-results/02-auth-modal-opened.png' });
    
    // Look for GitHub OAuth button
    const githubButton = page.locator('button:has-text("Continue with GitHub")');
    await expect(githubButton).toBeVisible();
    console.log('✅ GitHub OAuth button found');
    
    // Click GitHub OAuth button
    await githubButton.click();
    console.log('✅ Clicked GitHub OAuth button');
    
    // Wait for GitHub OAuth redirect or popup
    await page.waitForTimeout(3000);
    
    // Check if we're redirected to GitHub or if there's an error
    const currentUrl = page.url();
    console.log(`🔗 Current URL: ${currentUrl}`);
    
    if (currentUrl.includes('github.com')) {
      console.log('🔄 Redirected to GitHub OAuth - Manual intervention needed');
      console.log('⚠️  This test requires manual GitHub login or pre-configured test account');
      
      // Wait for manual login (in real scenario, we'd use test credentials)
      await page.waitForTimeout(30000);
      
    } else if (currentUrl.includes('dashboard')) {
      console.log('✅ Already logged in - redirected to dashboard');
      
    } else {
      console.log('⚠️  Unexpected redirect or error occurred');
      await page.screenshot({ path: 'test-results/03-unexpected-state.png' });
    }
    
    // Check if we're on dashboard
    await page.waitForTimeout(2000);
    const finalUrl = page.url();
    console.log(`🎯 Final URL: ${finalUrl}`);
    
    if (finalUrl.includes('dashboard')) {
      console.log('✅ Successfully reached dashboard');
      await page.screenshot({ path: 'test-results/04-dashboard-reached.png' });
      
      // Check for GitHub token popup
      const tokenPopup = page.locator('[data-testid="github-token-popup"]');
      const isTokenPopupVisible = await tokenPopup.isVisible().catch(() => false);
      
      if (isTokenPopupVisible) {
        console.log('📝 GitHub token popup is visible (first time setup)');
        await page.screenshot({ path: 'test-results/05-token-popup-first-time.png' });
        
        // For testing, we'll dismiss the popup to simulate token setup
        const dismissButton = page.locator('button:has-text("Dismiss")');
        if (await dismissButton.isVisible()) {
          await dismissButton.click();
          console.log('✅ Dismissed token popup for testing');
        }
      } else {
        console.log('✅ No GitHub token popup (token already exists)');
      }
      
      // Now test the critical part: Sign out and re-login
      console.log('🔄 Testing sign out and re-login...');
      
      // Find and click sign out button
      const signOutButton = page.locator('button:has-text("Sign Out")');
      await expect(signOutButton).toBeVisible();
      await signOutButton.click();
      console.log('✅ Clicked Sign Out button');
      
      // Wait for redirect to homepage
      await page.waitForTimeout(3000);
      await page.screenshot({ path: 'test-results/06-after-signout.png' });
      
      // Verify we're back on homepage
      const homeUrl = page.url();
      console.log(`🏠 After sign out URL: ${homeUrl}`);
      
      // Now re-login with GitHub OAuth
      console.log('🔄 Re-logging in with GitHub OAuth...');
      
      // Click auth button again
      if (await getStartedButton.isVisible()) {
        await getStartedButton.click();
      } else if (await signInButton.isVisible()) {
        await signInButton.click();
      }
      
      await page.waitForTimeout(1000);
      
      // Click GitHub OAuth again
      const githubButtonSecond = page.locator('button:has-text("Continue with GitHub")');
      await githubButtonSecond.click();
      console.log('✅ Clicked GitHub OAuth button (second time)');
      
      // Wait for auth flow
      await page.waitForTimeout(5000);
      
      // Check if we reach dashboard again
      const secondLoginUrl = page.url();
      console.log(`🎯 Second login URL: ${secondLoginUrl}`);
      
      if (secondLoginUrl.includes('dashboard')) {
        console.log('✅ Successfully re-logged in to dashboard');
        await page.screenshot({ path: 'test-results/07-dashboard-second-login.png' });
        
        // CRITICAL TEST: Check if GitHub token popup appears again
        await page.waitForTimeout(2000);
        const tokenPopupSecond = page.locator('[data-testid="github-token-popup"]');
        const isTokenPopupVisibleSecond = await tokenPopupSecond.isVisible().catch(() => false);
        
        if (isTokenPopupVisibleSecond) {
          console.log('❌ CRITICAL BUG: GitHub token popup appeared again after re-login!');
          console.log('🐛 This means token persistence is broken');
          await page.screenshot({ path: 'test-results/08-BUG-token-popup-reappeared.png' });
          
          // This is the bug we need to fix
          throw new Error('CRITICAL BUG: GitHub token popup should not appear for existing users');
          
        } else {
          console.log('✅ PERFECT: No GitHub token popup on re-login');
          console.log('🎉 Token persistence is working correctly');
          await page.screenshot({ path: 'test-results/08-SUCCESS-no-popup-relogin.png' });
        }
        
      } else {
        console.log('⚠️  Failed to reach dashboard on second login');
        await page.screenshot({ path: 'test-results/07-second-login-failed.png' });
      }
      
    } else {
      console.log('❌ Failed to reach dashboard on first login');
      await page.screenshot({ path: 'test-results/04-dashboard-not-reached.png' });
    }
    
    console.log('🏁 GitHub OAuth Token Persistence Test completed');
  });
});

</code>

.aicodeprep-gui:
<code>
# .aicodeprep-gui LLM/AI context helper settings file
# This file stores your preferences (checked code files, window size) for this folder.
# Generated by aicodeprep-gui.
# Homepage: https://wuu73.org/aicp
# GitHub: https://github.com/detroittommy879/aicodeprep-gui
# ----------------------------------------------------------
# aicodeprep-gui preferences file version 1.0
version=1.0

[window]
width=1920
height=1009
splitter_state=AAAA/wAAAAEAAAACAAAAZgAAAIIB/////wEAAAACAA==

[files]
app\globals.css
app\layout.tsx
app\loading.tsx
app\page.tsx
app\api\analyze\route.ts
app\api\auth\callback\route.ts
app\api\bug-report\route.ts
app\api\session\route.ts
app\api\user\profile\route.ts
app\auth\error\page.tsx
app\bug-report\page.tsx
app\connect-github\page.tsx
app\dashboard\page.tsx
app\dashboard\components\ActionButtons.tsx
app\dashboard\components\ChatSidebar.tsx
app\dashboard\components\DashboardMetrics.tsx
app\dashboard\components\Modals.tsx
app\dashboard\components\RepoItem.tsx
app\dashboard\components\RepositoryList.tsx
app\dashboard\hooks\useChatAssistant.ts
app\dashboard\hooks\useDashboard.ts
app\dashboard\hooks\useDashboardModals.ts
app\dashboard\hooks\useRepositories.ts
app\dashboard\types\index.ts
app\debug\page.tsx
app\profile\page.tsx
app\signout\page.tsx
app\test-callback\page.tsx
app\test-sorting\page.tsx
components\auth-forms.tsx
components\auth-guard.tsx
components\auth-provider.tsx
components\dashboard-header.tsx
components\github-auth.tsx
components\github-connect-popup.tsx
components\github-token-popup.tsx
components\github-token-warning.tsx
components\navigation-error-boundary.tsx
components\oauth-debug.tsx
components\theme-provider.tsx
components\theme-toggle.tsx
components\token-management.tsx
components\token-warning-badge.tsx
components\auth\auth-context.tsx
components\ui\accordion.tsx
components\ui\alert-dialog.tsx
components\ui\alert.tsx
components\ui\aspect-ratio.tsx
components\ui\avatar.tsx
components\ui\badge.tsx
components\ui\breadcrumb.tsx
components\ui\button.tsx
components\ui\calendar.tsx
components\ui\card.tsx
components\ui\carousel.tsx
components\ui\chart.tsx
components\ui\checkbox.tsx
components\ui\collapsible.tsx
components\ui\command.tsx
components\ui\context-menu.tsx
components\ui\dialog.tsx
components\ui\drawer.tsx
components\ui\dropdown-menu.tsx
components\ui\form.tsx
components\ui\hover-card.tsx
components\ui\input-otp.tsx
components\ui\input.tsx
components\ui\label.tsx
components\ui\menubar.tsx
components\ui\navigation-menu.tsx
components\ui\pagination.tsx
components\ui\popover.tsx
components\ui\progress.tsx
components\ui\radio-group.tsx
components\ui\resizable.tsx
components\ui\scroll-area.tsx
components\ui\select.tsx
components\ui\separator.tsx
components\ui\sheet.tsx
components\ui\sidebar.tsx
components\ui\skeleton.tsx
components\ui\slider.tsx
components\ui\sonner.tsx
components\ui\switch.tsx
components\ui\table.tsx
components\ui\tabs.tsx
components\ui\textarea.tsx
components\ui\toast.tsx
components\ui\toaster.tsx
components\ui\toggle-group.tsx
components\ui\toggle.tsx
components\ui\tooltip.tsx
components\ui\use-mobile.tsx
components\ui\use-toast.ts
hooks\use-mobile.tsx
hooks\use-toast.ts
lib\ai-assistant.ts
lib\gemini.ts
lib\github-api.ts
lib\repository-manager.ts
lib\repository-sorter.ts
lib\supabase.ts
lib\utils.ts
lib\ai\types.ts
lib\ai\actions\.keep
lib\ai\actions\analyzeComplexity.ts
lib\ai\actions\createFile.ts
lib\ai\actions\createRepo.ts
lib\ai\actions\deleteRepo.ts
lib\ai\actions\handleGeneralResponse.ts
lib\ai\actions\handleInterviewAnswer.ts
lib\ai\actions\recommendCVRepos.ts
lib\ai\actions\recommendReposForJob.ts
lib\ai\actions\sortRepos.ts
lib\ai\actions\startInterview.ts
lib\ai\analysis\.keep
lib\ai\analysis\repositoryAnalysis.ts
lib\ai\prompts\.keep
lib\ai\prompts\analysisPrompts.ts
lib\auth\profile-service.ts

</code>

.gitignore:
<code>
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules

# next.js
/.next/
/out/

# production
/build

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# env files
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts
</code>

check-token-permissions.js:
<code>
#!/usr/bin/env node

const { Octokit } = require("@octokit/rest");
const fs = require('fs');
const path = require('path');

// Read .env.local file manually
function loadEnvFile() {
  try {
    const envPath = path.join(__dirname, '.env.local');
    const envContent = fs.readFileSync(envPath, 'utf8');
    const lines = envContent.split('\n');

    for (const line of lines) {
      const trimmed = line.trim();
      if (trimmed && !trimmed.startsWith('#')) {
        const [key, ...valueParts] = trimmed.split('=');
        if (key && valueParts.length > 0) {
          process.env[key] = valueParts.join('=');
        }
      }
    }
  } catch (error) {
    console.error('Error reading .env.local:', error.message);
  }
}

loadEnvFile();

async function checkTokenPermissions() {
  const token = process.env.GITHUB_TOKEN;
  
  if (!token) {
    console.error('❌ GITHUB_TOKEN not found in .env.local');
    process.exit(1);
  }

  console.log('🔍 Checking GitHub token permissions...');
  console.log('📝 Token:', token.substring(0, 10) + '...');

  const octokit = new Octokit({
    auth: token,
  });

  try {
    // 1. Check authenticated user
    console.log('\n1️⃣ Checking authenticated user...');
    const { data: user } = await octokit.rest.users.getAuthenticated();
    console.log(`✅ Authenticated as: ${user.login}`);
    console.log(`📧 Email: ${user.email || 'Not public'}`);
    console.log(`🔗 Profile: ${user.html_url}`);

    // 2. Check token scopes
    console.log('\n2️⃣ Checking token scopes...');
    const response = await octokit.request('HEAD /');
    const scopes = response.headers['x-oauth-scopes'];
    console.log(`🔐 Token scopes: ${scopes || 'No scopes found'}`);

    // 3. Check if we can list repositories
    console.log('\n3️⃣ Checking repository access...');
    const { data: repos } = await octokit.rest.repos.listForAuthenticatedUser({
      per_page: 5,
      sort: 'updated'
    });
    console.log(`📚 Found ${repos.length} repositories (showing first 5)`);
    
    repos.forEach((repo, index) => {
      console.log(`   ${index + 1}. ${repo.name} (${repo.private ? 'private' : 'public'})`);
      console.log(`      Permissions: admin=${repo.permissions?.admin}, push=${repo.permissions?.push}, pull=${repo.permissions?.pull}`);
    });

    // 4. Check specific repository permissions for pengetesan-delete
    console.log('\n4️⃣ Checking specific repository: pengetesan-delete...');
    try {
      const { data: repo } = await octokit.rest.repos.get({
        owner: user.login,
        repo: 'pengetesan-delete'
      });
      console.log(`✅ Repository found: ${repo.full_name}`);
      console.log(`🔐 Permissions: admin=${repo.permissions?.admin}, push=${repo.permissions?.push}, pull=${repo.permissions?.pull}`);
      
      if (repo.permissions?.admin) {
        console.log('✅ You have ADMIN access - can delete repository');
      } else {
        console.log('❌ You do NOT have ADMIN access - cannot delete repository');
      }
    } catch (error) {
      if (error.status === 404) {
        console.log('❌ Repository "pengetesan-delete" not found');
        console.log('   Possible reasons:');
        console.log('   - Repository does not exist');
        console.log('   - Repository name is incorrect');
        console.log('   - You do not have access to this repository');
      } else {
        console.log(`❌ Error checking repository: ${error.message}`);
      }
    }

    // 5. List all repositories to find the correct name
    console.log('\n5️⃣ Listing all repositories to find correct names...');
    const { data: allRepos } = await octokit.rest.repos.listForAuthenticatedUser({
      per_page: 100,
      sort: 'updated'
    });
    
    console.log(`📚 Total repositories: ${allRepos.length}`);
    console.log('🔍 Looking for repositories with "delete" or "test" in name:');
    
    const testRepos = allRepos.filter(repo => 
      repo.name.toLowerCase().includes('delete') || 
      repo.name.toLowerCase().includes('test') ||
      repo.name.toLowerCase().includes('pengetesan')
    );
    
    if (testRepos.length > 0) {
      testRepos.forEach(repo => {
        console.log(`   📁 ${repo.name} (${repo.private ? 'private' : 'public'})`);
        console.log(`      Admin: ${repo.permissions?.admin ? '✅' : '❌'}`);
        console.log(`      Full name: ${repo.full_name}`);
      });
    } else {
      console.log('   No repositories found with "delete", "test", or "pengetesan" in name');
    }

  } catch (error) {
    console.error('❌ Error checking token permissions:', error.message);
    if (error.status === 401) {
      console.error('🔐 Token is invalid or expired');
    } else if (error.status === 403) {
      console.error('🚫 Token does not have sufficient permissions');
    }
  }
}

checkTokenPermissions().catch(console.error);

</code>

components.json:
<code>
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "default",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "app/globals.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}
</code>

DEMO_SETUP.md:
<code>
# 🎬 NeatRepo Demo Setup Guide - GitHub Portfolio Organizer
*Create viral content showcasing the webapp that makes GitHub job-ready*

## 🚀 Core Features to Highlight (WOW Factors)

### 1. **🗑️ BULK DELETE OPERATIONS** ⭐ **MAIN ATTRACTION**
- **The Problem**: GitHub forces you to delete repos one by one (15 minutes for 15 repos)
- **Our Solution**: Select multiple repos, delete in one click (5 seconds)
- **WOW Factor**: 15 repos deleted in 5 seconds vs 15 minutes on GitHub
- **Safety**: Smart confirmations prevent accidents

### 2. **🎨 DRAG & DROP ORGANIZATION** 🎯 **VISUAL PORTFOLIO**
- **The Problem**: GitHub only has alphabetical sorting - looks unprofessional
- **Our Solution**: Visual drag & drop reordering untuk professional presentation
- **WOW Factor**: Professional portfolio layout vs messy GitHub list
- **Features**: Visual indicators, forked repo separation, custom grouping

### 3. **⚡ ULTRA-FAST PERFORMANCE** 🏆 **LIGHTNING SPEED**
- **The Problem**: GitHub is slow, clunky, takes 3-5 seconds to load repos
- **Our Solution**: Modern React app dengan intelligent caching
- **WOW Factor**: 25+ repositories loaded in 426ms (sub-1-second)
- **Technology**: Optimized performance, background sync, instant updates

### 4. **➕ COMPLETE REPOSITORY MANAGEMENT** ✅ **ALL-IN-ONE**
- **The Problem**: Need to switch between GitHub pages for different operations
- **Our Solution**: Create, rename, delete, organize - all in one place
- **WOW Factor**: Complete workflow tanpa meninggalkan NeatRepo
- **Features**: Repository creation, renaming, file management

### 5. **🎯 JOB-READY OPTIMIZATION** 💼 **CAREER FOCUSED**
- **The Problem**: GitHub profiles look messy and unprofessional to recruiters
- **Our Solution**: Smart sorting, professional presentation, portfolio modes
- **WOW Factor**: Transform messy GitHub into recruiter-ready portfolio
- **Features**: Portfolio mode, CV mode, complexity analysis, professional layout

### 6. **🧠 SMART FEATURES** (AI-Enhanced) 📊 **INTELLIGENT CAREER TOOLS**
- **The Problem**: No way to organize repos by skill level or job relevance
- **Our Solution**: Smart complexity analysis, job-specific repo picker, personal README generator
- **WOW Factor**: AI picks 4 best repos for "Frontend Developer" + personalized README in 2 minutes
- **Intelligence**: Job-focused automation + Nice/Brutal critique modes for improvement

---

## 🎯 Platform-Specific Demo Scripts

### 📱 TWITTER VERSION (Controversial & Viral)
**Duration**: 15-30 seconds
**Tone**: Dramatic, controversial, cringe

#### Viral Hook Options:
- "It's 2025 and GitHub STILL doesn't have bulk delete 🤦‍♂️"
- "I wasted 3 hours deleting repos manually. So I built this."
- "GitHub's UI is from 2008. We fixed it."
- "Microsoft owns GitHub but can't add basic features?"
- "POV: You have 50 old repos cluttering your GitHub"

#### Bulk Delete Demo Script (VIRAL VERSION):
```
[0-3s] "POV: You have 50 old repos cluttering your GitHub"
[3-8s] *Show messy GitHub profile with test repos*
[8-12s] *Open NeatRepo, show bulk select checkboxes*
[12-15s] *Select 15 repos with checkboxes*
[15-18s] *Click bulk delete, show confirmation*
[18-22s] *All repos deleted in 3 seconds*
[22-25s] "GitHub could never 💅"
[25-28s] "15 repos in 3 seconds vs 15 minutes on GitHub"
[28-30s] "Link in bio - it's FREE"
```

#### Alternative Scripts:

**Script A - AI Job Picker Focus:**
```
[0-3s] "Applying for Frontend Developer jobs?"
[3-6s] *Show messy GitHub with 30+ repos*
[6-9s] *Type job title: "Frontend Developer"*
[9-12s] *AI instantly picks 4 most relevant repos*
[12-15s] *Show selected repos: React projects, portfolios*
[15-18s] *Quick interview: "What's your coding passion?"*
[18-22s] *AI generates personalized README*
[22-25s] "Job-ready portfolio in 30 seconds"
[25-28s] "AI knows what recruiters want"
[28-30s] "Try it free - link in bio"
```

**Script B - Professional Portfolio Focus:**
```
[0-3s] "Your GitHub looks like a dumpster fire"
[3-8s] *Show cluttered, unprofessional GitHub profile*
[8-12s] *Open NeatRepo, drag & drop reorder repos*
[12-18s] *Show professional organization with visual indicators*
[18-22s] *Before/after comparison*
[22-25s] "Job-ready portfolio in 30 seconds"
[25-28s] "Recruiters will actually notice you"
[28-30s] "Try it free - link in bio"
```

**Script B - Performance Focus:**
```
[0-3s] "GitHub loading your repos..."
[3-6s] *Show GitHub spinning wheel*
[6-8s] "NeatRepo loading same repos..."
[8-10s] *Instant load - 426ms timer*
[10-15s] *Show smooth drag & drop, instant operations*
[15-18s] *Bulk delete 10 repos in 2 seconds*
[18-22s] "Sub-1-second vs GitHub's 5 seconds"
[22-25s] "Modern UI that actually works"
[25-30s] "Link in bio"
```

#### Viral Captions:
- "GitHub walked so NeatRepo could run 💯"
- "Developers deserve better tools"
- "RT if you've suffered from GitHub's UX"
- "POV: You never manually delete repos again"
- "This is what GitHub should have built"

---

### 💼 LINKEDIN VERSION (Professional & Career-Focused)
**Duration**: 45-60 seconds  
**Tone**: Professional, solution-focused, career-oriented

#### Professional Hook Options:
- "Transform your messy GitHub into a recruiter-ready portfolio"
- "Your GitHub profile could be costing you job opportunities"
- "How to organize your GitHub for maximum career impact"
- "Stop losing job opportunities because of poor GitHub organization"
- "Professional developers need professional portfolio tools"

#### Job-Ready Portfolio Script:
```
[0-5s] "Your GitHub profile determines your career opportunities"
[5-10s] *Show cluttered, unprofessional GitHub profile*
[10-15s] "But organizing it manually takes hours of work"
[15-20s] *Open NeatRepo, show bulk select interface*
[20-25s] *Bulk delete test repos in 3 seconds*
[25-30s] *Drag & drop reorder remaining repos professionally*
[30-35s] *Show smart sorting: Portfolio mode (simple→complex)*
[35-40s] *Show before/after: messy vs professional*
[40-45s] *Show performance: 426ms load vs GitHub's 3+ seconds*
[45-50s] "Professional portfolio organization in minutes, not hours"
[50-55s] "Used by developers landing jobs at top companies"
[55-60s] "Optimize your career: [link]"
```

#### Alternative Professional Scripts:

**Script A - Time ROI Focus:**
```
[0-5s] "Spent 3 hours organizing my GitHub for job applications"
[5-10s] *Show manual GitHub organization process*
[10-15s] "There has to be a better way"
[15-20s] *Open NeatRepo, bulk operations*
[20-30s] *Complete organization in 2 minutes*
[30-35s] *Show professional drag & drop reordering*
[35-40s] *Compare: 3 hours manual vs 2 minutes with NeatRepo*
[40-45s] "Time is money in job searching"
[45-50s] "Focus on coding, not organizing"
[50-55s] "Professional portfolio tools for serious developers"
[55-60s] "Try free: [link]"
```

**Script B - Recruiter Perspective Focus:**
```
[0-5s] "Recruiters spend 30 seconds on your GitHub profile"
[5-10s] *Show messy, disorganized repository list*
[10-15s] "First impression matters in tech hiring"
[15-25s] *Show NeatRepo professional organization*
[25-30s] *Visual indicators, clean layout, smart sorting*
[30-35s] *Show portfolio mode: simple→complex progression*
[35-40s] *Professional presentation that impresses recruiters*
[40-45s] "Stand out in a competitive job market"
[45-50s] "Professional GitHub = professional developer"
[50-55s] "Used by developers at Google, Meta, Netflix"
[55-60s] "Optimize your career: [link]"
```

#### Professional Benefits & ROI:
- ✅ **Time Savings**: 2 minutes vs 3 hours manual organization
- ✅ **Professional Presentation**: Impress recruiters in first 30 seconds
- ✅ **Career-Focused Organization**: Portfolio mode showcases learning journey
- ✅ **Competitive Advantage**: Stand out in crowded job market
- ✅ **Bulk Operations**: Clean up messy profiles instantly
- ✅ **Modern Performance**: Fast, responsive, professional interface

#### LinkedIn-Specific Call-to-Actions:
- "Connect with me to discuss developer career tools"
- "Share with developers preparing for job applications"
- "Comment: What's your biggest GitHub organization challenge?"
- "Tag a developer friend who needs portfolio cleanup"
- "Follow for more career-focused developer tools"

---

### 🤓 REDDIT/DEV FORUMS VERSION (Technical & Problem-Solving)
**Duration**: 60-90 seconds
**Tone**: Technical, community-focused, maker story

#### Technical Hook Options:
- "Built a tool for bulk GitHub operations because I was tired of clicking delete 50 times"
- "GitHub is missing basic bulk operations in 2025. So I built this."
- "Open source tool that solves GitHub's biggest UX problems"
- "Finally, bulk delete and professional portfolio organization for GitHub"
- "Spent weekend building what GitHub should have had years ago"

#### Technical Problem-Solving Script:
```
[0-5s] "GitHub is missing basic bulk operations in 2025. So I built this."
[5-10s] *Show GitHub's manual, repetitive deletion process*
[10-15s] *Open NeatRepo, show bulk select checkboxes*
[15-20s] *Select 15 repos, bulk delete in 3 seconds*
[20-25s] *Show drag & drop organization interface*
[25-35s] *Demo professional portfolio layout with visual indicators*
[35-40s] *Show performance metrics: 426ms load vs GitHub's 3+ seconds*
[40-50s] *Demo repository creation, renaming, file management*
[50-60s] *Show smart sorting: Portfolio mode vs CV mode*
[60-70s] *Show tech stack: Next.js, TypeScript, Supabase*
[70-75s] "Open source, looking for contributors and feedback"
[75-80s] "What GitHub features are you missing?"
[80-85s] "Built this because I was frustrated with GitHub's UX"
[85-90s] "Link in comments - it's completely free"
```

#### Alternative Technical Scripts:

**Script A - Performance & Architecture Focus:**
```
[0-5s] "Built GitHub portfolio organizer with sub-1-second performance"
[5-10s] *Show performance metrics: 426ms load time*
[10-20s] *Explain singleton pattern, intelligent caching*
[20-30s] *Demo bulk operations architecture*
[30-40s] *Show drag & drop implementation*
[40-50s] *Demo real-time updates and background sync*
[50-60s] *Explain tech stack and architecture decisions*
[60-70s] "Open source repo available, looking for code reviews"
[70-80s] "What would you optimize differently?"
[80-90s] "Link in comments for technical deep dive"
```

**Script B - Problem-Solving Focus:**
```
[0-5s] "GitHub's UX problems that needed solving"
[5-15s] *Show manual repo deletion, poor organization*
[15-25s] *Demo NeatRepo's bulk operations solution*
[25-35s] *Show professional portfolio organization*
[35-45s] *Demo job-ready features: Portfolio mode, CV mode*
[45-55s] *Show developer workflow improvements*
[55-65s] *Explain technical implementation challenges*
[65-75s] "Built with TypeScript, full type safety"
[75-80s] "Looking for developers to contribute"
[80-85s] "What GitHub UX problems annoy you most?"
[85-90s] "GitHub repo and live demo in comments"
```

#### Technical Highlights & Architecture:
- 🔧 **Modern Stack**: Next.js 14, React 18, TypeScript, Supabase
- ⚡ **Performance**: Singleton patterns, intelligent caching, streaming updates
- 🗑️ **Bulk Operations**: Efficient GitHub API integration for mass operations
- 🎨 **Drag & Drop**: Smooth @hello-pangea/dnd implementation
- 🔐 **Security**: Secure token management, enterprise-grade auth
- 📊 **Real-time**: Background sync, YouTube-style persistence
- 🎯 **Open Source**: Looking for contributors and code reviews
- 🚀 **Production Ready**: Comprehensive error handling, type safety

#### Reddit-Specific Technical CTAs:
- "Code review welcome - what would you optimize?"
- "Looking for frontend/backend developers to contribute"
- "What GitHub UX problems are you missing solutions for?"
- "Built this in a weekend - what should I add next?"
- "Open source repo in comments - star if you find it useful"
- "Beta testing with real developers - feedback appreciated"

---

## 🎥 Recording Setup

### Technical Requirements:
- **Resolution**: 1920x1080 (Full HD)
- **Frame Rate**: 60fps for smooth UI interactions
- **Recording Software**: OBS Studio / Loom / ScreenFlow
- **Browser**: Chrome Incognito (clean, no extensions)
- **Mouse**: Enable click highlighting
- **Audio**: Optional background music (platform-specific)

### Demo Data Preparation:
1. **Create 15-20 test repositories** with varied names:
   - Professional: `portfolio-website`, `react-dashboard`, `api-server`
   - Embarrassing: `test-repo-123`, `asdfgh`, `random-stuff` (for Twitter drama)
   - Mixed languages: JavaScript, Python, Java, etc.

2. **Prepare GitHub account** with cluttered profile
3. **Setup NeatRepo account** with clean state
4. **Test all features** before recording

---

## ✂️ Editing Guidelines

### Key Moments to Emphasize:
1. **Zoom in** on bulk select checkboxes (0.5s slow-mo)
2. **Zoom in** on delete confirmation dialog
3. **Speed up** boring navigation (2x speed)
4. **Slow down** the WOW moment (bulk delete action)
5. **Add text overlays** for emphasis

### Platform-Specific Editing:

#### Twitter:
- ⚡ Fast-paced, energetic
- 🎵 Trending audio/music
- 📱 Vertical format (9:16) for mobile
- 💥 Quick cuts, dramatic zooms
- 🔥 Emoji overlays and reactions

#### LinkedIn:
- 🎼 Professional background music
- 📐 Clean, minimal text overlays
- 🎯 Focus on business value
- 📊 Show before/after metrics
- 💼 Professional color scheme

#### Reddit:
- 🔧 Technical annotations
- 📝 Code snippets if relevant
- 🎯 Focus on functionality
- 📊 Performance metrics
- 🔍 Detailed feature explanations

---

## 🎯 Call-to-Action Strategies

### Twitter:
- "Link in bio 👆"
- "RT if you've suffered from GitHub's UX"
- "Tag a developer who needs this"
- "Comment 'NEED' for early access"

### LinkedIn:
- "Try it free at [link]"
- "Share with your developer network"
- "Comment your GitHub organization tips"
- "Connect if you found this helpful"

### Reddit:
- "Link in comments (mods please don't delete)"
- "Looking for beta testers and feedback"
- "Open source repo: [github link]"
- "Built this because I was frustrated with GitHub"

---

## 🔥 Viral Hooks & Controversy (Twitter Specific)

### Controversial Statements:
- "GitHub's UX team should be fired"
- "Microsoft ruined GitHub's innovation"
- "It's 2025 and GitHub feels like 2008"
- "Spent $7.5B on GitHub but can't add bulk delete"
- "GitHub devs don't use their own product"

### Engagement Bait:
- "Unpopular opinion: GitHub's UI is trash"
- "Hot take: GitHub needs competition"
- "Change my mind: GitHub is overrated"
- "This feature should be built into GitHub"

### Relatable Pain Points:
- "POV: Deleting 50 repos manually"
- "Me: *clicks delete 47 times*"
- "GitHub: Delete repos one by one 🤡"
- "Developers: We need bulk operations"
- "GitHub: Best I can do is dark mode"

---

## 📊 Success Metrics to Track

### Engagement Metrics:
- Views, likes, shares, comments
- Click-through rate to website
- Sign-up conversion rate
- Platform-specific metrics (RT, connections, upvotes)

### Platform Benchmarks:
- **Twitter**: 1000+ views, 50+ RTs, 10+ sign-ups
- **LinkedIn**: 500+ views, 25+ reactions, 5+ connections
- **Reddit**: 100+ upvotes, 20+ comments, 15+ sign-ups

---

## 🎬 Quick Demo Checklist

### Pre-Recording:
- [ ] Clean browser setup
- [ ] Test repositories created
- [ ] NeatRepo account ready
- [ ] Recording software configured
- [ ] Script memorized/notes ready

### During Recording:
- [ ] Clear, confident narration
- [ ] Smooth mouse movements
- [ ] Highlight key interactions
- [ ] Show before/after clearly
- [ ] Capture WOW moments

### Post-Recording:
- [ ] Edit for platform-specific audience
- [ ] Add appropriate music/effects
- [ ] Include clear call-to-action
- [ ] Test on mobile (especially for Twitter)
- [ ] Schedule for optimal posting times

---

## 🎭 Specific Demo Scenarios

### Scenario 1: "The Cleanup" (Most Viral)
**Setup**: GitHub profile with 20+ random/test repos
**Story**: "I'm applying for jobs and my GitHub looks like a dumpster fire"
**Action**: Bulk select all test repos → Delete in one click
**Result**: Clean, professional profile in 10 seconds

### Scenario 2: "The AI Job Picker" (Career-Focused)
**Setup**: GitHub profile with 30+ mixed repos (React, Python, random projects)
**Story**: "Applying for Frontend Developer position at Google"
**Action**: Type "Frontend Developer" → AI picks 4 best repos (React projects, portfolios)
**Result**: Perfect job-specific portfolio in 5 seconds

### Scenario 3: "The Personal README Interview" (Standout Feature)
**Setup**: Generic, boring README or no README
**Story**: "My README is generic and doesn't show who I am"
**Action**: Start quick interview → AI asks 5 personal questions → Generate custom README
**Result**: Personalized README with story, passion, and personality in 2 minutes

### Scenario 4: "The Brutal Critique Mode" (Controversial/Viral)
**Setup**: Messy GitHub profile with poor organization
**Story**: "I want honest feedback on my GitHub portfolio"
**Action**: Enable Brutal Mode → AI gives harsh but honest critique
**Result**: Shocking but helpful feedback that goes viral

### Scenario 5: "The Portfolio Builder"
**Setup**: Scattered repos across different technologies
**Story**: "Recruiter wants to see my React skills"
**Action**: Use portfolio template → Organize by technology
**Result**: Professional portfolio showcase

### Scenario 6: "The Time Saver"
**Setup**: Timer on screen showing manual deletion time
**Story**: "Let's see how long GitHub takes vs NeatRepo"
**Action**: Side-by-side comparison
**Result**: 15 minutes vs 15 seconds

---

## 🎪 Advanced Viral Tactics

### Twitter Engagement Hacks:
1. **Reply to GitHub's tweets** with your demo
2. **Quote tweet** developer complaints about GitHub
3. **Use trending hashtags**: #GitHub #Developer #Productivity
4. **Tag tech influencers** who complain about GitHub
5. **Post during peak hours**: 9-10 AM, 7-9 PM EST

### LinkedIn Growth Hacks:
1. **Post in developer groups** (React, JavaScript, etc.)
2. **Tag your connections** who are developers
3. **Use professional hashtags**: #SoftwareDevelopment #GitHub #Productivity
4. **Share in company pages** if you work at a tech company
5. **Cross-post** to your company's LinkedIn

### Reddit Strategy:
1. **Target subreddits**: r/programming, r/webdev, r/javascript, r/github
2. **Follow community rules** (some don't allow self-promotion)
3. **Engage genuinely** before posting your content
4. **Provide value first** (helpful comments, answers)
5. **Use "I built this" narrative** (developers love maker stories)

---

## 🔥 Viral Content Templates

### Twitter Thread Template:
```
🧵 Thread: Why GitHub's UX makes me want to cry

1/ It's 2025. GitHub is worth $7.5 billion.
   But I still have to delete repos ONE BY ONE 🤦‍♂️

2/ So I spent my weekend building what GitHub should have:
   [Demo video]

3/ Features GitHub SHOULD have:
   ✅ Bulk delete
   ✅ Portfolio templates
   ✅ Better organization
   ✅ Modern UI

4/ Try it free: [link]
   RT if you've suffered from GitHub's UX 😭
```

### LinkedIn Post Template:
```
🚀 How to optimize your GitHub profile for job applications:

Your GitHub is your developer resume. But organizing it manually takes hours.

I built a tool that:
✅ Bulk manages repositories
✅ Creates professional portfolios
✅ Organizes projects by technology
✅ Saves hours of manual work

[Demo video]

Perfect for developers preparing for job interviews.

Try it free: [link]

#SoftwareDevelopment #GitHub #JobSearch #Productivity
```

### Reddit Post Template:
```
Title: "Built a tool for bulk GitHub operations because I was tired of clicking delete 50 times"

Hey r/programming,

I got frustrated deleting old repos one by one on GitHub, so I built NeatRepo over the weekend.

Features:
- Bulk delete/archive repositories
- Portfolio templates for job applications
- Better organization than GitHub's interface
- Built with Next.js + Supabase

[Demo video/screenshots]

It's free and I'm looking for feedback. What other GitHub features are you missing?

GitHub: [repo link]
Live demo: [app link]

Would love your thoughts and bug reports!
```

---

## 🚀 **NEW FEATURES - VIRAL POTENTIAL**

### **🎯 AI Job Picker Demo Tips:**
- **Setup**: Create repos for different tech stacks (React, Python, Node.js, random projects)
- **Demo Flow**: Type job title → Show AI thinking → Reveal perfect 4 repo selection
- **Viral Hook**: "AI knows what recruiters want better than you do"
- **Best Platforms**: LinkedIn (career-focused), Twitter (AI hype)

### **📝 Personal README Interview Demo Tips:**
- **Setup**: Show boring, generic README first
- **Demo Flow**: Start interview → Show AI asking personal questions → Generate custom README
- **Viral Hook**: "First AI that actually gets to know you personally"
- **Best Platforms**: Twitter (personal story), LinkedIn (professional branding)

### **🔥 Brutal Critique Mode Demo Tips:**
- **Setup**: Messy, unprofessional GitHub profile
- **Demo Flow**: Enable Brutal Mode → Show harsh but honest AI feedback
- **Viral Hook**: "AI roasts my GitHub portfolio" (controversial content)
- **Best Platforms**: Twitter (controversy), Reddit (honest feedback culture)

### **⚡ Performance Comparison Demo Tips:**
- **Setup**: Side-by-side browser windows (GitHub vs NeatRepo)
- **Demo Flow**: Load same repos → Show timer → Highlight speed difference
- **Viral Hook**: "426ms vs 5+ seconds - this is embarrassing for GitHub"
- **Best Platforms**: Reddit (technical), Twitter (GitHub criticism)

---

## 🎬 **CONTENT CALENDAR SUGGESTIONS**

### **Week 1: Foundation Features**
- **Monday**: Bulk Delete Demo (Twitter viral)
- **Wednesday**: Professional Organization (LinkedIn)
- **Friday**: Performance Comparison (Reddit technical)

### **Week 2: AI Features**
- **Monday**: AI Job Picker Demo (LinkedIn career-focused)
- **Wednesday**: Personal README Interview (Twitter personal story)
- **Friday**: Brutal Critique Mode (Twitter controversial)

### **Week 3: Advanced Features**
- **Monday**: Complete Workflow Demo (all platforms)
- **Wednesday**: Developer Testimonials (LinkedIn social proof)
- **Friday**: Behind-the-scenes Building Process (Reddit maker story)

---

**Remember**: The goal is to make developers think "Holy shit, I need this!" within the first 5 seconds. Lead with the pain, deliver the solution, and make them feel stupid for not having it already. 🚀

**Pro Tip**: Record multiple versions of the same demo with different hooks/narratives. A/B test which performs better on each platform. The controversial Twitter version might flop on LinkedIn, but kill on Twitter. 📊

**New Features Strategy**: Start with bulk delete as main hook, then introduce AI features as "bonus" capabilities. This positions NeatRepo as essential tool first, smart tool second. 🧠

</code>

env.example:
<code>
# Supabase Configuration - Required
NEXT_PUBLIC_SUPABASE_URL=https://your-project-id.supabase.co
NEXT_PUBLIC_SUPABASE_ANON_KEY=your-anon-key-here

# GitHub OAuth Configuration - Required for OAuth authentication
# These should match the values configured in Supabase Dashboard > Authentication > Providers > GitHub
GITHUB_CLIENT_ID=your-github-client-id
GITHUB_CLIENT_SECRET=your-github-client-secret

# Optional: For debugging OAuth flow
NEXT_PUBLIC_GITHUB_CLIENT_ID=your-github-client-id

# Gemini AI Configuration (Required for AI features)
NEXT_PUBLIC_GEMINI_API_KEY=your-gemini-api-key-here
# Optional: Configure Gemini AI model settings
GEMINI_MODEL=gemini-2.5-flash
GEMINI_TEMPERATURE=0.7
GEMINI_TOP_P=0.8
GEMINI_TOP_K=40
GEMINI_MAX_TOKENS=8192

</code>

fullcode.txt:
<code>
Please analyze this code for: Error handling, Edge cases, Performance optimization, Best practices, Please do not unnecessarily remove any comments or code. Generate the code with clear comments explaining the logic.

.augment\rules\rule.md:
<code>
---
type: "always_apply"
---

After implementing and pushing the fix, verify that the solution is working correctly by following this validation process:

1. **Push changes and wait for deployment**: Commit and push your code changes to GitHub, then wait exactly 10 minutes (5 minutes for Vercel deployment + 5 minutes safety buffer) for the deployment to complete.

2. **Test the live application**: Navigate to https://neatrepo.vercel.app/dashboard using browser automation and perform a hard refresh (Ctrl+F5 or equivalent) to bypass any caching issues.

3. **Verify the fix worked**: Check that:
   - The dashboard header no longer shows "No account" and instead displays the authenticated user information
   - The repository count shows the actual number of repositories (not 0) for the authenticated GitHub user
   - The loading state resolves properly without getting stuck in "Getting ready..." or "Loading..." indefinitely

4. **If validation fails**: If either the header still shows "No account" OR the repository count remains at 0, then the task has failed. In this case:
   - Immediately restart the debugging cycle: analyze → implement → push → wait → test → repeat
   - Use sequential thinking to identify the root cause of the remaining authentication or repository fetching issues
   - Continue iterating until both the authentication state AND repository display are working correctly

5. **Success criteria**: The fix is only considered complete when BOTH conditions are met:
   - User authentication is properly displayed in the header
   - Actual repository data is loaded and displayed (non-zero count for users with repositories)

Never implement temporary workarounds, patches, or band-aid solutions. This is a production-ready web application that will serve many users, so all fixes must be:

1. **Production-grade**: Implement proper, permanent solutions that address root causes rather than symptoms
2. **Scalable**: Solutions must work reliably under load with multiple concurrent users
3. **Maintainable**: Code should be clean, well-documented, and follow established patterns
4. **Robust**: Include proper error handling, validation, and edge case management
5. **Security-conscious**: Follow security best practices and never compromise user data or system integrity

When debugging issues like the OAuth authentication flow or repository display problems, identify and fix the underlying architectural or logic problems rather than adding timeouts, bypasses, or temporary patches. The goal is to create a stable, professional application that users can depend on.

CRITICAL DEBUGGING AND IMPLEMENTATION RULES:

1. **NO SUMMARY-ONLY RESPONSES**: Never provide analysis or explanations without implementing actual fixes. If you identify an issue, you MUST implement the solution.

make sure you push it first, you often forgot

2. **MANDATORY DEBUGGING PROCESS**: When encountering any problem, you MUST follow this exact sequence:
   - Use `sequentialthinking_Sequential_thinking` to analyze the root cause thoroughly
   - Use `codebase-retrieval` to gather all relevant code context and implementation details
   - Implement the fix using `str-replace-editor` 
   - Push changes to GitHub using git commands
   - Wait exactly 5 minutes for Vercel deployment, then wait another 5 minutes for safety
   - Test the fix using browser automation to verify it works

3. **DEPLOYMENT AND TESTING CYCLE**: After every code change:
   - Commit and push to GitHub immediately
   - Wait 10 minutes total (5 + 5) for Vercel auto-deployment
   - Test the live application at https://neatrepo.vercel.app using browser tools
   - If the fix doesn't work, repeat the entire debugging cycle

4. **NO SHORTCUTS**: Do not skip any step in the debugging process. Do not assume fixes work without testing them on the live deployment.

5. **ITERATIVE APPROACH**: If the first fix attempt fails, immediately start the cycle again: debug → implement → push → wait → test → repeat until resolved.

This applies to all technical issues, especially OAuth authentication, database connectivity, and UI state synchronization problems.

</code>

.git_disabled\hooks\applypatch-msg.sample:
<code>
#!/bin/sh
#
# An example hook script to check the commit log message taken by
# applypatch from an e-mail message.
#
# The hook should exit with non-zero status after issuing an
# appropriate message if it wants to stop the commit.  The hook is
# allowed to edit the commit message file.
#
# To enable this hook, rename this file to "applypatch-msg".

. git-sh-setup
commitmsg="$(git rev-parse --git-path hooks/commit-msg)"
test -x "$commitmsg" && exec "$commitmsg" ${1+"$@"}
:

</code>

.git_disabled\hooks\commit-msg.sample:
<code>
#!/bin/sh
#
# An example hook script to check the commit log message.
# Called by "git commit" with one argument, the name of the file
# that has the commit message.  The hook should exit with non-zero
# status after issuing an appropriate message if it wants to stop the
# commit.  The hook is allowed to edit the commit message file.
#
# To enable this hook, rename this file to "commit-msg".

# Uncomment the below to add a Signed-off-by line to the message.
# Doing this in a hook is a bad idea in general, but the prepare-commit-msg
# hook is more suited to it.
#
# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
# grep -qs "^$SOB" "$1" || echo "$SOB" >> "$1"

# This example catches duplicate Signed-off-by lines.

test "" = "$(grep '^Signed-off-by: ' "$1" |
	 sort | uniq -c | sed -e '/^[ 	]*1[ 	]/d')" || {
	echo >&2 Duplicate Signed-off-by lines.
	exit 1
}

</code>

.git_disabled\hooks\fsmonitor-watchman.sample:
<code>
#!/usr/bin/perl

use strict;
use warnings;
use IPC::Open2;

# An example hook script to integrate Watchman
# (https://facebook.github.io/watchman/) with git to speed up detecting
# new and modified files.
#
# The hook is passed a version (currently 2) and last update token
# formatted as a string and outputs to stdout a new update token and
# all files that have been modified since the update token. Paths must
# be relative to the root of the working tree and separated by a single NUL.
#
# To enable this hook, rename this file to "query-watchman" and set
# 'git config core.fsmonitor .git/hooks/query-watchman'
#
my ($version, $last_update_token) = @ARGV;

# Uncomment for debugging
# print STDERR "$0 $version $last_update_token\n";

# Check the hook interface version
if ($version ne 2) {
	die "Unsupported query-fsmonitor hook version '$version'.\n" .
	    "Falling back to scanning...\n";
}

my $git_work_tree = get_working_dir();

my $retry = 1;

my $json_pkg;
eval {
	require JSON::XS;
	$json_pkg = "JSON::XS";
	1;
} or do {
	require JSON::PP;
	$json_pkg = "JSON::PP";
};

launch_watchman();

sub launch_watchman {
	my $o = watchman_query();
	if (is_work_tree_watched($o)) {
		output_result($o->{clock}, @{$o->{files}});
	}
}

sub output_result {
	my ($clockid, @files) = @_;

	# Uncomment for debugging watchman output
	# open (my $fh, ">", ".git/watchman-output.out");
	# binmode $fh, ":utf8";
	# print $fh "$clockid\n@files\n";
	# close $fh;

	binmode STDOUT, ":utf8";
	print $clockid;
	print "\0";
	local $, = "\0";
	print @files;
}

sub watchman_clock {
	my $response = qx/watchman clock "$git_work_tree"/;
	die "Failed to get clock id on '$git_work_tree'.\n" .
		"Falling back to scanning...\n" if $? != 0;

	return $json_pkg->new->utf8->decode($response);
}

sub watchman_query {
	my $pid = open2(\*CHLD_OUT, \*CHLD_IN, 'watchman -j --no-pretty')
	or die "open2() failed: $!\n" .
	"Falling back to scanning...\n";

	# In the query expression below we're asking for names of files that
	# changed since $last_update_token but not from the .git folder.
	#
	# To accomplish this, we're using the "since" generator to use the
	# recency index to select candidate nodes and "fields" to limit the
	# output to file names only. Then we're using the "expression" term to
	# further constrain the results.
	my $last_update_line = "";
	if (substr($last_update_token, 0, 1) eq "c") {
		$last_update_token = "\"$last_update_token\"";
		$last_update_line = qq[\n"since": $last_update_token,];
	}
	my $query = <<"	END";
		["query", "$git_work_tree", {$last_update_line
			"fields": ["name"],
			"expression": ["not", ["dirname", ".git"]]
		}]
	END

	# Uncomment for debugging the watchman query
	# open (my $fh, ">", ".git/watchman-query.json");
	# print $fh $query;
	# close $fh;

	print CHLD_IN $query;
	close CHLD_IN;
	my $response = do {local $/; <CHLD_OUT>};

	# Uncomment for debugging the watch response
	# open ($fh, ">", ".git/watchman-response.json");
	# print $fh $response;
	# close $fh;

	die "Watchman: command returned no output.\n" .
	"Falling back to scanning...\n" if $response eq "";
	die "Watchman: command returned invalid output: $response\n" .
	"Falling back to scanning...\n" unless $response =~ /^\{/;

	return $json_pkg->new->utf8->decode($response);
}

sub is_work_tree_watched {
	my ($output) = @_;
	my $error = $output->{error};
	if ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {
		$retry--;
		my $response = qx/watchman watch "$git_work_tree"/;
		die "Failed to make watchman watch '$git_work_tree'.\n" .
		    "Falling back to scanning...\n" if $? != 0;
		$output = $json_pkg->new->utf8->decode($response);
		$error = $output->{error};
		die "Watchman: $error.\n" .
		"Falling back to scanning...\n" if $error;

		# Uncomment for debugging watchman output
		# open (my $fh, ">", ".git/watchman-output.out");
		# close $fh;

		# Watchman will always return all files on the first query so
		# return the fast "everything is dirty" flag to git and do the
		# Watchman query just to get it over with now so we won't pay
		# the cost in git to look up each individual file.
		my $o = watchman_clock();
		$error = $output->{error};

		die "Watchman: $error.\n" .
		"Falling back to scanning...\n" if $error;

		output_result($o->{clock}, ("/"));
		$last_update_token = $o->{clock};

		eval { launch_watchman() };
		return 0;
	}

	die "Watchman: $error.\n" .
	"Falling back to scanning...\n" if $error;

	return 1;
}

sub get_working_dir {
	my $working_dir;
	if ($^O =~ 'msys' || $^O =~ 'cygwin') {
		$working_dir = Win32::GetCwd();
		$working_dir =~ tr/\\/\//;
	} else {
		require Cwd;
		$working_dir = Cwd::cwd();
	}

	return $working_dir;
}

</code>

.git_disabled\hooks\post-update.sample:
<code>
#!/bin/sh
#
# An example hook script to prepare a packed repository for use over
# dumb transports.
#
# To enable this hook, rename this file to "post-update".

exec git update-server-info

</code>

.git_disabled\hooks\pre-applypatch.sample:
<code>
#!/bin/sh
#
# An example hook script to verify what is about to be committed
# by applypatch from an e-mail message.
#
# The hook should exit with non-zero status after issuing an
# appropriate message if it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-applypatch".

. git-sh-setup
precommit="$(git rev-parse --git-path hooks/pre-commit)"
test -x "$precommit" && exec "$precommit" ${1+"$@"}
:

</code>

.git_disabled\hooks\pre-commit.sample:
<code>
#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git commit" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message if
# it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-commit".

if git rev-parse --verify HEAD >/dev/null 2>&1
then
	against=HEAD
else
	# Initial commit: diff against an empty tree object
	against=$(git hash-object -t tree /dev/null)
fi

# If you want to allow non-ASCII filenames set this variable to true.
allownonascii=$(git config --type=bool hooks.allownonascii)

# Redirect output to stderr.
exec 1>&2

# Cross platform projects tend to avoid non-ASCII filenames; prevent
# them from being added to the repository. We exploit the fact that the
# printable range starts at the space character and ends with tilde.
if [ "$allownonascii" != "true" ] &&
	# Note that the use of brackets around a tr range is ok here, (it's
	# even required, for portability to Solaris 10's /usr/bin/tr), since
	# the square bracket bytes happen to fall in the designated range.
	test $(git diff-index --cached --name-only --diff-filter=A -z $against |
	  LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
then
	cat <<\EOF
Error: Attempt to add a non-ASCII file name.

This can cause problems if you want to work with people on other platforms.

To be portable it is advisable to rename the file.

If you know what you are doing you can disable this check using:

  git config hooks.allownonascii true
EOF
	exit 1
fi

# If there are whitespace errors, print the offending file names and fail.
exec git diff-index --check --cached $against --

</code>

.git_disabled\hooks\pre-merge-commit.sample:
<code>
#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git merge" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message to
# stderr if it wants to stop the merge commit.
#
# To enable this hook, rename this file to "pre-merge-commit".

. git-sh-setup
test -x "$GIT_DIR/hooks/pre-commit" &&
        exec "$GIT_DIR/hooks/pre-commit"
:

</code>

.git_disabled\hooks\pre-push.sample:
<code>
#!/bin/sh

# An example hook script to verify what is about to be pushed.  Called by "git
# push" after it has checked the remote status, but before anything has been
# pushed.  If this script exits with a non-zero status nothing will be pushed.
#
# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local oid> <remote ref> <remote oid>
#
# This sample shows how to prevent push of commits where the log message starts
# with "WIP" (work in progress).

remote="$1"
url="$2"

zero=$(git hash-object --stdin </dev/null | tr '[0-9a-f]' '0')

while read local_ref local_oid remote_ref remote_oid
do
	if test "$local_oid" = "$zero"
	then
		# Handle delete
		:
	else
		if test "$remote_oid" = "$zero"
		then
			# New branch, examine all commits
			range="$local_oid"
		else
			# Update to existing branch, examine new commits
			range="$remote_oid..$local_oid"
		fi

		# Check for WIP commit
		commit=$(git rev-list -n 1 --grep '^WIP' "$range")
		if test -n "$commit"
		then
			echo >&2 "Found WIP commit in $local_ref, not pushing"
			exit 1
		fi
	fi
done

exit 0

</code>

.git_disabled\hooks\pre-rebase.sample:
<code>
#!/bin/sh
#
# Copyright (c) 2006, 2008 Junio C Hamano
#
# The "pre-rebase" hook is run just before "git rebase" starts doing
# its job, and can prevent the command from running by exiting with
# non-zero status.
#
# The hook is called with the following parameters:
#
# $1 -- the upstream the series was forked from.
# $2 -- the branch being rebased (or empty when rebasing the current branch).
#
# This sample shows how to prevent topic branches that are already
# merged to 'next' branch from getting rebased, because allowing it
# would result in rebasing already published history.

publish=next
basebranch="$1"
if test "$#" = 2
then
	topic="refs/heads/$2"
else
	topic=`git symbolic-ref HEAD` ||
	exit 0 ;# we do not interrupt rebasing detached HEAD
fi

case "$topic" in
refs/heads/??/*)
	;;
*)
	exit 0 ;# we do not interrupt others.
	;;
esac

# Now we are dealing with a topic branch being rebased
# on top of master.  Is it OK to rebase it?

# Does the topic really exist?
git show-ref -q "$topic" || {
	echo >&2 "No such branch $topic"
	exit 1
}

# Is topic fully merged to master?
not_in_master=`git rev-list --pretty=oneline ^master "$topic"`
if test -z "$not_in_master"
then
	echo >&2 "$topic is fully merged to master; better remove it."
	exit 1 ;# we could allow it, but there is no point.
fi

# Is topic ever merged to next?  If so you should not be rebasing it.
only_next_1=`git rev-list ^master "^$topic" ${publish} | sort`
only_next_2=`git rev-list ^master           ${publish} | sort`
if test "$only_next_1" = "$only_next_2"
then
	not_in_topic=`git rev-list "^$topic" master`
	if test -z "$not_in_topic"
	then
		echo >&2 "$topic is already up to date with master"
		exit 1 ;# we could allow it, but there is no point.
	else
		exit 0
	fi
else
	not_in_next=`git rev-list --pretty=oneline ^${publish} "$topic"`
	/usr/bin/perl -e '
		my $topic = $ARGV[0];
		my $msg = "* $topic has commits already merged to public branch:\n";
		my (%not_in_next) = map {
			/^([0-9a-f]+) /;
			($1 => 1);
		} split(/\n/, $ARGV[1]);
		for my $elem (map {
				/^([0-9a-f]+) (.*)$/;
				[$1 => $2];
			} split(/\n/, $ARGV[2])) {
			if (!exists $not_in_next{$elem->[0]}) {
				if ($msg) {
					print STDERR $msg;
					undef $msg;
				}
				print STDERR " $elem->[1]\n";
			}
		}
	' "$topic" "$not_in_next" "$not_in_master"
	exit 1
fi

<<\DOC_END

This sample hook safeguards topic branches that have been
published from being rewound.

The workflow assumed here is:

 * Once a topic branch forks from "master", "master" is never
   merged into it again (either directly or indirectly).

 * Once a topic branch is fully cooked and merged into "master",
   it is deleted.  If you need to build on top of it to correct
   earlier mistakes, a new topic branch is created by forking at
   the tip of the "master".  This is not strictly necessary, but
   it makes it easier to keep your history simple.

 * Whenever you need to test or publish your changes to topic
   branches, merge them into "next" branch.

The script, being an example, hardcodes the publish branch name
to be "next", but it is trivial to make it configurable via
$GIT_DIR/config mechanism.

With this workflow, you would want to know:

(1) ... if a topic branch has ever been merged to "next".  Young
    topic branches can have stupid mistakes you would rather
    clean up before publishing, and things that have not been
    merged into other branches can be easily rebased without
    affecting other people.  But once it is published, you would
    not want to rewind it.

(2) ... if a topic branch has been fully merged to "master".
    Then you can delete it.  More importantly, you should not
    build on top of it -- other people may already want to
    change things related to the topic as patches against your
    "master", so if you need further changes, it is better to
    fork the topic (perhaps with the same name) afresh from the
    tip of "master".

Let's look at this example:

		   o---o---o---o---o---o---o---o---o---o "next"
		  /       /           /           /
		 /   a---a---b A     /           /
		/   /               /           /
	       /   /   c---c---c---c B         /
	      /   /   /             \         /
	     /   /   /   b---b C     \       /
	    /   /   /   /             \     /
    ---o---o---o---o---o---o---o---o---o---o---o "master"


A, B and C are topic branches.

 * A has one fix since it was merged up to "next".

 * B has finished.  It has been fully merged up to "master" and "next",
   and is ready to be deleted.

 * C has not merged to "next" at all.

We would want to allow C to be rebased, refuse A, and encourage
B to be deleted.

To compute (1):

	git rev-list ^master ^topic next
	git rev-list ^master        next

	if these match, topic has not merged in next at all.

To compute (2):

	git rev-list master..topic

	if this is empty, it is fully merged to "master".

DOC_END

</code>

.git_disabled\hooks\pre-receive.sample:
<code>
#!/bin/sh
#
# An example hook script to make use of push options.
# The example simply echoes all push options that start with 'echoback='
# and rejects all pushes when the "reject" push option is used.
#
# To enable this hook, rename this file to "pre-receive".

if test -n "$GIT_PUSH_OPTION_COUNT"
then
	i=0
	while test "$i" -lt "$GIT_PUSH_OPTION_COUNT"
	do
		eval "value=\$GIT_PUSH_OPTION_$i"
		case "$value" in
		echoback=*)
			echo "echo from the pre-receive-hook: ${value#*=}" >&2
			;;
		reject)
			exit 1
		esac
		i=$((i + 1))
	done
fi

</code>

.git_disabled\hooks\prepare-commit-msg.sample:
<code>
#!/bin/sh
#
# An example hook script to prepare the commit log message.
# Called by "git commit" with the name of the file that has the
# commit message, followed by the description of the commit
# message's source.  The hook's purpose is to edit the commit
# message file.  If the hook fails with a non-zero status,
# the commit is aborted.
#
# To enable this hook, rename this file to "prepare-commit-msg".

# This hook includes three examples. The first one removes the
# "# Please enter the commit message..." help message.
#
# The second includes the output of "git diff --name-status -r"
# into the message, just before the "git status" output.  It is
# commented because it doesn't cope with --amend or with squashed
# commits.
#
# The third example adds a Signed-off-by line to the message, that can
# still be edited.  This is rarely a good idea.

COMMIT_MSG_FILE=$1
COMMIT_SOURCE=$2
SHA1=$3

/usr/bin/perl -i.bak -ne 'print unless(m/^. Please enter the commit message/..m/^#$/)' "$COMMIT_MSG_FILE"

# case "$COMMIT_SOURCE,$SHA1" in
#  ,|template,)
#    /usr/bin/perl -i.bak -pe '
#       print "\n" . `git diff --cached --name-status -r`
# 	 if /^#/ && $first++ == 0' "$COMMIT_MSG_FILE" ;;
#  *) ;;
# esac

# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
# git interpret-trailers --in-place --trailer "$SOB" "$COMMIT_MSG_FILE"
# if test -z "$COMMIT_SOURCE"
# then
#   /usr/bin/perl -i.bak -pe 'print "\n" if !$first_line++' "$COMMIT_MSG_FILE"
# fi

</code>

.git_disabled\hooks\push-to-checkout.sample:
<code>
#!/bin/sh

# An example hook script to update a checked-out tree on a git push.
#
# This hook is invoked by git-receive-pack(1) when it reacts to git
# push and updates reference(s) in its repository, and when the push
# tries to update the branch that is currently checked out and the
# receive.denyCurrentBranch configuration variable is set to
# updateInstead.
#
# By default, such a push is refused if the working tree and the index
# of the remote repository has any difference from the currently
# checked out commit; when both the working tree and the index match
# the current commit, they are updated to match the newly pushed tip
# of the branch. This hook is to be used to override the default
# behaviour; however the code below reimplements the default behaviour
# as a starting point for convenient modification.
#
# The hook receives the commit with which the tip of the current
# branch is going to be updated:
commit=$1

# It can exit with a non-zero status to refuse the push (when it does
# so, it must not modify the index or the working tree).
die () {
	echo >&2 "$*"
	exit 1
}

# Or it can make any necessary changes to the working tree and to the
# index to bring them to the desired state when the tip of the current
# branch is updated to the new commit, and exit with a zero status.
#
# For example, the hook can simply run git read-tree -u -m HEAD "$1"
# in order to emulate git fetch that is run in the reverse direction
# with git push, as the two-tree form of git read-tree -u -m is
# essentially the same as git switch or git checkout that switches
# branches while keeping the local changes in the working tree that do
# not interfere with the difference between the branches.

# The below is a more-or-less exact translation to shell of the C code
# for the default behaviour for git's push-to-checkout hook defined in
# the push_to_deploy() function in builtin/receive-pack.c.
#
# Note that the hook will be executed from the repository directory,
# not from the working tree, so if you want to perform operations on
# the working tree, you will have to adapt your code accordingly, e.g.
# by adding "cd .." or using relative paths.

if ! git update-index -q --ignore-submodules --refresh
then
	die "Up-to-date check failed"
fi

if ! git diff-files --quiet --ignore-submodules --
then
	die "Working directory has unstaged changes"
fi

# This is a rough translation of:
#
#   head_has_history() ? "HEAD" : EMPTY_TREE_SHA1_HEX
if git cat-file -e HEAD 2>/dev/null
then
	head=HEAD
else
	head=$(git hash-object -t tree --stdin </dev/null)
fi

if ! git diff-index --quiet --cached --ignore-submodules $head --
then
	die "Working directory has staged changes"
fi

if ! git read-tree -u -m "$commit"
then
	die "Could not update working tree to new HEAD"
fi

</code>

.git_disabled\hooks\sendemail-validate.sample:
<code>
#!/bin/sh

# An example hook script to validate a patch (and/or patch series) before
# sending it via email.
#
# The hook should exit with non-zero status after issuing an appropriate
# message if it wants to prevent the email(s) from being sent.
#
# To enable this hook, rename this file to "sendemail-validate".
#
# By default, it will only check that the patch(es) can be applied on top of
# the default upstream branch without conflicts in a secondary worktree. After
# validation (successful or not) of the last patch of a series, the worktree
# will be deleted.
#
# The following config variables can be set to change the default remote and
# remote ref that are used to apply the patches against:
#
#   sendemail.validateRemote (default: origin)
#   sendemail.validateRemoteRef (default: HEAD)
#
# Replace the TODO placeholders with appropriate checks according to your
# needs.

validate_cover_letter () {
	file="$1"
	# TODO: Replace with appropriate checks (e.g. spell checking).
	true
}

validate_patch () {
	file="$1"
	# Ensure that the patch applies without conflicts.
	git am -3 "$file" || return
	# TODO: Replace with appropriate checks for this patch
	# (e.g. checkpatch.pl).
	true
}

validate_series () {
	# TODO: Replace with appropriate checks for the whole series
	# (e.g. quick build, coding style checks, etc.).
	true
}

# main -------------------------------------------------------------------------

if test "$GIT_SENDEMAIL_FILE_COUNTER" = 1
then
	remote=$(git config --default origin --get sendemail.validateRemote) &&
	ref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&
	worktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&
	git worktree add -fd --checkout "$worktree" "refs/remotes/$remote/$ref" &&
	git config --replace-all sendemail.validateWorktree "$worktree"
else
	worktree=$(git config --get sendemail.validateWorktree)
fi || {
	echo "sendemail-validate: error: failed to prepare worktree" >&2
	exit 1
}

unset GIT_DIR GIT_WORK_TREE
cd "$worktree" &&

if grep -q "^diff --git " "$1"
then
	validate_patch "$1"
else
	validate_cover_letter "$1"
fi &&

if test "$GIT_SENDEMAIL_FILE_COUNTER" = "$GIT_SENDEMAIL_FILE_TOTAL"
then
	git config --unset-all sendemail.validateWorktree &&
	trap 'git worktree remove -ff "$worktree"' EXIT &&
	validate_series
fi

</code>

.git_disabled\hooks\update.sample:
<code>
#!/bin/sh
#
# An example hook script to block unannotated tags from entering.
# Called by "git receive-pack" with arguments: refname sha1-old sha1-new
#
# To enable this hook, rename this file to "update".
#
# Config
# ------
# hooks.allowunannotated
#   This boolean sets whether unannotated tags will be allowed into the
#   repository.  By default they won't be.
# hooks.allowdeletetag
#   This boolean sets whether deleting tags will be allowed in the
#   repository.  By default they won't be.
# hooks.allowmodifytag
#   This boolean sets whether a tag may be modified after creation. By default
#   it won't be.
# hooks.allowdeletebranch
#   This boolean sets whether deleting branches will be allowed in the
#   repository.  By default they won't be.
# hooks.denycreatebranch
#   This boolean sets whether remotely creating branches will be denied
#   in the repository.  By default this is allowed.
#

# --- Command line
refname="$1"
oldrev="$2"
newrev="$3"

# --- Safety check
if [ -z "$GIT_DIR" ]; then
	echo "Don't run this script from the command line." >&2
	echo " (if you want, you could supply GIT_DIR then run" >&2
	echo "  $0 <ref> <oldrev> <newrev>)" >&2
	exit 1
fi

if [ -z "$refname" -o -z "$oldrev" -o -z "$newrev" ]; then
	echo "usage: $0 <ref> <oldrev> <newrev>" >&2
	exit 1
fi

# --- Config
allowunannotated=$(git config --type=bool hooks.allowunannotated)
allowdeletebranch=$(git config --type=bool hooks.allowdeletebranch)
denycreatebranch=$(git config --type=bool hooks.denycreatebranch)
allowdeletetag=$(git config --type=bool hooks.allowdeletetag)
allowmodifytag=$(git config --type=bool hooks.allowmodifytag)

# check for no description
projectdesc=$(sed -e '1q' "$GIT_DIR/description")
case "$projectdesc" in
"Unnamed repository"* | "")
	echo "*** Project description file hasn't been set" >&2
	exit 1
	;;
esac

# --- Check types
# if $newrev is 0000...0000, it's a commit to delete a ref.
zero=$(git hash-object --stdin </dev/null | tr '[0-9a-f]' '0')
if [ "$newrev" = "$zero" ]; then
	newrev_type=delete
else
	newrev_type=$(git cat-file -t $newrev)
fi

case "$refname","$newrev_type" in
	refs/tags/*,commit)
		# un-annotated tag
		short_refname=${refname##refs/tags/}
		if [ "$allowunannotated" != "true" ]; then
			echo "*** The un-annotated tag, $short_refname, is not allowed in this repository" >&2
			echo "*** Use 'git tag [ -a | -s ]' for tags you want to propagate." >&2
			exit 1
		fi
		;;
	refs/tags/*,delete)
		# delete tag
		if [ "$allowdeletetag" != "true" ]; then
			echo "*** Deleting a tag is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/tags/*,tag)
		# annotated tag
		if [ "$allowmodifytag" != "true" ] && git rev-parse $refname > /dev/null 2>&1
		then
			echo "*** Tag '$refname' already exists." >&2
			echo "*** Modifying a tag is not allowed in this repository." >&2
			exit 1
		fi
		;;
	refs/heads/*,commit)
		# branch
		if [ "$oldrev" = "$zero" -a "$denycreatebranch" = "true" ]; then
			echo "*** Creating a branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/heads/*,delete)
		# delete branch
		if [ "$allowdeletebranch" != "true" ]; then
			echo "*** Deleting a branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/remotes/*,commit)
		# tracking branch
		;;
	refs/remotes/*,delete)
		# delete tracking branch
		if [ "$allowdeletebranch" != "true" ]; then
			echo "*** Deleting a tracking branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	*)
		# Anything else (is there anything else?)
		echo "*** Update hook: unknown type of update to ref $refname of type $newrev_type" >&2
		exit 1
		;;
esac

# --- Finished
exit 0

</code>

.git_disabled\info\exclude:
<code>
# git ls-files --others --exclude-from=.git/info/exclude
# Lines that start with '#' are comments.
# For a project mostly in C, the following would be a good set of
# exclude patterns (uncomment them if you want to use them):
# *.[oa]
# *~

</code>

.git_disabled\objects\1a\d487a68883d1605eb03d9f70cf88c1979c47a8:
<code>
xA0EgSx_&vXP\E6U?CރϽ]C8g MΘ|AI%G!M-/>8)Btm%hÅ#Q>ՇV~Ko{pS9	߳~Lׇu+f7XE*_$L~vG`{E>зP
</code>

.git_disabled\objects\38\14c19270084a4c52df0ec8e83ceb270a020764:
<code>
x}j@ECԊz)*M@Iq /U!+yRoUM[ivB)g3SOos!sxiWB/[&+4.IxD9;k8#&	mF_Y@:|P=9`'Am7',+g( YVJR`z}
KqnǿXh~U,[lH"jzF5$<A@z߫ўkRa:ki#}P*hG:/|q
6T3FaG8rPsH{qL+
|4و#gTc&gwƧ6cYq{ÞwKO	hu
</code>

.git_disabled\objects\38\79c356906d2d64a619180e7b613172b37a7128:
<code>
xKn D)z?ƸAE9D.c|hrlW|lvS,kBE)\G;;^PP
$^
fQ,7xiL#W+ğSop/frܯY#y>/UZnnF:D[byBå?Jek^A	(1qԯ/M_h
</code>

.git_disabled\objects\4b\6ee9970b85fc6f1e120251b74076181c9c4cf6:
<code>
x+)JMU04d040031QNM-`x6M9{wk+qIODļĜʪT܂Ԋ̒Jb_Z~\~_͝[w@'&e椂oJIVycL9sQ.?j]MC椖Sh^@aa]ڡUꞚZZ\WvE@_[l?(uEg^IjQYfjc^qyjA;ԵwWYU9IzRssSR@*+ox2g|櫏?
_=rb"$ޅƹf3.3f}kg8nkŵ&'	慹`.).I,*;d(M>4Dqڊ/l
Pɵ
</code>

.git_disabled\objects\ab\efc49e32ba319887e9bd0c75c5413d2c42d0a5:
<code>
xMN0YxJ4!~h(M%=axa	yTw+,L[o4[g
7Ώd`RHztdd%ҹ"4y6-[=g[rClT*Fvmu?hU{am߅C]K5gOɩW;.p<yLSgs	kK
</code>

.git_disabled\objects\b7\da425dc322b1df4b0abf0e53bdcc0c392f4630:
<code>
xIj0@Ѭuڇ6%UirҔX12;/?1c]B9;ՖIǖ(,*NHEk)W=Fn>69Z;a2%zd(2{yIMR
oyoRtڰOU_A@:䧬4?"#L
</code>

.git_disabled\objects\c0\eb4e747f9702194708cb28c3964e99b85152d5:
<code>
xώ09)nDBe	&$63NiGn=o~3ҎPի5\<H!7%
ת QU۶&tdYTTUbDV-aslQ(T15^Y*\bջnD=,B)uP^r@ah$)J[|m?~ްQ	>(w\@?wda\ޣr.<LlU hLH>hk<H{$MGZ@oF_J6:CK&gIS3xp$l,g}S~kA:-=j{uޞ<$Ԑd)vNW\H蹶u;I3P!C\6r3
xh_"MMgrϣc؆D<B2caI|d>63p"2p$+&i(1Mlǆ#B+
</code>

.git_disabled\objects\c3\46919b74899913af4d0b53c230e30f1aa86ee0:
<code>
x+)JMU00e040031Q(-NuH,q,.,.I++)fNuWȮ#$g$'2Z6Y@".mRĜb;OmvX|gCڞ9l
Ař%E`{{N5p=/~c>	uL
</code>

.git_disabled\objects\dc\d8a912d836112d2dd2db831bba1d9e939348ec:
<code>
x=j0S[&!59zzؒd)fo(G 'T330.dVIogi3X3
Γi5([GVN{ZN[ʀ]W3Ww탰>P:a\B@+c}mXTsnD=d>w$bϏP߱+rfVJ`Ùq)Mx n9l
</code>

.git_disabled\objects\e0\9ad5cde4c6a3188db26f322664768467f3bd71:
<code>
x9n0@: 
%R5En9.`{l)Qm(>ޤcNWnꁋObtw7j=F/&HrVx}.c̓>hpJױ=p?6'\	:i^B-OC)y
(Pu
</code>

.git_disabled\objects\ee\be724394746bf4096d1fc928b00a22ae22d854:
<code>
x+)JMU00e040031Q(-NuH,q,.,.I++)f2k[3?aJY2Q=!$g$'2Z6Y@".mRĜb;OmvX|gCڞ9l
Ař%E`{{N5p=/~c>	 M
</code>

.git_disabled\objects\f5\6aef32d449c7f636fb87b966963e83e6dcbc2b:
<code>
xAN a={c3@JbXi}wp/evq^t\ =8&v9zv[#:5Z.TUr7F*iGJAapЭ_c:ƣj$2
g\hFiy<sThaQ)znt|K7{SxR
</code>

.git_disabled\objects\f8\1eacd6b094f79f39edd3540cb7f0116a432268:
<code>
xAN @]Ԩ_(1FctJ5z////I)Ufɑ%膡`T>[@8
FĶ'BrZhRh&T:E*\d{eoV$<a}>\0ϧ$LBo=*Twc?ݛu-Jz}~oy9ÇDh|xkWn`ɉR-'(BZe[Zp*H@3~]q
</code>

.git_disabled\refs\heads\master:
<code>
0c909c0aad308036c8d1a57b4d209eefde86a84e

</code>

.git_disabled\refs\remotes\origin\HEAD:
<code>
ref: refs/remotes/origin/master

</code>

.git_disabled\refs\remotes\origin\master:
<code>
0c909c0aad308036c8d1a57b4d209eefde86a84e

</code>

.git_disabled\COMMIT_EDITMSG:
<code>
chatbot api update

</code>

.git_disabled\config:
<code>
[core]
	repositoryformatversion = 0
	filemode = false
	bare = false
	logallrefupdates = true
	symlinks = false
	ignorecase = true
[remote "origin"]
	url = https://github.com/almond-donut/NeatRepo
	fetch = +refs/heads/*:refs/remotes/origin/*
[branch "master"]
	remote = origin
	merge = refs/heads/master
	vscode-merge-base = origin/master

</code>

.git_disabled\description:
<code>
Unnamed repository; edit this file 'description' to name the repository.

</code>

.git_disabled\FETCH_HEAD:
<code>
d99394931af4599e010dd919db76821be4aa47fd		branch 'master' of https://github.com/almond-donut/NeatRepo

</code>

.git_disabled\HEAD:
<code>
ref: refs/heads/master

</code>

.git_disabled\ORIG_HEAD:
<code>
abefc49e32ba319887e9bd0c75c5413d2c42d0a5

</code>

.git_disabled\packed-refs:
<code>
# pack-refs with: peeled fully-peeled sorted 
de580ce5dfaf646c29987af02c433bf60f7f758a refs/remotes/origin/master
04dd95241f9aed9c1517b153eb8a538bc69e6049 refs/remotes/origin/refactor-ai-assistant-engine-and-update-authentication-state-management

</code>

.git_disabled\REBASE_HEAD:
<code>
abefc49e32ba319887e9bd0c75c5413d2c42d0a5

</code>

app\api\analyze\route.ts:
<code>
import { type NextRequest, NextResponse } from "next/server"
import { geminiAI } from "@/lib/gemini"

export async function POST(request: NextRequest) {
  try {
    const { repository, userProfile } = await request.json()

    if (!repository) {
      return NextResponse.json({ error: "Repository data is required" }, { status: 400 })
    }

    // Analyze repository using Gemini AI
    const analysis = await geminiAI.analyzeRepository(repository, userProfile)

    return NextResponse.json({
      success: true,
      analysis,
    })
  } catch (error) {
    console.error("Analysis error:", error)
    return NextResponse.json({ error: "Failed to analyze repository" }, { status: 500 })
  }
}

</code>

app\api\auth\callback\route.ts:
<code>
// app/api/auth/callback/route.ts
import { createServerClient, type CookieOptions } from '@supabase/ssr'
import { NextResponse, type NextRequest } from 'next/server'

export async function GET(request: NextRequest) {
  const { searchParams, origin } = new URL(request.url)
  const code = searchParams.get('code')
  // if "next" is in param, use it as the redirect URL
  const next = searchParams.get('next') ?? '/dashboard'

  if (code) {
    // 1. Create the NextResponse object to redirect the user
    const response = NextResponse.redirect(`${origin}${next}`)

    // 2. Create a Supabase client that can write cookies to the response object
    const supabase = createServerClient(
      process.env.NEXT_PUBLIC_SUPABASE_URL!,
      process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
      {
        cookies: {
          get(name: string) {
            return request.cookies.get(name)?.value
          },
          set(name: string, value: string, options: CookieOptions) {
            // The auth helper will call this function to set the session cookies
            response.cookies.set({ name, value, ...options })
          },
          remove(name: string, options: CookieOptions) {
            // The auth helper will call this function to remove the session cookies
            response.cookies.set({ name, value: '', ...options })
          },
        },
      }
    )

    // 3. Exchange the auth code for a session, which automatically sets the cookies on the response
    const { error } = await supabase.auth.exchangeCodeForSession(code)
    if (!error) {
      // 4. Return the response object which now has the session cookies
      return response
    }
  }

  // If there's an error or no code, redirect to an error page
  console.error('AUTH CALLBACK ERROR: Could not exchange code for session.');
  return NextResponse.redirect(`${origin}/auth/error`)
}
</code>

app\api\bug-report\route.ts:
<code>
import { NextRequest, NextResponse } from 'next/server'
import nodemailer from 'nodemailer'
import { createClient } from '@supabase/supabase-js'

// Initialize Supabase client
const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
)

export async function POST(request: NextRequest) {
  try {
    const formData = await request.formData()
    
    // Extract form fields
    const userEmail = formData.get('userEmail') as string
    const bugTitle = formData.get('bugTitle') as string
    const bugDescription = formData.get('bugDescription') as string
    const stepsToReproduce = formData.get('stepsToReproduce') as string
    const expectedBehavior = formData.get('expectedBehavior') as string
    const actualBehavior = formData.get('actualBehavior') as string
    const browserInfo = formData.get('browserInfo') as string
    const additionalInfo = formData.get('additionalInfo') as string
    const timestamp = formData.get('timestamp') as string
    const url = formData.get('url') as string
    const referrer = formData.get('referrer') as string

    // Extract and upload screenshots to Supabase
    const screenshotUrls: string[] = []
    const attachments: { filename: string; content: Buffer; cid: string }[] = []
    for (const [key, value] of formData.entries()) {
      if (key.startsWith('screenshot_') && value instanceof File) {
        try {
          const fileExt = value.name.split('.').pop()
          const fileName = `bug-reports/${Date.now()}-${Math.random().toString(36).substring(2)}.${fileExt}`

          const { data, error } = await supabase.storage
            .from('bug-reports') // Using dedicated bug-reports bucket
            .upload(fileName, value, {
              contentType: value.type,
              upsert: false
            })

          if (error) {
            console.error('Error uploading screenshot:', error)
            // Continue without this screenshot rather than failing completely
          } else {
            // Get public URL
            const { data: { publicUrl } } = supabase.storage
              .from('bug-reports')
              .getPublicUrl(fileName)

            screenshotUrls.push(publicUrl)

            // Prepare inline attachment for email (download from uploaded File)
            const arrayBuffer = await value.arrayBuffer()
            attachments.push({
              filename: value.name,
              content: Buffer.from(arrayBuffer),
              cid: `screenshot-${attachments.length}`
            })
          }
        } catch (uploadError) {
          console.error('Screenshot upload error:', uploadError)
          // Continue without this screenshot
        }
      }
    }

    // Validate required fields
    if (!userEmail || !bugTitle || !bugDescription) {
      return NextResponse.json(
        { error: 'Missing required fields' },
        { status: 400 }
      )
    }

    // Determine if SMTP email service is configured
    const emailServiceAvailable = !!process.env.SMTP_USER && !!process.env.SMTP_PASS;
    console.log('📧 Email service available:', emailServiceAvailable, {
      hasUser: !!process.env.SMTP_USER,
      hasPass: !!process.env.SMTP_PASS
    });

    // Create email transporter only if service is available
    const transporter = emailServiceAvailable
      ? nodemailer.createTransport({
          service: 'gmail',
          auth: {
            user: process.env.SMTP_USER,
            pass: process.env.SMTP_PASS
          }
        })
      : null;

    // Format email content (plain text for fallback)
    const textContent = `
🐛 NEW BUG REPORT - NeatRepo

📧 Reporter Email: ${userEmail}
🕒 Timestamp: ${new Date(timestamp).toLocaleString('id-ID', { timeZone: 'Asia/Jakarta' })}
🌐 URL: ${url}
🔗 Referrer: ${referrer || 'Direct access'}

═══════════════════════════════════════

📋 BUG TITLE:
${bugTitle}

📝 DETAILED DESCRIPTION:
${bugDescription}

${stepsToReproduce ? `🔄 STEPS TO REPRODUCE:
${stepsToReproduce}

` : ''}${expectedBehavior ? `✅ EXPECTED BEHAVIOR:
${expectedBehavior}

` : ''}${actualBehavior ? `❌ ACTUAL BEHAVIOR:
${actualBehavior}

` : ''}🌐 BROWSER INFO:
${browserInfo}

${additionalInfo ? `ℹ️ ADDITIONAL INFO:
${additionalInfo}

` : ''}═══════════════════════════════════════

📸 Screenshots: ${screenshotUrls.length} file(s) uploaded to Supabase
${screenshotUrls.length > 0 ? `
🔗 Screenshot URLs:
${screenshotUrls.map((url, index) => `${index + 1}. ${url}`).join('\n')}
` : ''}
🔧 Auto-generated by NeatRepo Bug Report System
    `

    // HTML version with inline images
    const htmlContent = `
      <h2>🐛 NEW BUG REPORT - NeatRepo</h2>
      <p><strong>Reporter Email:</strong> ${userEmail}<br/>
      <strong>Timestamp:</strong> ${new Date(timestamp).toLocaleString('id-ID', { timeZone: 'Asia/Jakarta' })}<br/>
      <strong>URL:</strong> <a href="${url}">${url}</a><br/>
      <strong>Referrer:</strong> ${referrer || 'Direct access'}</p>
      <hr/>
      <h3>📋 BUG TITLE</h3>
      <p>${bugTitle}</p>
      <h3>📝 DETAILED DESCRIPTION</h3>
      <p>${bugDescription.replace(/\n/g,'<br/>')}</p>
      ${stepsToReproduce ? `<h3>🔄 STEPS TO REPRODUCE</h3><p>${stepsToReproduce.replace(/\n/g,'<br/>')}</p>` : ''}
      ${expectedBehavior ? `<h3>✅ EXPECTED BEHAVIOR</h3><p>${expectedBehavior.replace(/\n/g,'<br/>')}</p>` : ''}
      ${actualBehavior ? `<h3>❌ ACTUAL BEHAVIOR</h3><p>${actualBehavior.replace(/\n/g,'<br/>')}</p>` : ''}
      <h3>🌐 BROWSER INFO</h3>
      <p>${browserInfo}</p>
      ${additionalInfo ? `<h3>ℹ️ ADDITIONAL INFO</h3><p>${additionalInfo.replace(/\n/g,'<br/>')}</p>` : ''}
      <hr/>
      <h3>📸 Screenshots (${attachments.length})</h3>
      ${attachments.map((att, idx) => `<p><img src="cid:${att.cid}" style="max-width:100%;border:1px solid #ccc" alt="screenshot ${idx+1}"/></p>`).join('')}
      <p>🔧 Auto-generated by NeatRepo Bug Report System</p>
    `;

    // Send email if service is available
    if (emailServiceAvailable && transporter) {
      try {
        console.log('📧 Attempting to send email to:', 'prada.202201006@student.stikomyos.ac.id');
        await transporter.sendMail({
          from: process.env.SMTP_USER!,
          to: 'prada.202201006@student.stikomyos.ac.id',
          replyTo: userEmail,
          subject: `🐛 Bug Report: ${bugTitle} - NeatRepo`,
          text: textContent,
          html: htmlContent,
          attachments
          // No attachments needed since screenshots are in Supabase with URLs
        });
        console.log('✅ Email sent successfully!');
      } catch (emailError) {
        console.error('❌ Email sending failed:', emailError);
        // Don't fail the whole request if email fails
      }
    } else {
      console.log('📭 Email service not configured – bug report stored with screenshots in Supabase.')
    }

    return NextResponse.json({ 
      success: true, 
      message: 'Bug report sent successfully' 
    })

  } catch (error) {
    console.error('Error sending bug report:', error)
    return NextResponse.json(
      { error: 'Failed to send bug report' },
      { status: 500 }
    )
  }
}

</code>

app\api\session\route.ts:
<code>
import { type NextRequest, NextResponse } from "next/server"

export async function GET(request: NextRequest) {
  try {
    const sessionCookie = request.cookies.get("github_session")

    if (!sessionCookie) {
      return NextResponse.json({ error: "No session found" }, { status: 401 })
    }

    const sessionData = JSON.parse(sessionCookie.value)

    // Verify session is still valid (not expired)
    const authenticatedAt = new Date(sessionData.authenticated_at)
    const now = new Date()
    const daysSinceAuth = (now.getTime() - authenticatedAt.getTime()) / (1000 * 60 * 60 * 24)

    if (daysSinceAuth > 7) {
      // Session expired
      return NextResponse.json({ error: "Session expired" }, { status: 401 })
    }

    // Remove sensitive data before sending to client
    const { access_token, ...safeSessionData } = sessionData

    return NextResponse.json(safeSessionData)
  } catch (error) {
    console.error("Session fetch error:", error)
    return NextResponse.json({ error: "Invalid session" }, { status: 401 })
  }
}

export async function DELETE(request: NextRequest) {
  try {
    const response = NextResponse.json({ success: true })

    // Clear the session cookie
    response.cookies.set("github_session", "", {
      httpOnly: true,
      secure: process.env.NODE_ENV === "production",
      sameSite: "lax",
      maxAge: 0, // Expire immediately
    })

    return response
  } catch (error) {
    console.error("Session delete error:", error)
    return NextResponse.json({ error: "Failed to sign out" }, { status: 500 })
  }
}

</code>

app\api\user\profile\route.ts:
<code>

import { createServerClient } from '@supabase/ssr';
import { cookies } from 'next/headers';
import { NextResponse } from 'next/server';

export const dynamic = 'force-dynamic';

export async function GET() {
  const cookieStore = cookies();

  // Create a server-side Supabase client that can read the user's session from cookies
  const supabase = createServerClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    {
      cookies: {
        get(name: string) {
          return cookieStore.get(name)?.value;
        },
      },
    }
  );

  try {
    // 1. Get the current user's session
    const { data: { session } } = await supabase.auth.getSession();

    if (!session) {
      return NextResponse.json({ error: 'Not authenticated' }, { status: 401 });
    }

    // 2. Securely fetch the profile for the authenticated user
    const { data: profile, error: profileError } = await supabase
      .from('user_profiles')
      .select('*')
      .eq('id', session.user.id)
      .single();

    if (profileError) {
      // This is expected if the profile hasn't been created yet
      if (profileError.code === 'PGRST116') {
        console.log(`API: No profile found for user ${session.user.id}, returning null.`);
        return NextResponse.json(null, { status: 200 });
      }
      // For other errors, log them and return a server error
      console.error('API Profile Fetch DB Error:', profileError);
      return NextResponse.json({ error: 'Failed to fetch profile from database' }, { status: 500 });
    }

    // 3. Return the profile data
    return NextResponse.json(profile);

  } catch (error) {
    console.error('API Profile Fetch CATCH Error:', error);
    return NextResponse.json({ error: 'An unexpected error occurred' }, { status: 500 });
  }
}

</code>

app\auth\error\page.tsx:
<code>
"use client"

import { useSearchParams, useRouter } from 'next/navigation'
import { useEffect, useState } from 'react'
import { Button } from '@/components/ui/button'
import { AlertCircle, Home, RefreshCw } from 'lucide-react'

export default function AuthErrorPage() {
  const searchParams = useSearchParams()
  const router = useRouter()
  const [error, setError] = useState<string>('')

  useEffect(() => {
    const errorParam = searchParams.get('error')
    setError(errorParam || 'Unknown authentication error')
  }, [searchParams])

  const handleRetry = () => {
    router.push('/')
  }

  const handleGoHome = () => {
    router.push('/')
  }

  return (
    <div className="min-h-screen flex items-center justify-center bg-background">
      <div className="max-w-md w-full mx-4 text-center space-y-6">
        <div className="flex justify-center">
          <div className="rounded-full bg-destructive/10 p-3">
            <AlertCircle className="h-8 w-8 text-destructive" />
          </div>
        </div>
        <div className="space-y-2">
          <h1 className="text-2xl font-bold tracking-tight">
            Authentication Error
          </h1>
          <p className="text-muted-foreground">
            We encountered an issue while trying to sign you in.
          </p>
        </div>
        <div className="bg-muted/50 rounded-lg p-4">
          <p className="text-sm text-muted-foreground">
            <strong>Error:</strong> {error}
          </p>
        </div>
        <div className="space-y-3">
          <Button onClick={handleRetry} className="w-full" size="lg">
            <RefreshCw className="mr-2 h-4 w-4" />
            Try Again
          </Button>
          <Button onClick={handleGoHome} variant="outline" className="w-full" size="lg">
            <Home className="mr-2 h-4 w-4" />
            Go to Homepage
          </Button>
        </div>
      </div>
    </div>
  )
}

</code>

app\bug-report\page.tsx:
<code>
'use client'

// Force dynamic rendering to avoid static generation issues with auth
export const dynamic = 'force-dynamic'

import React, { useState, useEffect } from 'react'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Textarea } from '@/components/ui/textarea'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Label } from '@/components/ui/label'
import { Upload, Send, ArrowLeft, Bug, Camera, AlertCircle, Mail, Github } from 'lucide-react'
import { useRouter } from 'next/navigation'
import { Alert, AlertDescription } from '@/components/ui/alert'
import { useAuth } from '@/components/auth-provider'
import AuthForms from '@/components/auth-forms'

export default function BugReportPage() {
  const router = useRouter()
  const { user, loading } = useAuth()
  const [showAuthForms, setShowAuthForms] = useState(false)
  const [formData, setFormData] = useState({
    userEmail: '',
    bugTitle: '',
    bugDescription: '',
    stepsToReproduce: '',
    expectedBehavior: '',
    actualBehavior: '',
    browserInfo: '',
    additionalInfo: ''
  })
  const [screenshots, setScreenshots] = useState<File[]>([])
  const [isSubmitting, setIsSubmitting] = useState(false)
  const [submitStatus, setSubmitStatus] = useState<'idle' | 'success' | 'error'>('idle')
  const [authError, setAuthError] = useState<string | null>(null)

  // Auto-detect browser info and handle user email
  useEffect(() => {
    const browserInfo = `${navigator.userAgent} | Screen: ${screen.width}x${screen.height} | Viewport: ${window.innerWidth}x${window.innerHeight}`
    setFormData(prev => ({ ...prev, browserInfo }))
  }, [])

  // Handle user authentication and email detection
  useEffect(() => {
    if (user) {
      // Check if user has email (email login) or only OAuth
      if (user.email && !user.email.includes('github')) {
        // User logged in with email - use that email
        setFormData(prev => ({ ...prev, userEmail: user.email || '' }))
        setAuthError(null)
      } else {
        // User logged in with GitHub OAuth - need email login
        setAuthError('Please sign in with your email account to submit bug reports')
      }
    }
  }, [user])

  const handleInputChange = (field: string, value: string) => {
    setFormData(prev => ({ ...prev, [field]: value }))
  }

  const handleScreenshotUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const files = Array.from(event.target.files || [])
    setScreenshots(prev => [...prev, ...files].slice(0, 5)) // Max 5 screenshots
  }

  const removeScreenshot = (index: number) => {
    setScreenshots(prev => prev.filter((_, i) => i !== index))
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setIsSubmitting(true)
    setSubmitStatus('idle')

    try {
      const formDataToSend = new FormData()
      
      // Add form fields
      Object.entries(formData).forEach(([key, value]) => {
        formDataToSend.append(key, value)
      })
      
      // Add screenshots
      screenshots.forEach((file, index) => {
        formDataToSend.append(`screenshot_${index}`, file)
      })
      
      // Add timestamp and additional metadata
      formDataToSend.append('timestamp', new Date().toISOString())
      formDataToSend.append('url', window.location.href)
      formDataToSend.append('referrer', document.referrer)

      const response = await fetch('/api/bug-report', {
        method: 'POST',
        body: formDataToSend
      })

      if (response.ok) {
        setSubmitStatus('success')
        // Reset form after successful submission
        setTimeout(() => {
          router.push('/dashboard')
        }, 3000)
      } else {
        throw new Error('Failed to submit bug report')
      }
    } catch (error) {
      console.error('Error submitting bug report:', error)
      setSubmitStatus('error')
    } finally {
      setIsSubmitting(false)
    }
  }

  // Show auth forms modal if needed
  if (showAuthForms) {
    return <AuthForms onClose={() => setShowAuthForms(false)} />
  }

  // Show OAuth user needs email login
  if (authError && user) {
    return (
      <div className="min-h-screen bg-background flex items-center justify-center p-4">
        <Card className="w-full max-w-md">
          <CardContent className="pt-6 text-center">
            <div className="w-16 h-16 bg-blue-100 dark:bg-blue-900/20 rounded-full flex items-center justify-center mx-auto mb-4">
              <Mail className="w-8 h-8 text-blue-600 dark:text-blue-400" />
            </div>
            <h2 className="text-xl font-semibold mb-2">Email Account Required</h2>
            <p className="text-muted-foreground mb-4">
              To submit bug reports, please sign in with your email account instead of GitHub OAuth.
            </p>
            <div className="flex items-center justify-center gap-2 mb-4 text-sm text-muted-foreground">
              <Github className="w-4 h-4" />
              <span>Currently signed in with GitHub</span>
            </div>
            <div className="space-y-3">
              <Button
                onClick={() => setShowAuthForms(true)}
                className="w-full"
              >
                <Mail className="w-4 h-4 mr-2" />
                Sign In with Email
              </Button>
              <Button
                variant="outline"
                onClick={() => router.push('/dashboard')}
                className="w-full"
              >
                Back to Dashboard
              </Button>
            </div>
          </CardContent>
        </Card>
      </div>
    )
  }

  if (submitStatus === 'success') {
    return (
      <div className="min-h-screen bg-background flex items-center justify-center p-4">
        <Card className="w-full max-w-md">
          <CardContent className="pt-6 text-center">
            <div className="w-16 h-16 bg-green-100 dark:bg-green-900/20 rounded-full flex items-center justify-center mx-auto mb-4">
              <Send className="w-8 h-8 text-green-600 dark:text-green-400" />
            </div>
            <h2 className="text-xl font-semibold mb-2">Bug Report Sent!</h2>
            <p className="text-muted-foreground mb-4">
              Thank you for helping us improve NeatRepo. We'll review your report and get back to you if needed.
            </p>
            <p className="text-sm text-muted-foreground">
              You can now manually navigate to your desired page.
            </p>
          </CardContent>
        </Card>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-background">
      <div className="container mx-auto px-4 py-8 max-w-4xl">
        {/* Header */}
        <div className="flex items-center gap-4 mb-8">
          <Button
            variant="ghost"
            size="sm"
            onClick={() => router.back()}
            className="flex items-center gap-2"
          >
            <ArrowLeft className="w-4 h-4" />
            Back
          </Button>
          <div className="flex items-center gap-3">
            <div className="w-10 h-10 bg-red-100 dark:bg-red-900/20 rounded-lg flex items-center justify-center">
              <Bug className="w-5 h-5 text-red-600 dark:text-red-400" />
            </div>
            <div>
              <h1 className="text-2xl font-bold">Report a Bug</h1>
              <p className="text-muted-foreground">Help us improve NeatRepo by reporting issues</p>
            </div>
          </div>
        </div>

        {submitStatus === 'error' && (
          <Alert variant="destructive" className="mb-6">
            <AlertCircle className="h-4 w-4" />
            <AlertDescription>
              Failed to submit bug report. Please try again or contact support directly.
            </AlertDescription>
          </Alert>
        )}

        <form onSubmit={handleSubmit} className="space-y-6">
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            {/* Left Column */}
            <div className="space-y-6">
              <Card>
                <CardHeader>
                  <CardTitle className="text-lg">Contact Information</CardTitle>
                  <CardDescription>
                    We'll use this to follow up if needed
                  </CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div>
                    <Label htmlFor="userEmail">Your Email Address *</Label>
                    <Input
                      id="userEmail"
                      type="email"
                      placeholder="your.email@example.com"
                      value={formData.userEmail}
                      onChange={(e) => handleInputChange('userEmail', e.target.value)}
                      required
                    />
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle className="text-lg">Bug Details</CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div>
                    <Label htmlFor="bugTitle">Bug Title *</Label>
                    <Input
                      id="bugTitle"
                      placeholder="Brief description of the issue"
                      value={formData.bugTitle}
                      onChange={(e) => handleInputChange('bugTitle', e.target.value)}
                      required
                    />
                  </div>

                  <div>
                    <Label htmlFor="bugDescription">Detailed Description *</Label>
                    <Textarea
                      id="bugDescription"
                      placeholder="Describe what happened in detail..."
                      rows={4}
                      value={formData.bugDescription}
                      onChange={(e) => handleInputChange('bugDescription', e.target.value)}
                      required
                    />
                  </div>

                  <div>
                    <Label htmlFor="stepsToReproduce">Steps to Reproduce</Label>
                    <Textarea
                      id="stepsToReproduce"
                      placeholder="1. Go to...&#10;2. Click on...&#10;3. See error..."
                      rows={4}
                      value={formData.stepsToReproduce}
                      onChange={(e) => handleInputChange('stepsToReproduce', e.target.value)}
                    />
                  </div>
                </CardContent>
              </Card>
            </div>

            {/* Right Column */}
            <div className="space-y-6">
              <Card>
                <CardHeader>
                  <CardTitle className="text-lg flex items-center gap-2">
                    <Camera className="w-5 h-5" />
                    Screenshots
                  </CardTitle>
                  <CardDescription>
                    Upload screenshots to help us understand the issue (max 5 files)
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    <div className="border-2 border-dashed border-muted-foreground/25 rounded-lg p-6 text-center">
                      <Upload className="w-8 h-8 text-muted-foreground mx-auto mb-2" />
                      <Label htmlFor="screenshots" className="cursor-pointer">
                        <span className="text-sm font-medium">Click to upload screenshots</span>
                        <Input
                          id="screenshots"
                          type="file"
                          accept="image/*"
                          multiple
                          className="sr-only"
                          onChange={handleScreenshotUpload}
                        />
                      </Label>
                      <p className="text-xs text-muted-foreground mt-1">
                        PNG, JPG, GIF up to 10MB each
                      </p>
                    </div>

                    {screenshots.length > 0 && (
                      <div className="space-y-2">
                        <Label>Uploaded Screenshots:</Label>
                        {screenshots.map((file, index) => (
                          <div key={index} className="flex items-center justify-between p-2 bg-muted rounded">
                            <span className="text-sm truncate">{file.name}</span>
                            <Button
                              type="button"
                              variant="ghost"
                              size="sm"
                              onClick={() => removeScreenshot(index)}
                            >
                              Remove
                            </Button>
                          </div>
                        ))}
                      </div>
                    )}
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle className="text-lg">Expected vs Actual Behavior</CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div>
                    <Label htmlFor="expectedBehavior">What should happen?</Label>
                    <Textarea
                      id="expectedBehavior"
                      placeholder="Describe the expected behavior..."
                      rows={3}
                      value={formData.expectedBehavior}
                      onChange={(e) => handleInputChange('expectedBehavior', e.target.value)}
                    />
                  </div>

                  <div>
                    <Label htmlFor="actualBehavior">What actually happened?</Label>
                    <Textarea
                      id="actualBehavior"
                      placeholder="Describe what actually happened..."
                      rows={3}
                      value={formData.actualBehavior}
                      onChange={(e) => handleInputChange('actualBehavior', e.target.value)}
                    />
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle className="text-lg">Additional Information</CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div>
                    <Label htmlFor="additionalInfo">Any other details?</Label>
                    <Textarea
                      id="additionalInfo"
                      placeholder="Browser version, device type, frequency of issue, etc..."
                      rows={3}
                      value={formData.additionalInfo}
                      onChange={(e) => handleInputChange('additionalInfo', e.target.value)}
                    />
                  </div>
                </CardContent>
              </Card>
            </div>
          </div>

          {/* Submit Button */}
          <div className="flex justify-end pt-6">
            <Button
              type="submit"
              disabled={isSubmitting || !formData.userEmail || !formData.bugTitle || !formData.bugDescription}
              className="min-w-[150px]"
            >
              {isSubmitting ? (
                <>
                  <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin mr-2" />
                  Sending...
                </>
              ) : (
                <>
                  <Send className="w-4 h-4 mr-2" />
                  Send Bug Report
                </>
              )}
            </Button>
          </div>
        </form>
      </div>
    </div>
  )
}

</code>

app\connect-github\page.tsx:
<code>
"use client"

export const dynamic = 'force-dynamic'

import { useEffect, useState } from 'react'
import { useAuth } from '@/components/auth-provider'
import { Button } from '@/components/ui/button'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'
import { Github, ArrowRight, Shield, Zap, Trash2 } from 'lucide-react'
import { supabase } from '@/lib/supabase'
import { useRouter } from 'next/navigation'

export default function ConnectGitHubPage() {
  const { user, loading } = useAuth()
  const [isConnecting, setIsConnecting] = useState(false)
  const [error, setError] = useState<string | null>(null)
  const router = useRouter()

  // Redirect if not authenticated
  useEffect(() => {
    if (!loading && !user) {
      router.push('/')
    }
  }, [user, loading, router])
  // Check if user already has GitHub connection
  useEffect(() => {
    if (user) {
      // Check if user signed up with GitHub
      const provider = user.app_metadata?.provider
      if (provider === 'github') {
      router.push('/') // Use router for navigation
        window.location.href = '/dashboard'
      }
    }
  }, [user])

  const handleConnectGitHub = async () => {
    setIsConnecting(true)
    setError(null)
        router.push('/dashboard') // Use router for navigation
    try {
      const { error } = await supabase.auth.linkIdentity({
        provider: 'github',
        options: {
          redirectTo: `${window.location.origin}/dashboard`,
          queryParams: {
            access_type: 'offline',
            prompt: 'consent',
          }
        }
      })

      if (error) throw error
    } catch (error: any) {
      console.error('GitHub connection error:', error)
      setError(error.message)
      setIsConnecting(false)
    }
  }

  if (loading) {
    return (
      <div className="min-h-screen bg-background flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4"></div>
          <p className="text-muted-foreground">Loading...</p>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-background flex items-center justify-center p-4">
      <div className="max-w-md w-full space-y-6">
        <div className="text-center space-y-2">
          <div className="mx-auto w-12 h-12 bg-primary/10 rounded-full flex items-center justify-center">
            <Github className="w-6 h-6 text-primary" />
          </div>
          <h1 className="text-2xl font-bold">Connect Your GitHub Account</h1>
          <p className="text-muted-foreground">
            To use NeatRepo, you need to connect your GitHub account to access your repositories.
          </p>
        </div>

        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Shield className="w-5 h-5 text-green-500" />
              Why Connect GitHub?
            </CardTitle>
            <CardDescription>
              NeatRepo is a GitHub portfolio management tool that helps you organize and showcase your repositories.
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="space-y-3">
              <div className="flex items-center gap-3">
                <div className="w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center">
                  <Zap className="w-4 h-4 text-blue-600" />
                </div>
                <div>
                  <p className="font-medium">Access Your Repositories</p>
                  <p className="text-sm text-muted-foreground">View and manage all your GitHub repos</p>
                </div>
              </div>
              
              <div className="flex items-center gap-3">
                <div className="w-8 h-8 bg-red-100 rounded-full flex items-center justify-center">
                  <Trash2 className="w-4 h-4 text-red-600" />
                </div>
                <div>
                  <p className="font-medium">Bulk Delete Feature</p>
                  <p className="text-sm text-muted-foreground">Delete multiple repos at once (requires GitHub token)</p>
                </div>
              </div>
              
              <div className="flex items-center gap-3">
                <div className="w-8 h-8 bg-green-100 rounded-full flex items-center justify-center">
                  <ArrowRight className="w-4 h-4 text-green-600" />
                </div>
                <div>
                  <p className="font-medium">Portfolio Management</p>
                  <p className="text-sm text-muted-foreground">Organize repos for job applications</p>
                </div>
              </div>
            </div>

            <div className="pt-4 border-t">
              <Badge variant="secondary" className="mb-3">
                🔒 Secure & Private
              </Badge>
              <p className="text-xs text-muted-foreground">
                We only request necessary permissions and never store your GitHub credentials. 
                You can revoke access anytime from your GitHub settings.
              </p>
            </div>
          </CardContent>
        </Card>

        {error && (
          <div className="p-3 bg-red-50 border border-red-200 rounded-md">
            <p className="text-sm text-red-600">{error}</p>
          </div>
        )}

        <Button 
          onClick={handleConnectGitHub} 
          disabled={isConnecting}
          className="w-full"
          size="lg"
        >
          {isConnecting ? (
            <>
              <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
              Connecting...
            </>
          ) : (
            <>
              <Github className="mr-2 h-4 w-4" />
              Connect with GitHub
            </>
          )}
        </Button>

        <p className="text-center text-xs text-muted-foreground">
          By connecting, you agree to our terms of service and privacy policy.
        </p>
      </div>
    </div>
  )
}

</code>

app\dashboard\components\ActionButtons.tsx:
<code>
import React from 'react';
import { Button } from '@/components/ui/button';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { RefreshCw, Trash2, Target, Plus, Calendar } from "lucide-react";

interface ActionButtonsProps {
    isLoadingRepos: boolean;
    isDeleteMode: boolean;
    selectedReposCount: number;
    dateSortOrder: 'newest' | 'oldest' | 'default';
    onRefresh: () => void;
    onDateSort: (order: 'newest' | 'oldest' | 'default') => void;
    onAddRepo: () => void;
    onJobTemplate: () => void;
    onToggleDeleteMode: () => void;
    onBulkDelete: () => void;
}

export function ActionButtons({
    isLoadingRepos, isDeleteMode, selectedReposCount, dateSortOrder,
    onRefresh, onDateSort, onAddRepo, onJobTemplate, onToggleDeleteMode, onBulkDelete
}: ActionButtonsProps) {
  return (
    <div className="flex items-center justify-between gap-4 mb-6">
      <div className="flex items-center gap-4">
        <Button variant="outline" size="sm" onClick={onRefresh} disabled={isLoadingRepos}>
          <RefreshCw className={`h-4 w-4 ${isLoadingRepos ? 'animate-spin' : ''}`} />
          <span>Refresh</span>
        </Button>
        <div className="flex items-center gap-2">
          <Calendar className="h-4 w-4 text-muted-foreground" />
          <Select value={dateSortOrder} onValueChange={onDateSort}>
            <SelectTrigger className="w-[140px] h-9"><SelectValue placeholder="Sort by Date" /></SelectTrigger>
            <SelectContent>
              <SelectItem value="default">Default Order</SelectItem>
              <SelectItem value="newest">Newest First</SelectItem>
              <SelectItem value="oldest">Oldest First</SelectItem>
            </SelectContent>
          </Select>
        </div>
        <Button variant="outline" size="icon" onClick={onAddRepo} title="Add Repository">
          <Plus className="h-4 w-4" />
        </Button>
        <Button variant="outline" size="sm" onClick={onJobTemplate} className="flex items-center gap-2">
          <Target className="h-4 w-4" />
          <span>Job Template</span>
        </Button>
      </div>
      <div className="flex items-center gap-4">
        <Button variant={isDeleteMode ? "destructive" : "outline"} size="sm" onClick={onToggleDeleteMode}>
          <Trash2 className="h-4 w-4" />
          <span>{isDeleteMode ? "Exit Delete Mode" : "Enter Delete Mode"}</span>
        </Button>
        {isDeleteMode && selectedReposCount > 0 && (
          <Button variant="destructive" size="sm" onClick={onBulkDelete}>
            <Trash2 className="h-4 w-4" />
            <span>Delete {selectedReposCount}</span>
          </Button>
        )}
      </div>
    </div>
  );
}
</code>

app\dashboard\components\ChatSidebar.tsx:
<code>
// app/dashboard/components/ChatSidebar.tsx
"use client"

import React from 'react';
import { Card, CardHeader, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { ScrollArea } from '@/components/ui/scroll-area';
import { GitHubRepo, ChatMessage } from '../types';
import { Github, Send, ArrowUp, Square, Code, Lightbulb, Zap, MessageCircle, Download } from 'lucide-react';
import { Progress } from '@/components/ui/progress';

// Props Interface for the component
interface ChatSidebarProps {
  isMinimized: boolean;
  isCriticMode: boolean;
  isInterviewMode: boolean;
  interviewProgress: number;
  generatedReadme: string | null;
  chatMessages: ChatMessage[];
  chatMessage: string;
  isAiThinking: boolean;
  welcomeText: string;
  isTypingWelcome: boolean;
  repositories: GitHubRepo[];
  chatEndRef: React.RefObject<HTMLDivElement>;
  setIsMinimized: (minimized: boolean) => void;
  setIsCriticMode: (critic: boolean) => void;
  setChatMessage: (message: string) => void;
  handleSendMessage: () => void;
  handleResetChat: () => void;
  downloadPortfolioReadme: () => void;
  sendDirectMessage: (message: string) => void;
  generateReadme: (repo: GitHubRepo) => void;
}

const ThinkingSpinner = () => (
    <div className="w-5 h-5 border-2 border-muted-foreground/30 border-t-transparent rounded-full animate-spin"></div>
);

export function ChatSidebar({
  isMinimized, isCriticMode, isInterviewMode, interviewProgress, generatedReadme,
  chatMessages, chatMessage, isAiThinking, welcomeText, isTypingWelcome, repositories,
  chatEndRef, setIsMinimized, setIsCriticMode, setChatMessage, handleSendMessage,
  handleResetChat, downloadPortfolioReadme, sendDirectMessage, generateReadme
}: ChatSidebarProps) {

  if (isMinimized) {
    return (
      <div className="fixed bottom-6 right-6 z-50">
        <Button onClick={() => setIsMinimized(false)} className="w-14 h-14 rounded-full shadow-lg">
          <Github className="h-6 w-6" />
        </Button>
      </div>
    );
  }

  return (
    <Card className="shadow-lg border-gray-700/50">
      {/* --- RESTORED HEADER --- */}
      <CardHeader className="flex flex-row items-center justify-between bg-gray-800/80 backdrop-blur-sm border-b border-gray-700/50 p-2">
        <div className="flex items-center gap-2">
          <div className="flex items-center gap-1.5">
            <button onClick={() => {}} className="w-3 h-3 bg-red-500 rounded-full hover:bg-red-600"></button>
            <button onClick={() => setIsMinimized(true)} className="w-3 h-3 bg-yellow-400 rounded-full hover:bg-yellow-500"></button>
            <button className="w-3 h-3 bg-green-500 rounded-full hover:bg-green-600"></button>
          </div>
          <h2 className="text-sm font-medium text-gray-300">
            AI Assistant
            {isCriticMode && <span className="text-red-400"> • Critic Mode</span>}
            {isInterviewMode && <span className="text-blue-400"> • Interview Mode</span>}
          </h2>
        </div>
        <div className="flex items-center gap-2">
          <Button variant="ghost" size="sm" onClick={() => setIsCriticMode(!isCriticMode)} className={`text-xs ${isCriticMode ? 'text-red-400 bg-red-500/20' : 'text-gray-400'}`}>
            {isCriticMode ? '🔥' : '😊'} {isCriticMode ? 'Brutal' : 'Nice'}
          </Button>
          <Button variant="ghost" size="sm" onClick={handleResetChat} className="text-xs text-yellow-400 bg-yellow-500/20 hover:bg-yellow-500/30">
            🔄 Reset
          </Button>
          {generatedReadme && (
            <Button variant="ghost" size="sm" onClick={downloadPortfolioReadme} className="text-xs text-green-400 bg-green-500/20 hover:bg-green-500/30">
              <Download className="h-3 w-3 mr-1.5" /> README
            </Button>
          )}
        </div>
      </CardHeader>
      
      {/* Interview Progress Bar */}
      {isInterviewMode && interviewProgress > 0 && (
        <div className="px-4 py-2 border-b border-gray-700/50 bg-blue-500/5">
          <div className="flex items-center justify-between mb-2">
            <span className="text-xs text-blue-400 font-medium">Interview Progress</span>
            <span className="text-xs text-blue-400">{Math.round(interviewProgress)}%</span>
          </div>
          <Progress value={interviewProgress} className="h-2 bg-gray-800" />
        </div>
      )}
      
      <CardContent className="p-4 h-[60vh] flex flex-col">
        <ScrollArea className="flex-grow overflow-hidden pr-2">
          <div className="space-y-4">
            {/* --- RESTORED WELCOME AND PROMPT STARTER BLOCK --- */}
            <div className="flex justify-start">
              <div className="bg-accent text-foreground border border-border p-2 rounded-lg text-sm">
                {welcomeText}
                {isTypingWelcome && <span className="animate-pulse">|</span>}
              </div>
            </div>
            {!isTypingWelcome && chatMessages.length === 0 && (
              <div className="flex flex-col items-center justify-center py-8">
                <Github className="h-16 w-16 text-gray-600 mb-4" />
                <div className="flex flex-col gap-3 text-sm max-w-sm mx-auto">
                  <div className="grid grid-cols-2 gap-3">
                    <Button variant="outline" size="sm" className="w-full justify-start text-xs h-8" onClick={() => sendDirectMessage("analyze my repository structure")} disabled={isAiThinking}>
                      <Code className="h-3 w-3 mr-1.5" /> Analyze Structure
                    </Button>
                    <Button variant="outline" size="sm" className="w-full justify-start bg-foreground text-background hover:bg-foreground/90 border-0 text-xs h-8" onClick={() => repositories.length > 0 && generateReadme(repositories[0])} disabled={isAiThinking || repositories.length === 0}>
                      <Zap className="h-3 w-3 mr-1.5" /> Quick README
                    </Button>
                  </div>
                  <Button variant="outline" size="sm" className="w-full justify-start text-xs h-8" onClick={() => sendDirectMessage("give me suggestions to improve my repositories")} disabled={isAiThinking}>
                    <Lightbulb className="h-3 w-3 mr-1.5" /> Get Suggestions
                  </Button>
                  <div className="border-t border-border pt-2 mt-2">
                    <Button
                      variant="outline"
                      size="sm"
                      className="w-full justify-start bg-blue-500/10 text-blue-400 border-blue-500/30 hover:bg-blue-500/20 text-xs h-8"
                      onClick={() => sendDirectMessage("generate personal readme based on quick interview")}
                      disabled={isAiThinking || repositories.length === 0 || isInterviewMode}
                    >
                      <MessageCircle className="h-3 w-3 mr-1.5" />
                      {isInterviewMode ? 'Interview Active...' : 'Personal README Interview'}
                    </Button>
                  </div>
                </div>
              </div>
            )}

            {/* Chat Messages */}
            {chatMessages.map((message) => (
              <div key={message.id} className={`flex ${message.role === "user" ? "justify-end" : "justify-start"}`}>
                <div className={`whitespace-pre-wrap max-w-xs p-2 rounded-lg text-sm ${message.role === "user" ? "bg-primary text-primary-foreground" : "bg-accent text-foreground border border-border"}`}>
                  {message.content}
                </div>
              </div>
            ))}
            {isAiThinking && (
              <div className="flex justify-start">
                  <div className="bg-accent text-foreground border border-border p-2 rounded-lg text-sm flex items-center gap-2">
                      <ThinkingSpinner />
                      <span>AI is thinking...</span>
                  </div>
              </div>
            )}
            <div ref={chatEndRef} />
          </div>
        </ScrollArea>
        
        <div className="flex gap-2 mt-4">
            <Input
                placeholder={isAiThinking ? "AI is thinking..." : "Ask about your repositories..."}
                value={chatMessage}
                onChange={(e) => setChatMessage(e.target.value)}
                onKeyPress={(e) => e.key === "Enter" && !isAiThinking && handleSendMessage()}
                disabled={isAiThinking}
            />
            <Button onClick={handleSendMessage} size="sm" disabled={!chatMessage.trim() || isAiThinking}>
                <ArrowUp className="h-4 w-4" />
            </Button>
        </div>
      </CardContent>
    </Card>
  );
}
</code>

app\dashboard\components\DashboardMetrics.tsx:
<code>
import React from 'react';
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Plus, Folder, Star } from "lucide-react";
import { GitHubRepo } from '../types';


// Add ProjectTemplate interface
interface ProjectTemplate {
  id: string;
  name: string;
  description: string;
  icon: string;
  files: string[];
}

interface DashboardMetricsProps {
  repositories: GitHubRepo[];
  selectedTemplate: string;
  isAiThinking: boolean;
  onTemplateChange: (templateId: string) => void;
  onGenerateTemplate: (templateId: string) => void;
}

const projectTemplates: ProjectTemplate[] = [
  {
    id: "react-app",
    name: "React Web App",
    description: "Modern React application with TypeScript",
    icon: "⚛️",
    files: [
      "src/App.tsx",
      "src/components/Header.tsx",
      "src/components/Footer.tsx",
      "src/hooks/useAuth.ts",
      "src/utils/api.ts",
      "public/index.html",
      "package.json",
      "tsconfig.json",
      "tailwind.config.js"
    ]
  },
  // ... add more templates as needed
];

export function DashboardMetrics({ repositories, selectedTemplate, isAiThinking, onTemplateChange, onGenerateTemplate }: DashboardMetricsProps) {
  const publicRepos = repositories.filter((repo) => !repo.private).length;
  const privateRepos = repositories.length - publicRepos;
  const totalStars = repositories.reduce((sum, repo) => sum + repo.stargazers_count, 0);

  return (
    <>
      <Card className="mb-6">
        <CardHeader>
          <CardTitle className="text-lg flex items-center gap-2"><Plus /> Quick Start Templates</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="flex items-center space-x-4">
            <div className="flex-1">
              <Select value={selectedTemplate} onValueChange={onTemplateChange}>
                <SelectTrigger><SelectValue placeholder="Choose a project template..." /></SelectTrigger>
                <SelectContent>
                  {projectTemplates.map((template) => (
                    <SelectItem key={template.id} value={template.id}>
                      <div className="flex items-center space-x-2">
                        <span>{template.icon}</span>
                        <div>
                          <div className="font-medium">{template.name}</div>
                          <div className="text-xs text-muted-foreground">{template.description}</div>
                        </div>
                      </div>
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
            <Button onClick={() => onGenerateTemplate(selectedTemplate)} disabled={!selectedTemplate || isAiThinking}>
              <Plus className="h-4 w-4 mr-2" /> Generate Template
            </Button>
          </div>
        </CardContent>
      </Card>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Total Repositories</CardTitle>
            <Folder className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{repositories.length}</div>
            <p className="text-xs text-muted-foreground">{publicRepos} public, {privateRepos} private</p>
          </CardContent>
        </Card>
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Total Stars</CardTitle>
            <Star className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{totalStars}</div>
            <p className="text-xs text-muted-foreground">Across all repositories</p>
          </CardContent>
        </Card>
      </div>
    </>
  );
}
</code>

app\dashboard\components\Modals.tsx:
<code>
import React from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from '@/components/ui/dialog';
import { GitHubRepo } from '../types';
import { Trash2, Target, Plus, Edit, X, RefreshCw, Sparkles, CheckCircle } from 'lucide-react';

interface ModalsProps {
    showDeleteConfirm: boolean;
    repoToDelete: GitHubRepo | null;
    isDeleting: boolean;
    onConfirmDelete: () => void;
    onCancelDelete: () => void;

    showJobTemplateModal: boolean;
    jobTitle: string;
    isGeneratingTemplate: boolean;
    templateResults: GitHubRepo[];
    onJobTitleChange: (value: string) => void;
    onGenerateJobTemplate: () => void;
    onCloseJobTemplate: () => void;

    showAddRepoModal: boolean;
    newRepoName: string;
    newRepoDescription: string;
    isCreatingRepo: boolean;
    onNewRepoNameChange: (value: string) => void;
    onNewRepoDescriptionChange: (value: string) => void;
    onCreateRepo: () => void;
    onCloseAddRepo: () => void;
    
    showRenameModal: boolean;
    repoToRename: GitHubRepo | null;
    newRepoNameForRename: string;
    isRenamingRepo: boolean;
    onNewRepoNameForRenameChange: (value: string) => void;
    onRenameRepo: () => void;
    onCloseRenameRepo: () => void;
}

export function Modals({
    showDeleteConfirm, repoToDelete, isDeleting, onConfirmDelete, onCancelDelete,
    showJobTemplateModal, jobTitle, isGeneratingTemplate, templateResults, onJobTitleChange, onGenerateJobTemplate, onCloseJobTemplate,
    showAddRepoModal, newRepoName, newRepoDescription, isCreatingRepo, onNewRepoNameChange, onNewRepoDescriptionChange, onCreateRepo, onCloseAddRepo,
    showRenameModal, repoToRename, newRepoNameForRename, isRenamingRepo, onNewRepoNameForRenameChange, onRenameRepo, onCloseRenameRepo
}: ModalsProps) {

  return (
    <>
      {/* Delete Confirmation Modal */}
      {showDeleteConfirm && repoToDelete && (
        <Dialog open={showDeleteConfirm} onOpenChange={onCancelDelete}>
          <DialogContent>
            <DialogHeader>
              <DialogTitle className="flex items-center gap-2"><Trash2/> Delete Repository</DialogTitle>
            </DialogHeader>
            <p>Are you sure you want to permanently delete <strong>"{repoToDelete.name}"</strong>? This action cannot be undone.</p>
            <DialogFooter>
              <Button variant="outline" onClick={onCancelDelete} disabled={isDeleting}>Cancel</Button>
              <Button variant="destructive" onClick={onConfirmDelete} disabled={isDeleting}>
                {isDeleting ? <><RefreshCw className="animate-spin mr-2" /> Deleting...</> : "Delete Forever"}
              </Button>
            </DialogFooter>
          </DialogContent>
        </Dialog>
      )}

      {/* Job Template Modal */}
      {showJobTemplateModal && (
          <Dialog open={showJobTemplateModal} onOpenChange={onCloseJobTemplate}>
              <DialogContent>
                  <DialogHeader><DialogTitle className="flex items-center gap-2"><Target /> Generate Job Template</DialogTitle></DialogHeader>
                  <Input placeholder="e.g., Frontend Developer" value={jobTitle} onChange={(e) => onJobTitleChange(e.target.value)} />
                  {templateResults.length > 0 && (
                      <div className="mt-4 p-3 bg-muted/50 rounded-lg">
                          <h3 className="font-medium mb-2 flex items-center gap-2"><CheckCircle className="text-green-500" /> Selected Repos</h3>
                          <ul className="space-y-1">{templateResults.map(r => <li key={r.id}>{r.name}</li>)}</ul>
                      </div>
                  )}
                  <DialogFooter>
                      <Button variant="outline" onClick={onCloseJobTemplate}>Cancel</Button>
                      <Button onClick={onGenerateJobTemplate} disabled={!jobTitle.trim() || isGeneratingTemplate}>
                          {isGeneratingTemplate ? <><RefreshCw className="animate-spin mr-2" /> Generating...</> : <><Sparkles className="mr-2" /> Generate</>}
                      </Button>
                  </DialogFooter>
              </DialogContent>
          </Dialog>
      )}

      {/* Add Repository Modal */}
      {showAddRepoModal && (
          <Dialog open={showAddRepoModal} onOpenChange={onCloseAddRepo}>
              <DialogContent>
                  <DialogHeader><DialogTitle className="flex items-center gap-2"><Plus /> Create New Repository</DialogTitle></DialogHeader>
                  <Input placeholder="Repository Name" value={newRepoName} onChange={(e) => onNewRepoNameChange(e.target.value)} />
                  <Input placeholder="Description (Optional)" value={newRepoDescription} onChange={(e) => onNewRepoDescriptionChange(e.target.value)} />
                  <DialogFooter>
                      <Button variant="outline" onClick={onCloseAddRepo}>Cancel</Button>
                      <Button onClick={onCreateRepo} disabled={!newRepoName.trim() || isCreatingRepo}>
                          {isCreatingRepo ? <><RefreshCw className="animate-spin mr-2" /> Creating...</> : "Create"}
                      </Button>
                  </DialogFooter>
              </DialogContent>
          </Dialog>
      )}

      {/* Rename Repository Modal */}
      {showRenameModal && repoToRename && (
          <Dialog open={showRenameModal} onOpenChange={onCloseRenameRepo}>
              <DialogContent>
                  <DialogHeader><DialogTitle className="flex items-center gap-2"><Edit /> Rename Repository</DialogTitle></DialogHeader>
                  <p className="text-sm text-muted-foreground">Current name: {repoToRename.name}</p>
                  <Input value={newRepoNameForRename} onChange={(e) => onNewRepoNameForRenameChange(e.target.value)} />
                  <DialogFooter>
                      <Button variant="outline" onClick={onCloseRenameRepo}>Cancel</Button>
                      <Button onClick={onRenameRepo} disabled={!newRepoNameForRename.trim() || isRenamingRepo}>
                          {isRenamingRepo ? <><RefreshCw className="animate-spin mr-2" /> Renaming...</> : "Rename"}
                      </Button>
                  </DialogFooter>
              </DialogContent>
          </Dialog>
      )}
    </>
  );
}
</code>

app\dashboard\components\RepoItem.tsx:
<code>
import React, { useState } from 'react';
import { Draggable, DraggableProvided, DraggableStateSnapshot } from "@hello-pangea/dnd";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { GitHubRepo } from '../types';
import { GripVertical, ChevronDown, ChevronRight, Folder, Star, GitFork, Clock, Eye, Code, Zap, Edit, Trash2, ExternalLink } from "lucide-react";

interface RepoItemProps {
  repo: GitHubRepo;
  index: number;
  isDeleteMode: boolean;
  isSelected: boolean;
  onToggleSelection: (id: number) => void;
  onDelete: (repo: GitHubRepo) => void;
  onRename: (repo: GitHubRepo) => void;
}

const formatTimeAgo = (dateString: string) => {
  const date = new Date(dateString);
  const now = new Date();
  const seconds = Math.floor((now.getTime() - date.getTime()) / 1000);
  let interval = seconds / 31536000;
  if (interval > 1) return `${Math.floor(interval)} years ago`;
  interval = seconds / 2592000;
  if (interval > 1) return `${Math.floor(interval)} months ago`;
  interval = seconds / 86400;
  if (interval > 1) return `${Math.floor(interval)} days ago`;
  return "today";
};

export function RepoItem({ repo, index, isDeleteMode, isSelected, onToggleSelection, onDelete, onRename }: RepoItemProps) {
  const [isExpanded, setIsExpanded] = useState(false);

  return (
    <Draggable draggableId={repo.id.toString()} index={index}>
      {(provided: DraggableProvided, snapshot: DraggableStateSnapshot) => (
        <div
          ref={provided.innerRef}
          {...provided.draggableProps}
          className={`p-3 rounded-lg transition-all duration-200 bg-card border ${
            snapshot.isDragging
              ? "opacity-90 shadow-2xl scale-105 border-primary/50 bg-primary/5 z-50"
              : "border-border/50 hover:border-border hover:shadow-md"
          }`}
        >
          <div className="flex items-center justify-between min-w-0">
             {/* Main Repo Info */}
             <div className="flex items-center min-w-0 flex-1 mr-4">
               {isDeleteMode ? (
                  <div className="mr-3 flex items-center">
                    <input
                      type="checkbox"
                      checked={isSelected}
                      onChange={() => onToggleSelection(repo.id)}
                      className="w-4 h-4 text-destructive bg-background border-border rounded focus:ring-destructive focus:ring-2"
                      title="Select for deletion"
                    />
                  </div>
                ) : (
                  <div {...provided.dragHandleProps} className={`mr-3 cursor-grab text-muted-foreground hover:text-foreground`}>
                    <GripVertical className="h-5 w-5" />
                  </div>
                )}
                <button onClick={() => setIsExpanded(!isExpanded)} className="mr-2">
                  {isExpanded ? <ChevronDown className="h-4 w-4" /> : <ChevronRight className="h-4 w-4" />}
                </button>
                <Folder className="h-4 w-4 text-muted-foreground mr-3" />
                <div className="flex-1 min-w-0">
                    <span className="font-semibold truncate">{repo.name}</span>
                </div>
             </div>
             <div className="flex items-center space-x-2 flex-shrink-0">
                <div className="text-xs text-muted-foreground">Updated {formatTimeAgo(repo.updated_at)}</div>
             </div>
          </div>

          {/* Expanded View */}
          {isExpanded && (
            <div className="pl-10 mt-2 space-y-2">
              <p className="text-sm text-muted-foreground">{repo.description || "No description."}</p>
              <div className="flex items-center space-x-4 text-xs text-muted-foreground mt-1">
                {repo.language && <span>{repo.language}</span>}
                <div className="flex items-center"><Star className="h-3 w-3 mr-1" /> {repo.stargazers_count}</div>
                <div className="flex items-center"><GitFork className="h-3 w-3 mr-1" /> {repo.forks_count}</div>
              </div>
              <div className="flex space-x-2 pt-2">
                  <Button variant="outline" size="sm" onClick={() => window.open(repo.html_url, "_blank")}><ExternalLink className="h-4 w-4 mr-2" /> View</Button>
                  <Button variant="outline" size="sm" onClick={() => onRename(repo)}><Edit className="h-4 w-4 mr-2" /> Rename</Button>
                  <Button variant="destructive" size="sm" onClick={() => onDelete(repo)}><Trash2 className="h-4 w-4 mr-2" /> Delete</Button>
              </div>
            </div>
          )}
        </div>
      )}
    </Draggable>
  );
}
</code>

app\dashboard\components\RepositoryList.tsx:
<code>
import React from 'react';
import { DragDropContext, Droppable, DroppableProvided } from "@hello-pangea/dnd";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Card, CardContent } from "@/components/ui/card";
import { RefreshCw } from "lucide-react";
import { GitHubRepo } from '../types';
import { RepoItem } from './RepoItem';

interface RepositoryListProps {
  repositories: GitHubRepo[];
  isLoadingRepos: boolean;
  isDeleteMode: boolean;
  selectedRepos: Set<number>;
  onDragEnd: (result: any) => void;
  onToggleSelection: (id: number) => void;
  onDeleteRepo: (repo: GitHubRepo) => void;
  onRenameRepo: (repo: GitHubRepo) => void;
}

export function RepositoryList({
  repositories,
  isLoadingRepos,
  isDeleteMode,
  selectedRepos,
  onDragEnd,
  onToggleSelection,
  onDeleteRepo,
  onRenameRepo
}: RepositoryListProps) {
  if (isLoadingRepos && repositories.length === 0) {
    return (
      <div className="flex items-center justify-center py-12">
        <div className="flex items-center space-x-2">
          <RefreshCw className="h-5 w-5 animate-spin" />
          <span>Loading repositories...</span>
        </div>
      </div>
    );
  }

  if (repositories.length === 0) {
      return (
          <div className="text-center py-12">
              <h3 className="text-xl font-semibold">No Repositories Found</h3>
              <p className="text-muted-foreground">Please check your GitHub token or refresh.</p>
          </div>
      )
  }

  return (
    <Card>
      <CardContent className="p-4">
        <ScrollArea className="h-[calc(100vh-400px)]">
          <DragDropContext onDragEnd={onDragEnd}>
            <Droppable droppableId="repositories">
              {(provided: DroppableProvided) => (
                <div {...provided.droppableProps} ref={provided.innerRef} className="space-y-2 pr-4">
                  {repositories.map((repo, index) => (
                    <RepoItem
                      key={repo.id}
                      repo={repo}
                      index={index}
                      isDeleteMode={isDeleteMode}
                      isSelected={selectedRepos.has(repo.id)}
                      onToggleSelection={onToggleSelection}
                      onDelete={onDeleteRepo}
                      onRename={onRenameRepo}
                    />
                  ))}
                  {provided.placeholder}
                </div>
              )}
            </Droppable>
          </DragDropContext>
        </ScrollArea>
      </CardContent>
    </Card>
  );
}
</code>

app\dashboard\hooks\useChatAssistant.ts:
<code>
// app/dashboard/hooks/useChatAssistant.ts
"use client"

import { useState, useEffect, useRef } from "react";
import { useAuth } from "@/components/auth-provider";
import { aiAssistant } from "@/lib/ai-assistant";
import { GitHubRepo, ChatMessage } from "../types";

export function useChatAssistant(repositories: GitHubRepo[]) {
  const { user } = useAuth();
  const [chatMessage, setChatMessage] = useState("");
  const [chatMessages, setChatMessages] = useState<ChatMessage[]>([]);
  const [isAiThinking, setIsAiThinking] = useState(false);
  const [isCriticMode, setIsCriticMode] = useState(false);
  const [isInterviewMode, setIsInterviewMode] = useState(false);
  const [interviewProgress, setInterviewProgress] = useState(0);
  const [generatedReadme, setGeneratedReadme] = useState<string | null>(null);
  const [welcomeText, setWelcomeText] = useState("");
  const [isTypingWelcome, setIsTypingWelcome] = useState(true);
  const chatEndRef = useRef<HTMLDivElement>(null);

  const WELCOME_FULL_TEXT = "Hi! I'm your AI assistant. Ask me anything about your repositories, or use the quick actions below to get started.";

  // Update AI assistant context whenever repositories change
  useEffect(() => {
    aiAssistant.updateUserContext({ repositories });
  }, [repositories]);

  useEffect(() => {
    let timeout: NodeJS.Timeout;
    if (chatMessages.length === 0) {
      setWelcomeText("");
      setIsTypingWelcome(true);
      let i = 0;
      const type = () => {
        if (i < WELCOME_FULL_TEXT.length) {
          setWelcomeText(prev => WELCOME_FULL_TEXT.slice(0, i + 1));
          i++;
          timeout = setTimeout(type, 18);
        } else {
          setIsTypingWelcome(false);
        }
      };
      type();
    }
    return () => clearTimeout(timeout);
  }, [chatMessages.length]);

  useEffect(() => {
    chatEndRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [chatMessages]);
  
  const addChatMessage = (message: Omit<ChatMessage, 'timestamp' | 'id'>) => {
    setChatMessages(prev => [...prev, { ...message, id: Date.now().toString(), timestamp: new Date() }]);
  };

  const processMessage = async (currentMessage: string) => {
    // Update the AI assistant context with critic mode
    aiAssistant.updateUserContext({ 
      repositories,
      preferences: { isCriticMode }
    });

    // Process the message using the AI assistant
    const response = await aiAssistant.processMessage(currentMessage);
    
    addChatMessage({ role: "assistant", content: response.message });

    if (response.data?.portfolioReadme) {
      setGeneratedReadme(response.data.portfolioReadme);
    }
    if (response.data?.interviewActive !== undefined) {
      setIsInterviewMode(response.data.interviewActive);
    }
    if (response.data?.progress !== undefined) {
      setInterviewProgress(response.data.progress);
    }
    setIsAiThinking(false);
  };

  const sendDirectMessage = async (message: string) => {
    if (!message.trim()) return;
    addChatMessage({ role: "user", content: message });
    setIsAiThinking(true);
    await processMessage(message);
  };

  const handleSendMessage = async () => {
    if (!chatMessage.trim()) return;
    const currentMessage = chatMessage;
    setChatMessage("");
    await sendDirectMessage(currentMessage);
  };
  
  const handleResetChat = () => {
    setChatMessages([]);
    setIsInterviewMode(false);
    setInterviewProgress(0);
    setGeneratedReadme(null);
  };
  
  const downloadPortfolioReadme = () => {
    if (!generatedReadme) return;
    const blob = new Blob([generatedReadme], { type: 'text/markdown' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'PORTFOLIO_README.md';
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const generateReadme = async (repo: GitHubRepo) => {
     // This function can be expanded with more logic if needed.
    await sendDirectMessage(`Generate a README for my repository: ${repo.name}`);
  };

  return {
    chatMessage,
    setChatMessage,
    chatMessages,
    addChatMessage,
    isAiThinking,
    handleSendMessage,
    sendDirectMessage,
    chatEndRef,
    // Welcome Text
    welcomeText,
    isTypingWelcome,
    // Modes & Features
    isCriticMode,
    setIsCriticMode,
    isInterviewMode,
    interviewProgress,
    generatedReadme,
    handleResetChat,
    downloadPortfolioReadme,
    generateReadme
  };
}
</code>

app\dashboard\hooks\useDashboard.ts:
<code>
// app/dashboard/hooks/useDashboard.ts
"use client"

import { useState, useEffect } from "react";
import { useAuth } from "@/components/auth-provider";
import { useRepositories } from "./useRepositories";
import { useChatAssistant } from "./useChatAssistant";

import { useDashboardModals } from "./useDashboardModals";
import { aiAssistant } from "../../../lib/ai-assistant";

export function useDashboard() {
  const { user, profile, loading, signOut, showTokenPopup } = useAuth();
  
  // --- State for features not belonging to other hooks ---
  const [isChatMinimized, setIsChatMinimized] = useState(false);
  const [selectedTemplate, setSelectedTemplate] = useState("");
  // Note: generateTemplate logic would be here or in its own hook

  // --- Instantiate Child Hooks ---

  // Modals hook must be initialized first to provide control functions
  const modals = useDashboardModals();

  // Repositories hook manages all repo data and actions
  const repos = useRepositories(
    // For now, we'll handle chat messages separately
    () => {},
    modals.openModal,             // Pass modal-opening function
    modals.setRepoToDelete,       // Pass state setter
    modals.setRepoToRename        // Pass state setter
  );

  // Chat hook needs the actual repositories for context
  const chat = useChatAssistant(
    repos.repositories // Pass the actual repositories
  );
  
  // --- Connect Hooks ---
  
  // Update chat context when repositories change
  // This is a placeholder; a more robust solution might use a shared context
  // or pass the repositories state directly into the chat hook. For now,
  // we rely on aiAssistant.updateContext being called inside processMessage.
  
  // --- Combine and Expose State and Functions ---

  return {
    // Auth context data
    user,
    profile,
    loading,
    signOut,
    showTokenPopup,

    // From useRepositories
    ...repos,
    
    // From useChatAssistant
    ...chat,

    // From useDashboardModals
    ...modals,
    
    // Functions to connect repository actions with modals
    onConfirmDelete: () => repos.confirmDeleteRepo(modals.repoToDelete!),
    onCreateRepo: () => {
        repos.createRepository(modals.newRepoName, modals.newRepoDescription)
        .then(() => modals.closeModal('add'));
    },
    onRenameRepo: () => {
        repos.renameRepository(modals.repoToRename!, modals.newRepoNameForRename)
        .then(() => modals.closeModal('rename'));
    },

    // UI state from the main hook
    isChatMinimized,
    setIsChatMinimized,
    selectedTemplate,
    setSelectedTemplate,
    
    // Placeholder for logic that would live here or in another hook
    generateTemplate: async (templateId: string) => { 
        chat.addChatMessage({ role: 'assistant', content: `Template generation for "${templateId}" is not fully implemented yet.` });
    },
    generateJobTemplate: async () => {
      if (!modals.jobTitle.trim()) return;
      modals.setIsGeneratingTemplate(true);
      
      // Update AI assistant context with current repositories
      aiAssistant.updateUserContext({ repositories: repos.repositories });
      
      // Process the job recommendation request
      const response = await aiAssistant.processMessage(`recommend repositories for ${modals.jobTitle} position`);
      
      chat.addChatMessage({ role: 'assistant', content: response.message });
      if (response.success && response.data?.recommendedRepos) {
        modals.setTemplateResults(response.data.recommendedRepos);
      }
      modals.setIsGeneratingTemplate(false);
    }
  };
}
</code>

app\dashboard\hooks\useDashboardModals.ts:
<code>
// app/dashboard/hooks/useDashboardModals.ts
"use client"

import { useState } from "react";
import { GitHubRepo } from "../types";

export function useDashboardModals() {
  // Delete Modal State
  const [showDeleteConfirm, setShowDeleteConfirm] = useState(false);
  const [repoToDelete, setRepoToDelete] = useState<GitHubRepo | null>(null);

  // Add Repo Modal State
  const [showAddRepoModal, setShowAddRepoModal] = useState(false);
  const [newRepoName, setNewRepoName] = useState("");
  const [newRepoDescription, setNewRepoDescription] = useState("");

  // Rename Repo Modal State
  const [showRenameModal, setShowRenameModal] = useState(false);
  const [repoToRename, setRepoToRename] = useState<GitHubRepo | null>(null);
  const [newRepoNameForRename, setNewRepoNameForRename] = useState("");

  // Job Template Modal State
  const [showJobTemplateModal, setShowJobTemplateModal] = useState(false);
  const [jobTitle, setJobTitle] = useState('');
  const [isGeneratingTemplate, setIsGeneratingTemplate] = useState(false);
  const [templateResults, setTemplateResults] = useState<GitHubRepo[]>([]);
  
  const openModal = (modal: 'delete' | 'rename' | 'add' | 'jobTemplate') => {
    if (modal === 'delete') setShowDeleteConfirm(true);
    if (modal === 'rename') setShowRenameModal(true);
    if (modal === 'add') setShowAddRepoModal(true);
    if (modal === 'jobTemplate') setShowJobTemplateModal(true);
  };

  const closeModal = (modal: 'delete' | 'rename' | 'add' | 'jobTemplate') => {
    if (modal === 'delete') {
      setShowDeleteConfirm(false);
      setRepoToDelete(null);
    }
    if (modal === 'rename') {
      setShowRenameModal(false);
      setRepoToRename(null);
      setNewRepoNameForRename("");
    }
    if (modal === 'add') {
      setShowAddRepoModal(false);
      setNewRepoName("");
      setNewRepoDescription("");
    }
    if (modal === 'jobTemplate') {
        setShowJobTemplateModal(false);
        setJobTitle('');
        setTemplateResults([]);
    }
  };

  return {
    // Delete Modal
    showDeleteConfirm,
    repoToDelete,
    setRepoToDelete,
    // Add Repo Modal
    showAddRepoModal,
    newRepoName,
    setNewRepoName,
    newRepoDescription,
    setNewRepoDescription,
    // Rename Repo Modal
    showRenameModal,
    repoToRename,
    setRepoToRename,
    newRepoNameForRename,
    setNewRepoNameForRename,
    // Job Template Modal
    showJobTemplateModal,
    jobTitle,
    setJobTitle,
    isGeneratingTemplate,
    setIsGeneratingTemplate,
    templateResults,
    setTemplateResults,
    // Control functions
    openModal,
    closeModal,
  };
}
</code>

app\dashboard\hooks\useRepositories.ts:
<code>
// app/dashboard/hooks/useRepositories.ts
"use client"

import { useState, useEffect, useCallback } from "react";
import { DropResult } from "@hello-pangea/dnd";
import { useAuth } from "@/components/auth-provider";
import { repositoryManager, InvalidTokenError } from "@/lib/repository-manager";
import { GitHubRepo } from "../types";

export function useRepositories(
  addChatMessage: (message: { role: 'assistant'; content: string }) => void,
  openModal: (modal: 'delete' | 'rename' | 'add') => void,
  setRepoToDelete: (repo: GitHubRepo | null) => void,
  setRepoToRename: (repo: GitHubRepo | null) => void
) {
  const { user, profile, loading: authLoading, getEffectiveToken, showTokenPopup, markTokenAsInvalid } = useAuth();
  const [repositories, setRepositories] = useState<GitHubRepo[]>([]);
  const [originalRepositories, setOriginalRepositories] = useState<GitHubRepo[]>([]);
  const [isLoadingRepos, setIsLoadingRepos] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [isInitialized, setIsInitialized] = useState(false);
  
  // Repo management state
  const [selectedRepos, setSelectedRepos] = useState<Set<number>>(new Set());
  const [isDeleteMode, setIsDeleteMode] = useState(false);
  const [isDeleting, setIsDeleting] = useState(false);
  const [isCreatingRepo, setIsCreatingRepo] = useState(false);
  const [isRenamingRepo, setIsRenamingRepo] = useState(false);
  const [dateSortOrder, setDateSortOrder] = useState<'newest' | 'oldest' | 'default'>('default');
  const [hasChanges, setHasChanges] = useState(false);

  // --- Core Repository Actions ---

  const handleRefresh = useCallback(async () => {
    if (!user) return;
    const effectiveToken = await getEffectiveToken();
    if (effectiveToken) {
      setIsLoadingRepos(true);
      setError(null);
      try {
        // Force refresh from API
        await repositoryManager.fetchRepositories(effectiveToken, true, user.id);
      } catch (e: any) {
        if (e instanceof InvalidTokenError) {
          console.error("Caught invalid token error on refresh. Updating auth state.");
          markTokenAsInvalid();
          setError("Your GitHub token is invalid or has expired. Please update it.");
        } else {
          setError(e.message || "Failed to refresh repositories.");
        }
      } finally {
        setIsLoadingRepos(false);
      }
    } else {
      setError("GitHub token not found. Cannot refresh.");
    }
  }, [user, getEffectiveToken, markTokenAsInvalid]);

  const createRepository = async (newRepoName: string, newRepoDescription: string) => {
    if (!newRepoName.trim()) return;
    const effectiveToken = await getEffectiveToken();
    if (!effectiveToken) {
      addChatMessage({ role: "assistant", content: "To create repositories, please set up your GitHub Personal Access Token." });
      showTokenPopup();
      return;
    }
    setIsCreatingRepo(true);
    try {
      const response = await fetch('https://api.github.com/user/repos', {
        method: 'POST',
        headers: {
          'Authorization': `token ${effectiveToken}`, 'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          name: newRepoName.trim(), description: newRepoDescription.trim() || undefined, private: false, auto_init: true,
        }),
      });
      if (response.ok) {
        const newRepo = await response.json();
        setRepositories(prev => [newRepo, ...prev]);
        addChatMessage({ role: "assistant", content: `🎉 Repository "${newRepo.name}" created successfully!` });
      } else {
        const errorData = await response.json();
        throw new Error(errorData.message || 'Failed to create repository');
      }
    } catch (error: any) {
      addChatMessage({ role: "assistant", content: `Failed to create repository: ${error.message}` });
    } finally {
      setIsCreatingRepo(false);
    }
  };

  const renameRepository = async (repoToRename: GitHubRepo, newRepoNameForRename: string) => {
    if (!repoToRename || !newRepoNameForRename.trim()) return;
    const effectiveToken = await getEffectiveToken();
    if (!effectiveToken) {
      addChatMessage({ role: "assistant", content: "To rename repositories, please set up your GitHub Personal Access Token." });
      showTokenPopup();
      return;
    }
    setIsRenamingRepo(true);
    try {
      const response = await fetch(`https://api.github.com/repos/${repoToRename.full_name}`, {
        method: 'PATCH',
        headers: {
          'Authorization': `token ${effectiveToken}`, 'Content-Type': 'application/json',
        },
        body: JSON.stringify({ name: newRepoNameForRename.trim() }),
      });
      if (response.ok) {
        const updatedRepo = await response.json();
        setRepositories(prev => prev.map(repo =>
          repo.id === repoToRename.id ? { ...repo, name: updatedRepo.name, full_name: updatedRepo.full_name } : repo
        ));
        addChatMessage({ role: "assistant", content: `🎉 Repository renamed to "${updatedRepo.name}" successfully!` });
      } else {
        const errorData = await response.json();
        throw new Error(errorData.message || 'Failed to rename repository');
      }
    } catch (error: any) {
      addChatMessage({ role: "assistant", content: `Failed to rename repository: ${error.message}` });
    } finally {
      setIsRenamingRepo(false);
    }
  };

  const confirmDeleteRepo = async (repoToDelete: GitHubRepo) => {
      const effectiveToken = await getEffectiveToken();
      if (!effectiveToken) {
        addChatMessage({ role: "assistant", content: "To delete repositories, please set up a GitHub PAT with 'delete_repo' permissions."});
        showTokenPopup();
        return;
      }
      setIsDeleting(true);
      try {
        const response = await fetch(`https://api.github.com/repos/${repoToDelete.full_name}`, {
          method: 'DELETE',
          headers: { 'Authorization': `token ${effectiveToken}`, 'Accept': 'application/vnd.github.v3+json' },
        });
        if (response.status === 204) {
          setRepositories(prev => prev.filter(repo => repo.id !== repoToDelete.id));
          addChatMessage({ role: "assistant", content: `🗑️ Repository "${repoToDelete.name}" has been permanently deleted.` });
        } else {
          const errorData = await response.json();
          throw new Error(errorData.message || `Failed to delete repository. Status: ${response.status}`);
        }
      } catch (error: any) {
        addChatMessage({ role: "assistant", content: `❌ Failed to delete repository: ${error.message}` });
      } finally {
        setIsDeleting(false);
      }
  };

  const handleBulkDelete = async () => {
    const effectiveToken = await getEffectiveToken();
    if (!effectiveToken) {
      addChatMessage({ role: "assistant", content: "To delete repositories, please set up your GitHub Personal Access Token." });
      showTokenPopup();
      return;
    }

    if (!profile) {
      addChatMessage({ role: "assistant", content: 'Error: User profile not found. Cannot proceed with deletion.' });
      return;
    }

    const originalRepos = [...repositories];
    const reposToDelete = originalRepos.filter((r: GitHubRepo) => selectedRepos.has(r.id));

    if (reposToDelete.length === 0) return;

    // 1. Optimistic UI Update
    setRepositories(prevRepos => prevRepos.filter((r: GitHubRepo) => !selectedRepos.has(r.id)));
    setIsDeleting(true);
    addChatMessage({ role: "assistant", content: `Deleting ${reposToDelete.length} repositories...` });

    // 2. Perform Deletions
    const deletePromises = reposToDelete.map((repo: GitHubRepo) =>
      repositoryManager.deleteRepository(effectiveToken, profile.login, repo.name)
    );

    // 3. Handle Results
    Promise.allSettled(deletePromises).then(results => {
      const failedDeletes = results.filter(res => res.status === 'rejected' || (res.status === 'fulfilled' && !res.value));

      if (failedDeletes.length > 0) {
        // Revert UI on failure and show error
        setRepositories(originalRepos);
        addChatMessage({
          role: "assistant",
          content: `Error: Failed to delete ${failedDeletes.length} repositories. Your view has been restored.`,
        });
      } else {
        addChatMessage({ role: "assistant", content: `🗑️ Successfully deleted ${reposToDelete.length} repositories.` });
        // On success, update the 'originalRepositories' to prevent reverted state on next sort
        setOriginalRepositories(currentRepos => currentRepos.filter((r: GitHubRepo) => !selectedRepos.has(r.id)));
      }

      // 4. Reset State
      setSelectedRepos(new Set());
      setIsDeleting(false);
      setIsDeleteMode(false);
    });
  };

  // --- UI State and Interaction Handlers ---

  const handleDeleteRepo = (repo: GitHubRepo) => {
    setRepoToDelete(repo);
    openModal('delete');
  };
  
  const handleRenameRepo = (repo: GitHubRepo) => {
    setRepoToRename(repo);
    openModal('rename');
  };

  const toggleRepoSelection = (repoId: number) => {
    setSelectedRepos(prev => {
      const newSet = new Set(prev);
      newSet.has(repoId) ? newSet.delete(repoId) : newSet.add(repoId);
      return newSet;
    });
  };

  const toggleDeleteMode = () => {
    setIsDeleteMode(prev => !prev);
    setSelectedRepos(new Set());
  };

  const sortRepositoriesByDate = (repos: GitHubRepo[], order: 'newest' | 'oldest' | 'default'): GitHubRepo[] => {
    if (order === 'default') return [...originalRepositories];
    return [...repos].sort((a, b) => {
      const dateA = new Date(a.updated_at).getTime();
      const dateB = new Date(b.updated_at).getTime();
      return order === 'newest' ? dateB - dateA : dateA - dateB;
    });
  };

  const handleDateSort = (order: 'newest' | 'oldest' | 'default') => {
    setDateSortOrder(order);
    setRepositories(prev => sortRepositoriesByDate(prev, order));
    setHasChanges(order !== 'default');
  };

  const onDragEnd = (result: DropResult) => {
    const { source, destination } = result;
    if (!destination) return;

    const newRepos = Array.from(repositories);
    const [reorderedItem] = newRepos.splice(source.index, 1);
    newRepos.splice(destination.index, 0, reorderedItem);

    setRepositories(newRepos);
    setHasChanges(true);
  };
  
  // --- Data Fetching and Initialization ---

  useEffect(() => {
    const unsubscribe = repositoryManager.subscribe((repos) => {
      setRepositories(repos);
      if (originalRepositories.length === 0) setOriginalRepositories(repos);
      setIsLoadingRepos(false);
    });
    return () => unsubscribe();
  }, [originalRepositories.length]);

  const fetchInitialData = useCallback(async () => {
    if (!user || isInitialized) return;
    const effectiveToken = await getEffectiveToken();
    if (effectiveToken) {
      setIsLoadingRepos(true);
      try {
        await repositoryManager.fetchRepositories(effectiveToken, false, user.id);
        setError(null);
      } catch (e: any) {
        setError(e.message || "Failed to load repositories.");
      } finally {
        setIsLoadingRepos(false);
        setIsInitialized(true);
      }
    } else if (!authLoading) {
      setError("GitHub token not found.");
      setIsLoadingRepos(false);
      setIsInitialized(true);
    }
  }, [user, isInitialized, getEffectiveToken, authLoading]);

  useEffect(() => {
    fetchInitialData();
  }, [fetchInitialData]);

  return {
    repositories,
    isLoadingRepos,
    error,
    handleRefresh,
    // Deletion
    isDeleteMode,
    isDeleting,
    selectedRepos,
    toggleDeleteMode,
    toggleRepoSelection,
    handleDeleteRepo,
    confirmDeleteRepo,
    handleBulkDelete,
    // Sorting & Ordering
    dateSortOrder,
    handleDateSort,
    onDragEnd,
    hasChanges,
    setHasChanges,
    // Creation & Renaming
    isCreatingRepo,
    isRenamingRepo,
    createRepository,
    renameRepository,
    handleRenameRepo,
    // Other
    setRepositories
  };
}
</code>

app\dashboard\types\index.ts:
<code>
export interface GitHubUser {
  id: number;
  login: string;
  name: string;
  email: string;
  avatar_url: string;
  bio: string;
  public_repos: number;
}

export interface GitHubRepo {
  id: number;
  name: string;
  full_name: string;
  description: string;
  language: string;
  stargazers_count: number;
  forks_count: number;
  html_url: string;
  updated_at: string;
  created_at: string; // Added for sorting
  private: boolean;
  fork: boolean;
  clone_url?: string; // Optional fields from your original file
  ssh_url?: string;
  pushed_at?: string;
  size?: number;
  default_branch?: string;
  topics?: string[];
  visibility?: string;
  archived?: boolean;
  disabled?: boolean;
  open_issues_count?: number;
  license?: any;
  allow_forking?: boolean;
  is_template?: boolean;
  web_commit_signoff_required?: boolean;
  has_issues?: boolean;
  has_projects?: boolean;
  has_wiki?: boolean;
  has_pages?: boolean;
  has_downloads?: boolean;
  has_discussions?: boolean;
  security_and_analysis?: any;
  parent?: {
    full_name: string;
    html_url: string;
  };
}

export interface ChatMessage {
  id: string;
  role: "user" | "assistant";
  content: string;
  timestamp: Date;
}
</code>

app\dashboard\page.tsx:
<code>
// app/dashboard/page.tsx
"use client"

import React from 'react';
import { useDashboard } from './hooks/useDashboard';
import { RepositoryList } from './components/RepositoryList';
import { ChatSidebar } from './components/ChatSidebar';
import { DashboardMetrics } from './components/DashboardMetrics';
import { ActionButtons } from './components/ActionButtons';
import { Modals } from './components/Modals';
import DashboardHeader from '@/components/dashboard-header';
import GitHubTokenWarning from '@/components/github-token-warning';
import { Button } from '@/components/ui/button';
import { RefreshCw, CheckCircle } from "lucide-react";

export const dynamic = 'force-dynamic';

export default function DashboardPage() {
  const dashboard = useDashboard();

  if (dashboard.loading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <RefreshCw className="h-8 w-8 animate-spin mx-auto mb-4" />
          <p className="text-muted-foreground">Getting ready...</p>
        </div>
      </div>
    );
  }

  const forkedRepos = dashboard.repositories.filter(repo => repo.fork);

  return (
    <div className="min-h-screen bg-background text-foreground">
      <DashboardHeader />
      <div className="container mx-auto px-6 py-8">
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          <div className="lg:col-span-2">
            {!dashboard.profile?.github_pat_token && <GitHubTokenWarning onSetupToken={dashboard.showTokenPopup} />}
            {dashboard.error && <div className="bg-destructive/20 text-destructive p-3 rounded-md mb-4">{dashboard.error}</div>}

            <DashboardMetrics 
              repositories={dashboard.repositories}
              selectedTemplate={dashboard.selectedTemplate}
              isAiThinking={dashboard.isAiThinking}
              onTemplateChange={dashboard.setSelectedTemplate}
              onGenerateTemplate={dashboard.generateTemplate}
            />
            
            <ActionButtons
              isLoadingRepos={dashboard.isLoadingRepos}
              isDeleteMode={dashboard.isDeleteMode}
              selectedReposCount={dashboard.selectedRepos.size}
              dateSortOrder={dashboard.dateSortOrder}
              onRefresh={dashboard.handleRefresh}
              onDateSort={dashboard.handleDateSort}
              onAddRepo={() => dashboard.openModal('add')}
              onJobTemplate={() => dashboard.openModal('jobTemplate')}
              onToggleDeleteMode={dashboard.toggleDeleteMode}
              onBulkDelete={dashboard.handleBulkDelete}
            />

            <RepositoryList
              repositories={dashboard.repositories.filter(repo => !repo.fork)}
              isLoadingRepos={dashboard.isLoadingRepos}
              isDeleteMode={dashboard.isDeleteMode}
              selectedRepos={dashboard.selectedRepos}
              onDragEnd={dashboard.onDragEnd}
              onToggleSelection={dashboard.toggleRepoSelection}
              onDeleteRepo={dashboard.handleDeleteRepo}
              onRenameRepo={(repo) => {
                  dashboard.setNewRepoNameForRename(repo.name);
                  dashboard.handleRenameRepo(repo);
              }}
            />

            {dashboard.hasChanges && (
              <div className="mt-4 p-3 bg-muted/30 rounded-lg border border-border/50">
                <Button onClick={() => dashboard.setHasChanges(false)} disabled={dashboard.isAiThinking} className="w-full">
                  {dashboard.isAiThinking ? 'Applying...' : <><CheckCircle className="w-4 h-4 mr-2" />Apply Changes</>}
                </Button>
              </div>
            )}

            {forkedRepos.length > 0 && (
              <div className="mt-6">
                <h3 className="text-lg font-semibold mb-2">Forked Repositories</h3>
                {/* You can map over forkedRepos here to display them */}
              </div>
            )}
          </div>

          {/* THIS IS THE UPDATED LINE */}
          <div className="lg:col-span-1 sticky top-24 self-start">
            <ChatSidebar
              isMinimized={dashboard.isChatMinimized}
              isCriticMode={dashboard.isCriticMode}
              isInterviewMode={dashboard.isInterviewMode}
              interviewProgress={dashboard.interviewProgress}
              generatedReadme={dashboard.generatedReadme}
              chatMessages={dashboard.chatMessages}
              chatMessage={dashboard.chatMessage}
              isAiThinking={dashboard.isAiThinking}
              welcomeText={dashboard.welcomeText}
              isTypingWelcome={dashboard.isTypingWelcome}
              repositories={dashboard.repositories}
              chatEndRef={dashboard.chatEndRef}
              setIsMinimized={dashboard.setIsChatMinimized}
              setIsCriticMode={dashboard.setIsCriticMode}
              setChatMessage={dashboard.setChatMessage}
              handleSendMessage={dashboard.handleSendMessage}
              handleResetChat={dashboard.handleResetChat}
              downloadPortfolioReadme={dashboard.downloadPortfolioReadme}
              sendDirectMessage={dashboard.sendDirectMessage}
              generateReadme={dashboard.generateReadme}
            />
          </div>
        </div>
        
        <Modals
          showDeleteConfirm={dashboard.showDeleteConfirm}
          repoToDelete={dashboard.repoToDelete}
          isDeleting={dashboard.isDeleting}
          onConfirmDelete={dashboard.onConfirmDelete}
          onCancelDelete={() => dashboard.closeModal('delete')}
          showJobTemplateModal={dashboard.showJobTemplateModal}
          jobTitle={dashboard.jobTitle}
          isGeneratingTemplate={dashboard.isGeneratingTemplate}
          templateResults={dashboard.templateResults}
          onJobTitleChange={dashboard.setJobTitle}
          onGenerateJobTemplate={dashboard.generateJobTemplate}
          onCloseJobTemplate={() => dashboard.closeModal('jobTemplate')}
          showAddRepoModal={dashboard.showAddRepoModal}
          newRepoName={dashboard.newRepoName}
          newRepoDescription={dashboard.newRepoDescription}
          isCreatingRepo={dashboard.isCreatingRepo}
          onNewRepoNameChange={dashboard.setNewRepoName}
          onNewRepoDescriptionChange={dashboard.setNewRepoDescription}
          onCreateRepo={dashboard.onCreateRepo}
          onCloseAddRepo={() => dashboard.closeModal('add')}
          showRenameModal={dashboard.showRenameModal}
          repoToRename={dashboard.repoToRename}
          newRepoNameForRename={dashboard.newRepoNameForRename}
          isRenamingRepo={dashboard.isRenamingRepo}
          onNewRepoNameForRenameChange={dashboard.setNewRepoNameForRename}
          onRenameRepo={dashboard.onRenameRepo}
          onCloseRenameRepo={() => dashboard.closeModal('rename')}
        />
      </div>
    </div>
  );
}
</code>

app\debug\page.tsx:
<code>
"use client"

import { useState, useEffect } from "react"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Github, ArrowLeft, Settings, AlertTriangle, CheckCircle, XCircle } from "lucide-react"
import Link from "next/link"

export default function DebugPage() {
  const [debugInfo, setDebugInfo] = useState<any>(null)
  const [isLoading, setIsLoading] = useState(true)

  useEffect(() => {
    runDiagnostics()
  }, [])

  const runDiagnostics = async () => {
    setIsLoading(true)
    const info: any = {
      timestamp: new Date().toISOString(),
      environment: process.env.NODE_ENV,
      tests: {},
    }

    try {
      // Test 1: Environment Variables
      info.tests.envVars = {
        name: "Environment Variables",
        status: "success",
        details: {
          githubClientId: !!process.env.NEXT_PUBLIC_GITHUB_CLIENT_ID,
          clientIdValue: process.env.NEXT_PUBLIC_GITHUB_CLIENT_ID?.substring(0, 10) + "...",
          nodeEnv: process.env.NODE_ENV,
        },
      }

      // Test 2: URLs
      info.tests.urls = {
        name: "URL Configuration",
        status: "success",
        details: {
          currentOrigin: window.location.origin,
          callbackUrl: `${window.location.origin}/api/github/callback`,
          githubAuthUrl: `https://github.com/login/oauth/authorize?client_id=${process.env.NEXT_PUBLIC_GITHUB_CLIENT_ID}`,
        },
      }

      // Test 3: Session API
      try {
        const sessionResponse = await fetch("/api/session")
        info.tests.sessionApi = {
          name: "Session API",
          status: sessionResponse.ok ? "success" : "warning",
          details: {
            status: sessionResponse.status,
            statusText: sessionResponse.statusText,
            hasSession: sessionResponse.status === 200,
          },
        }
      } catch (err) {
        info.tests.sessionApi = {
          name: "Session API",
          status: "error",
          details: { error: err instanceof Error ? err.message : "Unknown error" },
        }
      }

      // Test 4: GitHub API Connectivity
      try {
        const githubResponse = await fetch("https://api.github.com/", { method: "HEAD" })
        info.tests.githubApi = {
          name: "GitHub API Connectivity",
          status: githubResponse.ok ? "success" : "error",
          details: {
            status: githubResponse.status,
            accessible: githubResponse.ok,
          },
        }
      } catch (err) {
        info.tests.githubApi = {
          name: "GitHub API Connectivity",
          status: "error",
          details: { error: err instanceof Error ? err.message : "Network error" },
        }
      }

      // Test 5: Browser Environment
      info.tests.browser = {
        name: "Browser Environment",
        status: "success",
        details: {
          localStorage: typeof localStorage !== "undefined",
          sessionStorage: typeof sessionStorage !== "undefined",
          cookies: typeof document !== "undefined",
          https: window.location.protocol === "https:" || window.location.hostname === "localhost",
          userAgent: navigator.userAgent.substring(0, 50) + "...",
        },
      }

      setDebugInfo(info)
    } catch (error) {
      console.error("Diagnostics error:", error)
      info.tests.diagnosticsError = {
        name: "Diagnostics Error",
        status: "error",
        details: { error: error instanceof Error ? error.message : "Unknown error" },
      }
      setDebugInfo(info)
    } finally {
      setIsLoading(false)
    }
  }

  const testGitHubOAuth = () => {
    const clientId = process.env.NEXT_PUBLIC_GITHUB_CLIENT_ID
    if (!clientId) {
      alert('GitHub Client ID not configured. Please set NEXT_PUBLIC_GITHUB_CLIENT_ID environment variable.')
      return
    }

    const redirectUri = `${window.location.origin}/api/github/callback`
    const scope = "repo user"
    const state = `debug_test_${Date.now()}`

    const githubAuthUrl = new URL("https://github.com/login/oauth/authorize")
    githubAuthUrl.searchParams.set("client_id", clientId)
    githubAuthUrl.searchParams.set("redirect_uri", redirectUri)
    githubAuthUrl.searchParams.set("scope", scope)
    githubAuthUrl.searchParams.set("state", state)

    console.log("🧪 Testing GitHub OAuth with URL:", githubAuthUrl.toString())
    window.open(githubAuthUrl.toString(), "_blank")
  }

  const getStatusIcon = (status: string) => {
    switch (status) {
      case "success":
        return <CheckCircle className="h-4 w-4 text-green-400" />
      case "warning":
        return <AlertTriangle className="h-4 w-4 text-yellow-400" />
      case "error":
        return <XCircle className="h-4 w-4 text-red-400" />
      default:
        return <AlertTriangle className="h-4 w-4 text-gray-400" />
    }
  }

  const getStatusColor = (status: string) => {
    switch (status) {
      case "success":
        return "border-green-500/50 bg-green-900/20"
      case "warning":
        return "border-yellow-500/50 bg-yellow-900/20"
      case "error":
        return "border-red-500/50 bg-red-900/20"
      default:
        return "border-gray-500/50 bg-gray-900/20"
    }
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900 text-white">
      <div className="container mx-auto px-4 py-8">
        {/* Header */}
        <div className="flex items-center justify-between mb-8">
          <div>
            <h1 className="text-3xl font-bold mb-2">🔧 Debug Dashboard</h1>
            <p className="text-gray-400">Troubleshoot GitHub OAuth issues</p>
          </div>
          <Link href="/">
            <Button variant="outline" className="border-gray-600 text-gray-300 hover:bg-gray-800 bg-transparent">
              <ArrowLeft className="h-4 w-4 mr-2" />
              Back to Home
            </Button>
          </Link>
        </div>

        {/* Quick Actions */}
        <div className="grid md:grid-cols-3 gap-6 mb-8">
          <Card className="bg-gray-800/30 border-gray-700/50">
            <CardContent className="p-6">
              <Button onClick={testGitHubOAuth} className="w-full bg-purple-600 hover:bg-purple-700">
                <Github className="h-4 w-4 mr-2" />
                Test GitHub OAuth (New Tab)
              </Button>
            </CardContent>
          </Card>

          <Card className="bg-gray-800/30 border-gray-700/50">
            <CardContent className="p-6">
              <Button onClick={runDiagnostics} disabled={isLoading} className="w-full bg-blue-600 hover:bg-blue-700">
                <Settings className="h-4 w-4 mr-2" />
                {isLoading ? "Running..." : "Refresh Diagnostics"}
              </Button>
            </CardContent>
          </Card>

          <Card className="bg-gray-800/30 border-gray-700/50">
            <CardContent className="p-6">
              <Button
                onClick={() => window.open("https://github.com/settings/applications", "_blank")}
                variant="outline"
                className="w-full border-gray-600 bg-transparent"
              >
                <Github className="h-4 w-4 mr-2" />
                GitHub OAuth Apps
              </Button>
            </CardContent>
          </Card>
        </div>

        {/* Diagnostics Results */}
        {debugInfo && (
          <div className="space-y-6">
            <Card className="bg-gray-800/30 border-gray-700/50">
              <CardHeader>
                <CardTitle>📊 System Information</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="grid md:grid-cols-2 gap-4 text-sm">
                  <div>
                    <strong>Timestamp:</strong> {new Date(debugInfo.timestamp).toLocaleString()}
                  </div>
                  <div>
                    <strong>Environment:</strong> {debugInfo.environment}
                  </div>
                </div>
              </CardContent>
            </Card>

            {/* Test Results */}
            <div className="grid gap-4">
              {Object.entries(debugInfo.tests).map(([key, test]: [string, any]) => (
                <Card key={key} className={`${getStatusColor(test.status)} border`}>
                  <CardContent className="p-4">
                    <div className="flex items-center justify-between mb-3">
                      <h4 className="font-semibold flex items-center gap-2">
                        {getStatusIcon(test.status)}
                        {test.name}
                      </h4>
                      <Badge variant={test.status === "success" ? "default" : "destructive"}>
                        {test.status.toUpperCase()}
                      </Badge>
                    </div>
                    <div className="text-sm space-y-2">
                      {Object.entries(test.details).map(([detailKey, value]: [string, any]) => (
                        <div key={detailKey} className="flex justify-between items-center">
                          <span className="text-gray-400">{detailKey}:</span>
                          <span
                            className={`font-mono text-xs ${
                              typeof value === "boolean" ? (value ? "text-green-400" : "text-red-400") : "text-gray-300"
                            }`}
                          >
                            {typeof value === "boolean" ? (value ? "✅ Yes" : "❌ No") : String(value)}
                          </span>
                        </div>
                      ))}
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          </div>
        )}

        {/* Common Issues */}
        <Card className="bg-gray-800/30 border-gray-700/50 mt-8">
          <CardHeader>
            <CardTitle>🚨 Common Issues & Solutions</CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="border-l-4 border-red-500 pl-4">
              <h4 className="font-semibold text-red-400">Blank White Page After OAuth</h4>
              <p className="text-sm text-gray-300">
                Usually caused by callback URL mismatch. Check that your GitHub OAuth App callback URL is exactly:{" "}
                <code className="bg-gray-700 px-1 rounded">
                  {typeof window !== "undefined" ? `${window.location.origin}/api/github/callback` : ""}
                </code>
              </p>
            </div>
            <div className="border-l-4 border-yellow-500 pl-4">
              <h4 className="font-semibold text-yellow-400">OAuth App Not Found</h4>
              <p className="text-sm text-gray-300">
                Make sure your GitHub OAuth App exists and the Client ID matches your environment variable
              </p>
            </div>
            <div className="border-l-4 border-blue-500 pl-4">
              <h4 className="font-semibold text-blue-400">CORS or Network Issues</h4>
              <p className="text-sm text-gray-300">
                Check browser console for errors and ensure you're not blocking GitHub API requests
              </p>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  )
}

</code>

app\profile\page.tsx:
<code>
"use client"

// Force dynamic rendering to avoid static generation issues with auth
export const dynamic = 'force-dynamic'

import React, { useState } from 'react';
import { useRouter } from 'next/navigation';
import { useAuth } from '@/components/auth-provider';
import TokenManagement from '@/components/token-management';
import { ThemeToggle } from '@/components/theme-toggle';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Badge } from '@/components/ui/badge';
// import { Label } from '@/components/ui/label';
import { Separator } from '@/components/ui/separator';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { 
  ArrowLeft, 
  User, 
  Settings, 
  Shield, 
  LogOut, 
  Github,
  Mail,
  Calendar,
  CheckCircle,
  AlertTriangle,
  Key
} from 'lucide-react';


export default function ProfilePage() {
  const router = useRouter();
  const { user, profile, loading, signOut, updateToken, deleteToken } = useAuth();
  const [isUpdating, setIsUpdating] = useState(false);
  const [updateMessage, setUpdateMessage] = useState('');

  const handleTokenUpdate = async (token: string) => {
    if (!user) return;
    
    setIsUpdating(true);
    try {
      await updateToken(token);
      
      setUpdateMessage('✅ GitHub token updated successfully!');
      setTimeout(() => setUpdateMessage(''), 3000);
    } catch (error) {
      console.error('Error updating token:', error);
      setUpdateMessage('❌ Failed to update token. Please try again.');
      setTimeout(() => setUpdateMessage(''), 3000);
    } finally {
      setIsUpdating(false);
    }
  };

  const handleTokenDelete = async () => {
    if (!user) return;
    
    setIsUpdating(true);
    try {
      await deleteToken();
      
      setUpdateMessage('✅ GitHub token deleted successfully!');
      setTimeout(() => setUpdateMessage(''), 3000);
    } catch (error) {
      console.error('Error deleting token:', error);
      setUpdateMessage('❌ Failed to delete token. Please try again.');
      setTimeout(() => setUpdateMessage(''), 3000);
    } finally {
      setIsUpdating(false);
    }
  };

  const handleSignOut = async () => {
    await signOut();
    router.push('/');
  };

  // Show loading while auth or profile is initializing
  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <h1 className="text-2xl font-bold mb-4">Loading...</h1>
          <p className="text-muted-foreground mb-4">Initializing your profile...</p>
        </div>
      </div>
    );
  }

  // If still no user after loading, show message (no automatic redirect)
  if (!user) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <h1 className="text-2xl font-bold mb-4">Not Authenticated</h1>
          <p className="text-muted-foreground mb-4">Please sign in to view your profile.</p>
          <p className="text-muted-foreground">Navigate manually to the homepage to sign in.</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-background">
      {/* Header */}
      <div className="border-b bg-card">
        <div className="container mx-auto px-4 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-4">
              <Button 
                variant="ghost" 
                size="sm" 
                onClick={() => router.push('/dashboard')}
              >
                <ArrowLeft className="h-4 w-4 mr-2" />
                Back to Dashboard
              </Button>
              <div className="flex items-center gap-2">
                <User className="h-5 w-5" />
                <h1 className="text-xl font-semibold">Profile Settings</h1>
              </div>
            </div>
            <ThemeToggle />
          </div>
        </div>
      </div>

      <div className="container mx-auto px-4 py-8 max-w-4xl">
        {/* Update Message */}
        {updateMessage && (
          <Alert className="mb-6">
            <AlertDescription>{updateMessage}</AlertDescription>
          </Alert>
        )}

        <div className="grid gap-6">
          {/* Profile Information */}
          <Card>
            <CardHeader>
              <div className="flex items-center gap-2">
                <User className="h-5 w-5" />
                <CardTitle>Profile Information</CardTitle>
              </div>
              <CardDescription>
                Your account information from GitHub
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              <div className="flex items-center gap-4">
                <Avatar className="h-16 w-16">
                  <AvatarImage 
                    src={user.user_metadata?.avatar_url} 
                    alt={user.user_metadata?.name || 'User'} 
                  />
                  <AvatarFallback>
                    {user.user_metadata?.name?.[0] || 'U'}
                  </AvatarFallback>
                </Avatar>
                <div>
                  <h3 className="text-lg font-semibold">
                    {user.user_metadata?.full_name || user.user_metadata?.name || 'Unknown User'}
                  </h3>
                  <p className="text-muted-foreground">
                    @{user.user_metadata?.user_name || 'unknown'}
                  </p>
                </div>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="space-y-2">
                  <label htmlFor="email" className="text-sm font-medium">Email</label>
                  <div className="flex items-center gap-2">
                    <Mail className="h-4 w-4 text-muted-foreground" />
                    <Input
                      id="email"
                      value={user.email || 'Not provided'}
                      disabled
                      className="bg-muted"
                    />
                  </div>
                </div>

                <div className="space-y-2">
                  <label htmlFor="github" className="text-sm font-medium">GitHub Username</label>
                  <div className="flex items-center gap-2">
                    <Github className="h-4 w-4 text-muted-foreground" />
                    <Input
                      id="github"
                      value={user.user_metadata?.user_name || 'Not connected'}
                      disabled
                      className="bg-muted"
                    />
                  </div>
                </div>
              </div>

              <div className="space-y-2">
                <label htmlFor="joined" className="text-sm font-medium">Member Since</label>
                <div className="flex items-center gap-2">
                  <Calendar className="h-4 w-4 text-muted-foreground" />
                  <Input
                    id="joined"
                    value={new Date(user.created_at).toLocaleDateString()}
                    disabled
                    className="bg-muted"
                  />
                </div>
              </div>
            </CardContent>
          </Card>

          {/* GitHub Token Management */}
          <Card>
            <CardHeader>
              <div className="flex items-center gap-2">
                <Key className="h-5 w-5" />
                <CardTitle>GitHub Access Token</CardTitle>
              </div>
              <CardDescription>
                Manage your GitHub Personal Access Token for repository operations
              </CardDescription>
            </CardHeader>
            <CardContent>
              <TokenManagement
                currentToken={profile?.github_pat_token}
                onTokenUpdate={handleTokenUpdate}
                onTokenDelete={handleTokenDelete}
              />
            </CardContent>
          </Card>

          {/* Account Security */}
          <Card>
            <CardHeader>
              <div className="flex items-center gap-2">
                <Shield className="h-5 w-5" />
                <CardTitle>Account Security</CardTitle>
              </div>
              <CardDescription>
                Manage your account security settings
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="flex items-center justify-between p-4 border rounded-lg">
                <div className="flex items-center gap-3">
                  <CheckCircle className="h-5 w-5 text-green-500" />
                  <div>
                    <p className="font-medium">GitHub OAuth</p>
                    <p className="text-sm text-muted-foreground">
                      Connected via GitHub OAuth
                    </p>
                  </div>
                </div>
                <Badge variant="secondary">Active</Badge>
              </div>

              <Alert>
                <AlertTriangle className="h-4 w-4" />
                <AlertDescription>
                  <strong>Password Management:</strong> Your account is managed through GitHub OAuth. 
                  To change your password, please update it in your GitHub account settings.
                </AlertDescription>
              </Alert>
            </CardContent>
          </Card>

          {/* Danger Zone */}
          <Card className="border-red-200 dark:border-red-800">
            <CardHeader>
              <CardTitle className="text-red-600 dark:text-red-400">Danger Zone</CardTitle>
              <CardDescription>
                Irreversible and destructive actions
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="flex items-center justify-between p-4 border border-red-200 dark:border-red-800 rounded-lg">
                <div>
                  <p className="font-medium">Sign Out</p>
                  <p className="text-sm text-muted-foreground">
                    Sign out of your account on this device
                  </p>
                </div>
                <Button 
                  variant="destructive" 
                  onClick={handleSignOut}
                >
                  <LogOut className="h-4 w-4 mr-2" />
                  Sign Out
                </Button>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
}

</code>

app\signout\page.tsx:
<code>
"use client"

import { useEffect, useState } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import { Github, CheckCircle } from 'lucide-react';
import { Badge } from '@/components/ui/badge';
import { Card, CardContent } from '@/components/ui/card';

export default function SignoutPage() {
  const router = useRouter();
  const searchParams = useSearchParams();

  // Get user info from URL parameters
  const username = searchParams.get('username') || 'User';
  const email = searchParams.get('email') || '';
  const avatar = searchParams.get('avatar') || '';

  // REMOVED: Countdown timer and automatic redirect logic

  return (
    <div className="min-h-screen bg-background flex items-center justify-center p-4">
      <div className="w-full max-w-md space-y-6">
        {/* Header */}
        <div className="text-center space-y-2">
          <div className="flex items-center justify-center space-x-3 mb-4">
            <Github className="h-8 w-8 text-primary" />
            <div className="flex flex-col">
              <span className="text-xl font-bold">NeatRepo</span>
            </div>
          </div>
          <h1 className="text-2xl font-bold">Account signed out</h1>
          <p className="text-muted-foreground">
            You have been successfully signed out
          </p>
        </div>

        {/* Signed out account card */}
        <Card className="border-2">
          <CardContent className="p-6">
            <div className="flex items-center space-x-4">
              {/* Avatar */}
              <div className="relative">
                {avatar ? (
                  <img 
                    src={avatar} 
                    alt={username}
                    className="w-12 h-12 rounded-full"
                  />
                ) : (
                  <div className="w-12 h-12 rounded-full bg-muted flex items-center justify-center">
                    <Github className="h-6 w-6 text-muted-foreground" />
                  </div>
                )}
                {/* Signed out badge */}
                <div className="absolute -top-1 -right-1">
                  <Badge variant="secondary" className="text-xs px-2 py-1 bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200">
                    <CheckCircle className="h-3 w-3 mr-1" />
                    Signed out
                  </Badge>
                </div>
              </div>

              {/* Account info */}
              <div className="flex-1 min-w-0">
                <p className="font-medium text-sm truncate">{username}</p>
                {email && (
                  <p className="text-xs text-muted-foreground truncate">{email}</p>
                )}
                <p className="text-xs text-muted-foreground mt-1">
                  GitHub account
                </p>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Status message */}
        <div className="text-center space-y-3">
          <div className="flex items-center justify-center space-x-2">
            <CheckCircle className="w-4 h-4 text-green-600" />
            <span className="text-sm text-muted-foreground">
              Sign out complete
            </span>
          </div>

          <p className="text-xs text-muted-foreground">
            Choose where to go next - no automatic redirection
          </p>
        </div>

        {/* Additional options */}
        <div className="text-center space-y-2">
          <button
            onClick={() => router.push('/')}
            className="text-sm text-primary hover:underline"
          >
            Go to homepage now
          </button>
          
          <div className="text-xs text-muted-foreground">
            Want to sign in with a different account?{' '}
            <button
              onClick={() => router.push('/')}
              className="text-primary hover:underline"
            >
              Sign in here
            </button>
          </div>
        </div>
      </div>
    </div>
  );
}

</code>

app\test-callback\page.tsx:
<code>
"use client"

import { useState } from "react"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Github, ArrowLeft, Play, CheckCircle, XCircle, AlertTriangle } from "lucide-react"
import Link from "next/link"

export default function TestCallbackPage() {
  const [testResults, setTestResults] = useState<any>(null)
  const [isLoading, setIsLoading] = useState(false)

  const runCallbackTest = async () => {
    setIsLoading(true)
    const results: any = {
      timestamp: new Date().toISOString(),
      tests: {},
    }

    try {
      // Test 1: Basic callback endpoint
      console.log("🧪 Testing callback endpoint...")
      try {
        const response = await fetch("/api/github/callback?test=true")
        results.tests.callbackEndpoint = {
          name: "Callback Endpoint",
          status: response.ok ? "success" : "error",
          details: {
            status: response.status,
            statusText: response.statusText,
            accessible: response.ok,
          },
        }
      } catch (err) {
        results.tests.callbackEndpoint = {
          name: "Callback Endpoint",
          status: "error",
          details: { error: err instanceof Error ? err.message : "Unknown error" },
        }
      }

      // Test 2: Environment variables
      results.tests.environment = {
        name: "Environment Variables",
        status: "success",
        details: {
          clientId: !!process.env.NEXT_PUBLIC_GITHUB_CLIENT_ID,
          nodeEnv: process.env.NODE_ENV,
          origin: window.location.origin,
        },
      }

      // Test 3: Session API
      try {
        const sessionResponse = await fetch("/api/session")
        results.tests.sessionApi = {
          name: "Session API",
          status: sessionResponse.status === 401 ? "success" : "warning", // 401 is expected when no session
          details: {
            status: sessionResponse.status,
            statusText: sessionResponse.statusText,
            working: sessionResponse.status === 401 || sessionResponse.status === 200,
          },
        }
      } catch (err) {
        results.tests.sessionApi = {
          name: "Session API",
          status: "error",
          details: { error: err instanceof Error ? err.message : "Unknown error" },
        }
      }

      // Test 4: GitHub OAuth URL generation
      try {
        const clientId = process.env.NEXT_PUBLIC_GITHUB_CLIENT_ID
        if (!clientId) {
          throw new Error('GitHub Client ID not configured')
        }

        const redirectUri = `${window.location.origin}/api/github/callback`
        const githubUrl = `https://github.com/login/oauth/authorize?client_id=${clientId}&redirect_uri=${encodeURIComponent(redirectUri)}&scope=repo%20user`

        results.tests.oauthUrl = {
          name: "OAuth URL Generation",
          status: "success",
          details: {
            clientId: clientId.substring(0, 10) + "...",
            redirectUri,
            fullUrl: githubUrl.substring(0, 100) + "...",
          },
        }
      } catch (err) {
        results.tests.oauthUrl = {
          name: "OAuth URL Generation",
          status: "error",
          details: { error: err instanceof Error ? err.message : "Unknown error" },
        }
      }

      setTestResults(results)
    } catch (error) {
      console.error("Test error:", error)
      results.tests.testError = {
        name: "Test Execution",
        status: "error",
        details: { error: error instanceof Error ? error.message : "Unknown error" },
      }
      setTestResults(results)
    } finally {
      setIsLoading(false)
    }
  }

  const testOAuthFlow = () => {
    const clientId = process.env.NEXT_PUBLIC_GITHUB_CLIENT_ID || "Ov23liaOcBS8zuFJCGyG"
    const redirectUri = `${window.location.origin}/api/github/callback`
    const scope = "repo user"
    const state = `test_${Date.now()}`

    const githubAuthUrl = new URL("https://github.com/login/oauth/authorize")
    githubAuthUrl.searchParams.set("client_id", clientId)
    githubAuthUrl.searchParams.set("redirect_uri", redirectUri)
    githubAuthUrl.searchParams.set("scope", scope)
    githubAuthUrl.searchParams.set("state", state)

    console.log("🧪 Testing OAuth flow with URL:", githubAuthUrl.toString())
    window.location.href = githubAuthUrl.toString()
  }

  const getStatusIcon = (status: string) => {
    switch (status) {
      case "success":
        return <CheckCircle className="h-4 w-4 text-green-400" />
      case "warning":
        return <AlertTriangle className="h-4 w-4 text-yellow-400" />
      case "error":
        return <XCircle className="h-4 w-4 text-red-400" />
      default:
        return <AlertTriangle className="h-4 w-4 text-gray-400" />
    }
  }

  const getStatusColor = (status: string) => {
    switch (status) {
      case "success":
        return "border-green-500/50 bg-green-900/20"
      case "warning":
        return "border-yellow-500/50 bg-yellow-900/20"
      case "error":
        return "border-red-500/50 bg-red-900/20"
      default:
        return "border-gray-500/50 bg-gray-900/20"
    }
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900 text-white">
      <div className="container mx-auto px-4 py-8">
        {/* Header */}
        <div className="flex items-center justify-between mb-8">
          <div>
            <h1 className="text-3xl font-bold mb-2">🧪 Callback Test Page</h1>
            <p className="text-gray-400">Test GitHub OAuth callback functionality</p>
          </div>
          <Link href="/">
            <Button variant="outline" className="border-gray-600 text-gray-300 hover:bg-gray-800 bg-transparent">
              <ArrowLeft className="h-4 w-4 mr-2" />
              Back to Home
            </Button>
          </Link>
        </div>

        {/* Test Actions */}
        <div className="grid md:grid-cols-2 gap-6 mb-8">
          <Card className="bg-gray-800/30 border-gray-700/50">
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Play className="h-5 w-5 text-blue-400" />
                Run Callback Tests
              </CardTitle>
            </CardHeader>
            <CardContent>
              <p className="text-gray-400 mb-4">Test all callback-related functionality without OAuth</p>
              <Button onClick={runCallbackTest} disabled={isLoading} className="w-full bg-blue-600 hover:bg-blue-700">
                {isLoading ? "Running Tests..." : "Run Tests"}
              </Button>
            </CardContent>
          </Card>

          <Card className="bg-gray-800/30 border-gray-700/50">
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Github className="h-5 w-5 text-purple-400" />
                Test Full OAuth Flow
              </CardTitle>
            </CardHeader>
            <CardContent>
              <p className="text-gray-400 mb-4">Test the complete GitHub OAuth flow (will redirect)</p>
              <Button onClick={testOAuthFlow} className="w-full bg-purple-600 hover:bg-purple-700">
                <Github className="h-4 w-4 mr-2" />
                Test OAuth Flow
              </Button>
            </CardContent>
          </Card>
        </div>

        {/* Test Results */}
        {testResults && (
          <div className="space-y-4">
            <Card className="bg-gray-800/30 border-gray-700/50">
              <CardHeader>
                <CardTitle>📊 Test Results</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="text-sm text-gray-400 mb-4">
                  Last run: {new Date(testResults.timestamp).toLocaleString()}
                </div>
              </CardContent>
            </Card>

            {Object.entries(testResults.tests).map(([key, test]: [string, any]) => (
              <Card key={key} className={`${getStatusColor(test.status)} border`}>
                <CardContent className="p-4">
                  <div className="flex items-center justify-between mb-3">
                    <h4 className="font-semibold flex items-center gap-2">
                      {getStatusIcon(test.status)}
                      {test.name}
                    </h4>
                    <Badge variant={test.status === "success" ? "default" : "destructive"}>
                      {test.status.toUpperCase()}
                    </Badge>
                  </div>
                  <div className="text-sm space-y-1">
                    {Object.entries(test.details).map(([detailKey, value]: [string, any]) => (
                      <div key={detailKey} className="flex justify-between items-center">
                        <span className="text-gray-400">{detailKey}:</span>
                        <span
                          className={`font-mono text-xs ${
                            typeof value === "boolean" ? (value ? "text-green-400" : "text-red-400") : "text-gray-300"
                          }`}
                        >
                          {typeof value === "boolean" ? (value ? "✅" : "❌") : String(value)}
                        </span>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        )}

        {/* Instructions */}
        <Card className="bg-gray-800/30 border-gray-700/50 mt-8">
          <CardHeader>
            <CardTitle>📝 Testing Instructions</CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="border-l-4 border-blue-500 pl-4">
              <h4 className="font-semibold text-blue-400">Step 1: Run Callback Tests</h4>
              <p className="text-sm text-gray-300">
                This will test if your callback endpoint is working and all environment variables are set correctly.
              </p>
            </div>
            <div className="border-l-4 border-purple-500 pl-4">
              <h4 className="font-semibold text-purple-400">Step 2: Test OAuth Flow</h4>
              <p className="text-sm text-gray-300">
                This will redirect you to GitHub OAuth. If successful, you should be redirected back to the dashboard.
              </p>
            </div>
            <div className="border-l-4 border-green-500 pl-4">
              <h4 className="font-semibold text-green-400">Step 3: Check Console Logs</h4>
              <p className="text-sm text-gray-300">
                Open browser developer tools and check the console for detailed logs during the OAuth process.
              </p>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  )
}

</code>

app\test-sorting\page.tsx:
<code>
'use client';

import { useState } from 'react';
import { RepositorySorter, Repository } from '@/lib/repository-sorter';

// Mock repository data for testing
const mockRepositories: Repository[] = [
  {
    id: 1,
    name: 'hello-world',
    full_name: 'almond-donut/hello-world',
    description: 'My first repository',
    language: 'JavaScript',
    stargazers_count: 2,
    forks_count: 0,
    updated_at: '2024-01-15T10:00:00Z',
    created_at: '2024-01-01T10:00:00Z',
    html_url: 'https://github.com/almond-donut/hello-world',
    size: 50,
    has_issues: true,
    has_projects: false,
    has_wiki: false,
    open_issues_count: 1,
    topics: ['beginner'],
  },
  {
    id: 2,
    name: 'react-dashboard',
    full_name: 'almond-donut/react-dashboard',
    description: 'Advanced React dashboard with TypeScript and real-time features',
    language: 'TypeScript',
    stargazers_count: 25,
    forks_count: 5,
    updated_at: '2024-07-20T15:30:00Z',
    created_at: '2024-06-01T10:00:00Z',
    html_url: 'https://github.com/almond-donut/react-dashboard',
    size: 15000,
    has_issues: true,
    has_projects: true,
    has_wiki: true,
    open_issues_count: 8,
    topics: ['react', 'typescript', 'dashboard', 'real-time'],
  },
  {
    id: 3,
    name: 'python-scraper',
    full_name: 'almond-donut/python-scraper',
    description: 'Web scraping tool with data analysis',
    language: 'Python',
    stargazers_count: 12,
    forks_count: 3,
    updated_at: '2024-07-10T12:00:00Z',
    created_at: '2024-05-15T10:00:00Z',
    html_url: 'https://github.com/almond-donut/python-scraper',
    size: 5000,
    has_issues: true,
    has_projects: false,
    has_wiki: false,
    open_issues_count: 3,
    topics: ['python', 'scraping', 'data-analysis'],
  },
  {
    id: 4,
    name: 'css-animations',
    full_name: 'almond-donut/css-animations',
    description: 'Collection of CSS animations and effects',
    language: 'CSS',
    stargazers_count: 8,
    forks_count: 1,
    updated_at: '2024-03-20T14:00:00Z',
    created_at: '2024-03-01T10:00:00Z',
    html_url: 'https://github.com/almond-donut/css-animations',
    size: 200,
    has_issues: false,
    has_projects: false,
    has_wiki: false,
    open_issues_count: 0,
    topics: ['css', 'animations'],
  },
  {
    id: 5,
    name: 'rust-cli-tool',
    full_name: 'almond-donut/rust-cli-tool',
    description: 'High-performance CLI tool built with Rust',
    language: 'Rust',
    stargazers_count: 45,
    forks_count: 12,
    updated_at: '2024-07-22T09:15:00Z',
    created_at: '2024-04-01T10:00:00Z',
    html_url: 'https://github.com/almond-donut/rust-cli-tool',
    size: 8000,
    has_issues: true,
    has_projects: true,
    has_wiki: true,
    open_issues_count: 15,
    topics: ['rust', 'cli', 'performance', 'systems-programming'],
  },
];

export default function TestSortingPage() {
  const [repositories, setRepositories] = useState<Repository[]>(mockRepositories);
  const [sortMode, setSortMode] = useState<string>('original');

  const handleSort = (mode: string) => {
    let sorted: Repository[];
    
    switch (mode) {
      case 'complexity-asc':
        sorted = RepositorySorter.sortByComplexity([...repositories], 'asc');
        break;
      case 'complexity-desc':
        sorted = RepositorySorter.sortByComplexity([...repositories], 'desc');
        break;
      case 'cv-optimized':
        sorted = RepositorySorter.sortForCV([...repositories]);
        break;
      default:
        sorted = [...mockRepositories];
    }
    
    setRepositories(sorted);
    setSortMode(mode);
  };

  const getComplexityInfo = (repo: Repository) => {
    const complexity = RepositorySorter.calculateComplexity(repo);
    return complexity;
  };

  return (
    <div className="min-h-screen bg-gray-50 p-8">
      <div className="max-w-6xl mx-auto">
        <h1 className="text-3xl font-bold text-gray-900 mb-8">
          🧪 Repository Sorting Test Page
        </h1>
        
        <div className="bg-white rounded-lg shadow-md p-6 mb-8">
          <h2 className="text-xl font-semibold mb-4">Sorting Controls</h2>
          <div className="flex flex-wrap gap-4">
            <button
              onClick={() => handleSort('original')}
              className={`px-4 py-2 rounded-md ${
                sortMode === 'original'
                  ? 'bg-blue-600 text-white'
                  : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
              }`}
            >
              Original Order
            </button>
            <button
              onClick={() => handleSort('complexity-asc')}
              className={`px-4 py-2 rounded-md ${
                sortMode === 'complexity-asc'
                  ? 'bg-blue-600 text-white'
                  : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
              }`}
            >
              Simple → Complex
            </button>
            <button
              onClick={() => handleSort('complexity-desc')}
              className={`px-4 py-2 rounded-md ${
                sortMode === 'complexity-desc'
                  ? 'bg-blue-600 text-white'
                  : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
              }`}
            >
              Complex → Simple
            </button>
            <button
              onClick={() => handleSort('cv-optimized')}
              className={`px-4 py-2 rounded-md ${
                sortMode === 'cv-optimized'
                  ? 'bg-blue-600 text-white'
                  : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
              }`}
            >
              CV Optimized
            </button>
          </div>
          <p className="text-sm text-gray-600 mt-2">
            Current mode: <span className="font-semibold">{sortMode}</span>
          </p>
        </div>

        <div className="space-y-4">
          {repositories.map((repo, index) => {
            const complexity = getComplexityInfo(repo);
            return (
              <div key={repo.id} className="bg-white rounded-lg shadow-md p-6">
                <div className="flex items-start justify-between">
                  <div className="flex-1">
                    <div className="flex items-center gap-3 mb-2">
                      <span className="text-lg font-bold text-gray-500">
                        #{index + 1}
                      </span>
                      <h3 className="text-xl font-semibold text-gray-900">
                        {repo.name}
                      </h3>
                      <span className="px-2 py-1 bg-blue-100 text-blue-800 text-sm rounded-md">
                        {repo.language}
                      </span>
                    </div>
                    <p className="text-gray-600 mb-3">{repo.description}</p>
                    <div className="flex items-center gap-4 text-sm text-gray-500">
                      <span>⭐ {repo.stargazers_count}</span>
                      <span>🍴 {repo.forks_count}</span>
                      <span>📦 {repo.size} KB</span>
                      <span>📅 {new Date(repo.updated_at).toLocaleDateString()}</span>
                    </div>
                  </div>
                  <div className="ml-6 text-right">
                    <div className={`px-3 py-1 rounded-full text-sm font-medium mb-2 ${
                      complexity.level === 'Simple' ? 'bg-green-100 text-green-800' :
                      complexity.level === 'Intermediate' ? 'bg-yellow-100 text-yellow-800' :
                      complexity.level === 'Complex' ? 'bg-orange-100 text-orange-800' :
                      'bg-red-100 text-red-800'
                    }`}>
                      {complexity.level}
                    </div>
                    <div className="text-lg font-bold text-gray-900">
                      Score: {complexity.score}
                    </div>
                    <div className="text-xs text-gray-500 mt-1">
                      {complexity.factors.slice(0, 2).join(', ')}
                      {complexity.factors.length > 2 && '...'}
                    </div>
                  </div>
                </div>
              </div>
            );
          })}
        </div>

        <div className="mt-8 bg-white rounded-lg shadow-md p-6">
          <h2 className="text-xl font-semibold mb-4">🎯 CV Recommendations</h2>
          <button
            onClick={() => {
              const recommendations = RepositorySorter.generateCVRecommendations(repositories);
              console.log('CV Recommendations:', recommendations);
              alert(`Generated ${recommendations.length} CV recommendations. Check console for details.`);
            }}
            className="px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700"
          >
            Generate CV Recommendations
          </button>
        </div>
      </div>
    </div>
  );
}

</code>

app\globals.css:
<code>
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --font-jetbrains-mono: "JetBrains Mono", monospace;
  --background: 0 0% 100%;
  --foreground: 0 0% 3.9%;
  --card: 0 0% 100%;
  --card-foreground: 0 0% 3.9%;
  --popover: 0 0% 100%;
  --popover-foreground: 0 0% 3.9%;
  --primary: 0 0% 9%;
  --primary-foreground: 0 0% 98%;
  --secondary: 0 0% 96.1%;
  --secondary-foreground: 0 0% 9%;
  --muted: 0 0% 96.1%;
  --muted-foreground: 0 0% 45.1%;
  --accent: 0 0% 96.1%;
  --accent-foreground: 0 0% 9%;
  --destructive: 0 84.2% 60.2%;
  --destructive-foreground: 0 0% 98%;
  --border: 0 0% 89.8%;
  --input: 0 0% 89.8%;
  --ring: 0 0% 3.9%;
  --chart-1: 12 76% 61%;
  --chart-2: 173 58% 39%;
  --chart-3: 197 37% 24%;
  --chart-4: 43 74% 66%;
  --chart-5: 27 87% 67%;
  --radius: 0.5rem;
  --sidebar-background: 0 0% 98%;
  --sidebar-foreground: 240 5.3% 26.1%;
  --sidebar-primary: 240 5.9% 10%;
  --sidebar-primary-foreground: 0 0% 98%;
  --sidebar-accent: 240 4.8% 95.9%;
  --sidebar-accent-foreground: 240 5.9% 10%;
  --sidebar-border: 220 13% 91%;
  --sidebar-ring: 217.2 91.2% 59.8%;
}

.dark {
  --background: 0 0% 3.9%;
  --foreground: 0 0% 98%;
  --card: 0 0% 3.9%;
  --card-foreground: 0 0% 98%;
  --popover: 0 0% 3.9%;
  --popover-foreground: 0 0% 98%;
  --primary: 0 0% 98%;
  --primary-foreground: 0 0% 9%;
  --secondary: 0 0% 14.9%;
  --secondary-foreground: 0 0% 98%;
  --muted: 0 0% 14.9%;
  --muted-foreground: 0 0% 63.9%;
  --accent: 0 0% 14.9%;
  --accent-foreground: 0 0% 98%;
  --destructive: 0 62.8% 30.6%;
  --destructive-foreground: 0 0% 98%;
  --border: 0 0% 14.9%;
  --input: 0 0% 14.9%;
  --ring: 0 0% 83.1%;
  --chart-1: 220 70% 50%;
  --chart-2: 160 60% 45%;
  --chart-3: 30 80% 55%;
  --chart-4: 280 65% 60%;
  --chart-5: 340 75% 55%;
  --sidebar-background: 240 5.9% 10%;
  --sidebar-foreground: 240 4.8% 95.9%;
  --sidebar-primary: 224.3 76.3% 48%;
  --sidebar-primary-foreground: 0 0% 100%;
  --sidebar-accent: 240 3.7% 15.9%;
  --sidebar-accent-foreground: 240 4.8% 95.9%;
  --sidebar-border: 240 3.7% 15.9%;
  --sidebar-ring: 217.2 91.2% 59.8%;
}

body {
  font-family: var(--font-jetbrains-mono);
}

@layer utilities {
  .text-balance {
    text-wrap: balance;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
  :root {
    --sidebar-background: 0 0% 98%;
    --sidebar-foreground: 240 5.3% 26.1%;
    --sidebar-primary: 240 5.9% 10%;
    --sidebar-primary-foreground: 0 0% 98%;
    --sidebar-accent: 240 4.8% 95.9%;
    --sidebar-accent-foreground: 240 5.9% 10%;
    --sidebar-border: 220 13% 91%;
    --sidebar-ring: 217.2 91.2% 59.8%;
  }
  .dark {
    --sidebar-background: 240 5.9% 10%;
    --sidebar-foreground: 240 4.8% 95.9%;
    --sidebar-primary: 224.3 76.3% 48%;
    --sidebar-primary-foreground: 0 0% 100%;
    --sidebar-accent: 240 3.7% 15.9%;
    --sidebar-accent-foreground: 240 4.8% 95.9%;
    --sidebar-border: 240 3.7% 15.9%;
    --sidebar-ring: 217.2 91.2% 59.8%;
  }
}

</code>

app\layout.tsx:
<code>
import type React from "react"
import type { Metadata } from "next"
import { JetBrains_Mono } from "next/font/google"
import "./globals.css"
import { ThemeProvider } from "@/components/theme-provider"
import { AuthProvider } from "@/components/auth-provider"
import { NavigationErrorBoundary } from "@/components/navigation-error-boundary"

const jetbrainsMono = JetBrains_Mono({
  subsets: ["latin"],
  variable: "--font-jetbrains-mono",
})

export const metadata: Metadata = {
  title: "NeatRepo - Your Personal Repository Assistant",
  description:
    "Clean up and organize your GitHub repositories before applying for jobs. Reorganize structure, bulk delete, drag & drop, and prep your repos like a pro.",
  generator: 'v0.dev',
  icons: {
    icon: "/icon.png",
  },
}

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en" suppressHydrationWarning>
      <body className={`${jetbrainsMono.variable} font-mono`}>
        <ThemeProvider attribute="class" defaultTheme="dark" enableSystem disableTransitionOnChange>
          <NavigationErrorBoundary>
            <AuthProvider>
              {children}
            </AuthProvider>
          </NavigationErrorBoundary>
        </ThemeProvider>
      </body>
    </html>
  )
}

</code>

app\loading.tsx:
<code>
export default function Loading() {
  return null
}

</code>

app\page.tsx:
<code>
"use client"

import { useState, useEffect, useCallback, Suspense } from "react"
import { useSearchParams } from "next/navigation"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Alert, AlertDescription } from "@/components/ui/alert"
import { ThemeToggle } from "@/components/theme-toggle"
import GitHubAuth from "@/components/github-auth"
import { useAuth } from "@/components/auth-provider"
import GitHubConnectPopup from "@/components/github-connect-popup"
import { supabase } from "@/lib/supabase"
import { 
  Github,
  Star, 
  TrendingUp, 
  Zap, 
  Shield, 
  FileText, 
  GitBranch, 
  CheckCircle, 
  ArrowRight, 
  AlertCircle, 
  X, 
  RefreshCw, 
  LogOut 
} from "lucide-react"
import Image from "next/image"
import { useTheme } from "next-themes"

// Theme-aware logo component
function ThemeAwareLogo() {
  const { theme, resolvedTheme } = useTheme()
  const currentTheme = resolvedTheme || theme
  
  return (
    <Image 
      src={currentTheme === 'dark' ? '/logo-dark.png' : '/logo-light.png'} 
      alt="NeatRepo Logo" 
      width={32} 
      height={32} 
      className="h-8 w-8" 
    />
  )
}

// Separate component for search params logic to avoid hydration issues
function SearchParamsHandler({ onError }: { onError: (error: string) => void }) {
  const searchParams = useSearchParams()

  useEffect(() => {
    const oauthError = searchParams.get("oauth_error")
    if (oauthError) {
      onError(`OAuth Error: ${decodeURIComponent(oauthError)}`)
      console.error("OAuth Error from URL:", oauthError)
    }
  }, [searchParams, onError])

  return null
}

// Separate component to handle auth state
function AuthGuard({ children }: { children: React.ReactNode }) {
  const { user, loading, profile } = useAuth()
  const [showGitHubPopup, setShowGitHubPopup] = useState(false)

  // DISABLED: Auto-redirect interferes with button navigation
  // Let users manually click "Continue to Dashboard" button instead
  // Handle GitHub connection requirement and dashboard redirect
  // useEffect(() => {
  //   if (user && !loading) {
  //     // If profile is loaded, check GitHub connection
  //     if (profile) {
  //       const hasGitHubConnection = profile.github_username || user.app_metadata?.provider === 'github'

  //       if (hasGitHubConnection) {
  //         // User has GitHub connection, redirect to dashboard
  //         setIsRedirecting(true)
  //         const timer = setTimeout(() => {
  //           window.location.href = '/dashboard'
  //         }, 100)
  //         return () => clearTimeout(timer)
  //       } else {
  //         // User doesn't have GitHub connection, show popup instead of auto-redirect
  //         console.log('⚠️ AUTH: User not connected to GitHub, showing connect popup...')
  //         setShowGitHubPopup(true)
  //       }
  //     }
  //     // If profile is not loaded yet, wait for it
  //   }
  // }, [user, loading, profile])

  const handleSkipGitHub = () => {
    setShowGitHubPopup(false)
    // User must manually navigate to dashboard
    console.log('🔄 USER: Skipped GitHub connection - manual navigation required')
  }

  // Show loading state while auth is loading
  if (loading) {
    return (
      <div className="min-h-screen bg-background flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4"></div>
          <p className="text-muted-foreground">Loading...</p>
        </div>
      </div>
    )
  }

  // Show GitHub connect popup if needed
  if (showGitHubPopup) {
    return (
      <>
        <GitHubConnectPopup 
          onClose={() => setShowGitHubPopup(false)}
          onSkip={handleSkipGitHub}
          userEmail={user?.email}
        />
        {children}
      </>
    )
  }

  // Only render children if user is not authenticated and not loading
  return <>{children}</>
}

function HomePageContent({ handleError }: { handleError: (error: string) => void }) {
  const { user, loading, signOut } = useAuth()
  const [showGitHubAuth, setShowGitHubAuth] = useState(false)
  const [debugInfo, setDebugInfo] = useState<any>(null)
  const [isLoading, setIsLoading] = useState(false)

  // Debug authentication state
  useEffect(() => {
    console.log('🔍 Homepage auth state:', { user: !!user, loading, userId: user?.id })
  }, [user, loading])

  // Handle auth success redirect
  useEffect(() => {
    const urlParams = new URLSearchParams(window.location.search)
    const authSuccess = urlParams.get('auth')

    if (authSuccess === 'success' && user && !loading) {
      console.log('🎯 Auth success detected, redirecting to dashboard...')
      // Clear the auth parameter from URL
      window.history.replaceState({}, '', window.location.pathname)
      // Redirect to dashboard
      setTimeout(() => {
        window.location.href = '/dashboard'
      }, 1000) // Give time for session to fully establish
    }
  }, [user, loading])

  // Handle logout with proper cleanup (local only, no GitHub redirect)
  const handleLogout = async () => {
    try {
      setIsLoading(true)

      // Clear all localStorage data
      if (typeof window !== 'undefined') {
        localStorage.clear()
        sessionStorage.clear()
      }

      // Sign out from Supabase with global scope to revoke OAuth tokens
      await supabase.auth.signOut({ scope: 'global' })

      // Force page reload to ensure clean state
      window.location.reload()
    } catch (error) {
      console.error('Logout error:', error)
      handleError('Failed to log out. Please try again.')
    } finally {
      setIsLoading(false)
    }
  }

  const initializeDebugInfo = useCallback(() => {
    if (typeof window !== "undefined") {
      return {
        currentUrl: window.location.href,
        origin: window.location.origin,
        clientId: process.env.NEXT_PUBLIC_GITHUB_CLIENT_ID,
        userAgent: navigator.userAgent,
        timestamp: new Date().toISOString(),
      }
    }
    return null
  }, [])

  useEffect(() => {
    if (!debugInfo) {
      setDebugInfo(initializeDebugInfo())
    }
  }, [debugInfo, initializeDebugInfo])

  return (
    <div className="min-h-screen bg-background text-foreground">

      {/* GitHub Auth Modal */}
      {showGitHubAuth && (
        <GitHubAuth onClose={() => setShowGitHubAuth(false)} />
      )}

      {/* Navigation */}
      <nav className="container mx-auto px-4 py-6">
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-2">
            <ThemeAwareLogo />
            <span className="text-xl font-bold">NeatRepo</span>
            <Badge variant="secondary" className="bg-secondary text-secondary-foreground">
              Production Ready
            </Badge>
          </div>
          <div className="flex items-center space-x-4">
            <a href="#features" className="text-muted-foreground hover:text-foreground transition-colors">
              Features
            </a>
            <a href="#demo" className="text-muted-foreground hover:text-foreground transition-colors">
              Demo
            </a>
            <ThemeToggle />
            <div className="flex items-center space-x-2">
              {loading ? (
                // Show loading state
                <Button disabled className="bg-primary/50 text-primary-foreground">
                  <RefreshCw className="h-4 w-4 mr-2 animate-spin" />
                  Loading...
                </Button>
              ) : user ? (
                // Show dashboard and logout buttons when user is authenticated
                <>
                  <Button
                    onClick={() => {
                      console.log('🎯 BUTTON: Continue to Dashboard clicked');
                      // Force immediate navigation
                      window.location.href = '/dashboard';
                    }}
                    className="bg-primary hover:bg-primary/90 text-primary-foreground"
                  >
                    <ArrowRight className="h-4 w-4 mr-2" />
                    Continue to Dashboard
                  </Button>
                  <Button
                    onClick={handleLogout}
                    disabled={isLoading}
                    variant="outline"
                    className="border-destructive text-destructive hover:bg-destructive hover:text-destructive-foreground"
                  >
                    {isLoading ? (
                      <RefreshCw className="h-4 w-4 mr-2 animate-spin" />
                    ) : (
                      <LogOut className="h-4 w-4 mr-2" />
                    )}
                    {isLoading ? 'Signing out...' : 'Sign Out'}
                  </Button>
                </>
              ) : (
                // Show GitHub auth button when user is not authenticated
                <Button
                  onClick={() => setShowGitHubAuth(true)}
                  className="bg-primary hover:bg-primary/90 text-primary-foreground"
                >
                  <Github className="h-4 w-4 mr-2" />
                  Continue with GitHub
                </Button>
              )}
            </div>
          </div>
        </div>
      </nav>

      {/* Hero Section */}
      <section className="container mx-auto px-4 py-20 text-center">
        <div className="max-w-4xl mx-auto">
          <div className="mb-8">
            <Github className="h-16 w-16 mx-auto mb-6" />
          </div>

          <h1 className="text-5xl md:text-7xl font-bold mb-6">Professional GitHub Repository Management</h1>

          <p className="text-xl md:text-2xl text-muted-foreground mb-4">
            Organize, create, rename, and delete repositories with lightning-fast bulk operations
          </p>

          <p className="text-lg text-muted-foreground mb-12">We're here to help.</p>

          <div className="flex flex-col sm:flex-row gap-4 justify-center mb-12">
            <Button
              size="lg"
              onClick={loading ? undefined : (user ? () => {
                console.log('🎯 BUTTON: Go to Dashboard clicked');
                window.location.href = '/dashboard';
              } : () => setShowGitHubAuth(true))}
              disabled={loading}
              className="bg-primary hover:bg-primary/90 text-primary-foreground px-8 py-4 text-lg font-semibold"
            >
              {loading ? (
                <>
                  <RefreshCw className="h-5 w-5 mr-2 animate-spin" />
                  Loading...
                </>
              ) : user ? (
                <>
                  <ArrowRight className="h-5 w-5 mr-2" />
                  Go to Dashboard
                </>
              ) : (
                <>
                  <Github className="h-5 w-5 mr-2" />
                  Get Started
                </>
              )}
            </Button>
            <Button size="lg" variant="outline" className="px-8 py-4 text-lg bg-transparent">
              Watch Demo
              <ArrowRight className="h-5 w-5 ml-2" />
            </Button>
          </div>



          {/* Social Proof */}
          <div className="grid grid-cols-1 md:grid-cols-3 gap-8 max-w-2xl mx-auto">
            <div className="text-center">
              <div className="text-2xl font-bold">1,247</div>
              <div className="text-muted-foreground">developers hired</div>
            </div>
            <div className="text-center">
              <div className="text-2xl font-bold">5,000+</div>
              <div className="text-muted-foreground">repos cleaned</div>
            </div>
            <div className="text-center">
              <div className="text-2xl font-bold">94%</div>
              <div className="text-muted-foreground">job success rate</div>
            </div>
          </div>
        </div>
      </section>

      {/* Features Section */}
      <section id="features" className="container mx-auto px-4 py-20 bg-accent/20">
        <div className="text-center mb-16">
          <h2 className="text-4xl font-bold mb-4">Features GitHub doesn't offer</h2>
          <p className="text-xl text-muted-foreground max-w-2xl mx-auto">
            Professional repository management tools for developers who care about organization
          </p>
        </div>

        <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-8">
          <Card>
            <CardHeader>
              <Zap className="h-8 w-8 mb-2" />
              <CardTitle>Lightning-Fast Bulk Operations</CardTitle>
              <CardDescription>
                Delete multiple repositories at once - a feature GitHub doesn't offer natively
              </CardDescription>
            </CardHeader>
          </Card>

          <Card>
            <CardHeader>
              <FileText className="h-8 w-8 mb-2" />
              <CardTitle>Smart README Generation</CardTitle>
              <CardDescription>
                Automatically generate professional README files that showcase your projects effectively
              </CardDescription>
            </CardHeader>
          </Card>

          <Card>
            <CardHeader>
              <GitBranch className="h-8 w-8 mb-2" />
              <CardTitle>Visual Repository Organization</CardTitle>
              <CardDescription>
                Drag & drop reordering and professional presentation - GitHub only has alphabetical sorting
              </CardDescription>
            </CardHeader>
          </Card>

          <Card>
            <CardHeader>
              <Shield className="h-8 w-8 mb-2" />
              <CardTitle>Security Scanning</CardTitle>
              <CardDescription>Identify and fix security vulnerabilities before they become a problem</CardDescription>
            </CardHeader>
          </Card>

          <Card>
            <CardHeader>
              <TrendingUp className="h-8 w-8 mb-2" />
              <CardTitle>Portfolio Scoring</CardTitle>
              <CardDescription>
                Get a comprehensive score for each repository and track your improvement over time
              </CardDescription>
            </CardHeader>
          </Card>

          <Card>
            <CardHeader>
              <CheckCircle className="h-8 w-8 mb-2" />
              <CardTitle>Complete Repository Management</CardTitle>
              <CardDescription>
                Create, rename, and manage repositories without switching to GitHub - all in one place
              </CardDescription>
            </CardHeader>
          </Card>
        </div>
      </section>

      {/* Testimonials */}
      <section className="container mx-auto px-4 py-20">
        <div className="text-center mb-16">
          <h2 className="text-4xl font-bold mb-4">Loved by developers worldwide</h2>
          <p className="text-xl text-muted-foreground">See what our users have to say</p>
        </div>

        <div className="grid md:grid-cols-3 gap-8">
          <Card>
            <CardContent className="p-6">
              <div className="flex items-center mb-4">
                <div className="flex text-yellow-500">
                  {[...Array(5)].map((_, i) => (
                    <Star key={i} className="h-4 w-4 fill-current" />
                  ))}
                </div>
              </div>
              <p className="text-muted-foreground mb-4">
                "NeatRepo helped me organize my GitHub perfectly! The bulk operations saved me hours of work."
              </p>
              <div className="flex items-center">
                <div className="w-10 h-10 bg-primary rounded-full flex items-center justify-center text-primary-foreground font-semibold">
                  S
                </div>
                <div className="ml-3">
                  <div className="font-semibold">Sarah Chen</div>
                  <div className="text-sm text-muted-foreground">Frontend Developer</div>
                </div>
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardContent className="p-6">
              <div className="flex items-center mb-4">
                <div className="flex text-yellow-500">
                  {[...Array(5)].map((_, i) => (
                    <Star key={i} className="h-4 w-4 fill-current" />
                  ))}
                </div>
              </div>
              <p className="text-muted-foreground mb-4">
                "Finally! Bulk delete saved me hours of cleaning up old repositories. NeatRepo is a game-changer!"
              </p>
              <div className="flex items-center">
                <div className="w-10 h-10 bg-primary rounded-full flex items-center justify-center text-primary-foreground font-semibold">
                  M
                </div>
                <div className="ml-3">
                  <div className="font-semibold">Marcus Johnson</div>
                  <div className="text-sm text-muted-foreground">Full Stack Developer</div>
                </div>
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardContent className="p-6">
              <div className="flex items-center mb-4">
                <div className="flex text-yellow-500">
                  {[...Array(5)].map((_, i) => (
                    <Star key={i} className="h-4 w-4 fill-current" />
                  ))}
                </div>
              </div>
              <p className="text-muted-foreground mb-4">
                "The drag & drop organization is so intuitive. My GitHub looks professional now!"
              </p>
              <div className="flex items-center">
                <div className="w-10 h-10 bg-primary rounded-full flex items-center justify-center text-primary-foreground font-semibold">
                  A
                </div>
                <div className="ml-3">
                  <div className="font-semibold">Alex Rivera</div>
                  <div className="text-sm text-muted-foreground">Backend Developer</div>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>
      </section>

      {/* Final CTA */}
      <section className="container mx-auto px-4 py-20 bg-accent/20">
        <div className="text-center max-w-3xl mx-auto">
          <h2 className="text-4xl font-bold mb-6">Ready to organize your repositories?</h2>
          <p className="text-xl text-muted-foreground mb-8">
            Join developers who use NeatRepo for professional GitHub repository management
          </p>
          <Button
            size="lg"
            onClick={() => setShowGitHubAuth(true)}
            className="bg-primary hover:bg-primary/90 text-primary-foreground px-12 py-4 text-xl font-semibold"
          >
            <Github className="h-6 w-6 mr-3" />
            Start Free Today
          </Button>
        </div>
      </section>

      {/* Search Params Handler */}
      <Suspense fallback={null}>
        <SearchParamsHandler onError={handleError} />
      </Suspense>

      {/* Footer */}
      <footer className="border-t border-border bg-card">
        <div className="container mx-auto px-4 py-12">
          <div className="grid md:grid-cols-4 gap-8">
            <div>
              <div className="flex items-center space-x-2 mb-4">
                <Github className="h-6 w-6" />
                <span className="text-lg font-bold">NeatRepo</span>
              </div>
              <p className="text-muted-foreground">
                Professional GitHub repository management with lightning-fast bulk operations.
              </p>
            </div>
            <div>
              <h3 className="font-semibold mb-4">Product</h3>
              <ul className="space-y-2 text-muted-foreground">
                <li>
                  <a href="#features" className="hover:text-foreground transition-colors">
                    Features
                  </a>
                </li>
                <li>
                  <a href="#demo" className="hover:text-foreground transition-colors">
                    Demo
                  </a>
                </li>
                <li>
                  <a href="#" className="hover:text-foreground transition-colors">
                    API
                  </a>
                </li>
                <li>
                  <a href="#" className="hover:text-foreground transition-colors">
                    Integrations
                  </a>
                </li>
              </ul>
            </div>
            <div>
              <h3 className="font-semibold mb-4">Company</h3>
              <ul className="space-y-2 text-muted-foreground">
                <li>
                  <a href="#" className="hover:text-foreground transition-colors">
                    About
                  </a>
                </li>
                <li>
                  <a href="#" className="hover:text-foreground transition-colors">
                    Blog
                  </a>
                </li>
                <li>
                  <a href="#" className="hover:text-foreground transition-colors">
                    Careers
                  </a>
                </li>
                <li>
                  <a href="#" className="hover:text-foreground transition-colors">
                    Contact
                  </a>
                </li>
              </ul>
            </div>
            <div>
              <h3 className="font-semibold mb-4">Support</h3>
              <ul className="space-y-2 text-muted-foreground">
                <li>
                  <a href="#" className="hover:text-foreground transition-colors">
                    Help Center
                  </a>
                </li>
                <li>
                  <a href="#" className="hover:text-foreground transition-colors">
                    Documentation
                  </a>
                </li>
                <li>
                  <a href="#" className="hover:text-foreground transition-colors">
                    Status
                  </a>
                </li>
                <li>
                  <a href="#" className="hover:text-foreground transition-colors">
                    Privacy
                  </a>
                </li>
              </ul>
            </div>
          </div>
          <div className="border-t border-border mt-8 pt-8 text-center text-muted-foreground">
            <p>&copy; 2025 NeatRepo. All rights reserved.</p>
          </div>
        </div>
      </footer>
    </div>
  )
}

function HomePageWrapper() {
  const [error, setError] = useState<string | null>(null)

  const handleError = useCallback((errorMessage: string) => {
    setError(errorMessage)
  }, [])

  return (
    <>
      <SearchParamsHandler onError={handleError} />
      {/* Error Alert */}
      {error && (
        <div className="fixed top-4 right-4 z-50 max-w-md">
          <Alert className="bg-destructive/20 border-destructive text-destructive">
            <AlertCircle className="h-4 w-4" />
            <AlertDescription className="pr-8">{error}</AlertDescription>
            <button
              onClick={() => setError(null)}
              className="absolute top-2 right-2 text-destructive hover:text-destructive/80"
            >
              <X className="h-4 w-4" />
            </button>
          </Alert>
        </div>
      )}
      <AuthGuard>
        <HomePageContent handleError={handleError} />
      </AuthGuard>
    </>
  )
}

export default function HomePage() {
  return (
    <Suspense fallback={
      <div className="min-h-screen bg-background flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4"></div>
          <p className="text-muted-foreground">Loading...</p>
        </div>
      </div>
    }>
      <HomePageWrapper />
    </Suspense>
  )
}

</code>

components\auth\auth-context.tsx:
<code>
"use client"

import { createContext, useContext } from "react";
import { User } from "@supabase/supabase-js";

// Define the shape of your user profile data
export interface UserProfile {
  id: string;
  github_pat_token?: string;
  github_username?: string;
  avatar_url?: string;
  [key: string]: any;
}

// Define the shape of the context that components will consume
export interface AuthContextType {
  user: User | null;
  profile: UserProfile | null;
  loading: boolean;
  signOut: () => Promise<void>;
  showTokenPopup: () => void;
  getEffectiveToken: () => Promise<string | null>;
  updateToken: (token: string) => Promise<void>;
  deleteToken: () => Promise<void>;
  isTokenInvalid: boolean;
  markTokenAsInvalid: () => void;
}

// Create the context with an undefined default value
export const AuthContext = createContext<AuthContextType | undefined>(undefined);

// Create the custom hook for consuming the context
export const useAuth = () => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error("useAuth must be used within an AuthProvider");
  }
  return context;
};
</code>

components\ui\accordion.tsx:
<code>
"use client"

import * as React from "react"
import * as AccordionPrimitive from "@radix-ui/react-accordion"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const Accordion = AccordionPrimitive.Root

const AccordionItem = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>
>(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item
    ref={ref}
    className={cn("border-b", className)}
    {...props}
  />
))
AccordionItem.displayName = "AccordionItem"

const AccordionTrigger = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Header className="flex">
    <AccordionPrimitive.Trigger
      ref={ref}
      className={cn(
        "flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180",
        className
      )}
      {...props}
    >
      {children}
      <ChevronDown className="h-4 w-4 shrink-0 transition-transform duration-200" />
    </AccordionPrimitive.Trigger>
  </AccordionPrimitive.Header>
))
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName

const AccordionContent = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className="overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down"
    {...props}
  >
    <div className={cn("pb-4 pt-0", className)}>{children}</div>
  </AccordionPrimitive.Content>
))

AccordionContent.displayName = AccordionPrimitive.Content.displayName

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent }

</code>

components\ui\alert-dialog.tsx:
<code>
"use client"

import * as React from "react"
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

const AlertDialog = AlertDialogPrimitive.Root

const AlertDialogTrigger = AlertDialogPrimitive.Trigger

const AlertDialogPortal = AlertDialogPrimitive.Portal

const AlertDialogOverlay = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName

const AlertDialogContent = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>
>(({ className, ...props }, ref) => (
  <AlertDialogPortal>
    <AlertDialogOverlay />
    <AlertDialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    />
  </AlertDialogPortal>
))
AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName

const AlertDialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
AlertDialogHeader.displayName = "AlertDialogHeader"

const AlertDialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
AlertDialogFooter.displayName = "AlertDialogFooter"

const AlertDialogTitle = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold", className)}
    {...props}
  />
))
AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName

const AlertDialogDescription = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
AlertDialogDescription.displayName =
  AlertDialogPrimitive.Description.displayName

const AlertDialogAction = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Action>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Action
    ref={ref}
    className={cn(buttonVariants(), className)}
    {...props}
  />
))
AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName

const AlertDialogCancel = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Cancel
    ref={ref}
    className={cn(
      buttonVariants({ variant: "outline" }),
      "mt-2 sm:mt-0",
      className
    )}
    {...props}
  />
))
AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}

</code>

components\ui\alert.tsx:
<code>
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const alertVariants = cva(
  "relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground",
  {
    variants: {
      variant: {
        default: "bg-background text-foreground",
        destructive:
          "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Alert = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>
>(({ className, variant, ...props }, ref) => (
  <div
    ref={ref}
    role="alert"
    className={cn(alertVariants({ variant }), className)}
    {...props}
  />
))
Alert.displayName = "Alert"

const AlertTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h5
    ref={ref}
    className={cn("mb-1 font-medium leading-none tracking-tight", className)}
    {...props}
  />
))
AlertTitle.displayName = "AlertTitle"

const AlertDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm [&_p]:leading-relaxed", className)}
    {...props}
  />
))
AlertDescription.displayName = "AlertDescription"

export { Alert, AlertTitle, AlertDescription }

</code>

components\ui\aspect-ratio.tsx:
<code>
"use client"

import * as AspectRatioPrimitive from "@radix-ui/react-aspect-ratio"

const AspectRatio = AspectRatioPrimitive.Root

export { AspectRatio }

</code>

components\ui\avatar.tsx:
<code>
"use client"

import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full",
      className
    )}
    {...props}
  />
))
Avatar.displayName = AvatarPrimitive.Root.displayName

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square h-full w-full", className)}
    {...props}
  />
))
AvatarImage.displayName = AvatarPrimitive.Image.displayName

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "flex h-full w-full items-center justify-center rounded-full bg-muted",
      className
    )}
    {...props}
  />
))
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName

export { Avatar, AvatarImage, AvatarFallback }

</code>

components\ui\badge.tsx:
<code>
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  )
}

export { Badge, badgeVariants }

</code>

components\ui\breadcrumb.tsx:
<code>
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"

const Breadcrumb = React.forwardRef<
  HTMLElement,
  React.ComponentPropsWithoutRef<"nav"> & {
    separator?: React.ReactNode
  }
>(({ ...props }, ref) => <nav ref={ref} aria-label="breadcrumb" {...props} />)
Breadcrumb.displayName = "Breadcrumb"

const BreadcrumbList = React.forwardRef<
  HTMLOListElement,
  React.ComponentPropsWithoutRef<"ol">
>(({ className, ...props }, ref) => (
  <ol
    ref={ref}
    className={cn(
      "flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5",
      className
    )}
    {...props}
  />
))
BreadcrumbList.displayName = "BreadcrumbList"

const BreadcrumbItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentPropsWithoutRef<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    className={cn("inline-flex items-center gap-1.5", className)}
    {...props}
  />
))
BreadcrumbItem.displayName = "BreadcrumbItem"

const BreadcrumbLink = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentPropsWithoutRef<"a"> & {
    asChild?: boolean
  }
>(({ asChild, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      className={cn("transition-colors hover:text-foreground", className)}
      {...props}
    />
  )
})
BreadcrumbLink.displayName = "BreadcrumbLink"

const BreadcrumbPage = React.forwardRef<
  HTMLSpanElement,
  React.ComponentPropsWithoutRef<"span">
>(({ className, ...props }, ref) => (
  <span
    ref={ref}
    role="link"
    aria-disabled="true"
    aria-current="page"
    className={cn("font-normal text-foreground", className)}
    {...props}
  />
))
BreadcrumbPage.displayName = "BreadcrumbPage"

const BreadcrumbSeparator = ({
  children,
  className,
  ...props
}: React.ComponentProps<"li">) => (
  <li
    role="presentation"
    aria-hidden="true"
    className={cn("[&>svg]:w-3.5 [&>svg]:h-3.5", className)}
    {...props}
  >
    {children ?? <ChevronRight />}
  </li>
)
BreadcrumbSeparator.displayName = "BreadcrumbSeparator"

const BreadcrumbEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    role="presentation"
    aria-hidden="true"
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More</span>
  </span>
)
BreadcrumbEllipsis.displayName = "BreadcrumbElipssis"

export {
  Breadcrumb,
  BreadcrumbList,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbPage,
  BreadcrumbSeparator,
  BreadcrumbEllipsis,
}

</code>

components\ui\button.tsx:
<code>
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }

</code>

components\ui\calendar.tsx:
<code>
"use client"

import * as React from "react"
import {
  ChevronDownIcon,
  ChevronLeftIcon,
  ChevronRightIcon,
} from "lucide-react"
import { DayButton, DayPicker, getDefaultClassNames } from "react-day-picker"

import { cn } from "@/lib/utils"
import { Button, buttonVariants } from "@/components/ui/button"

function Calendar({
  className,
  classNames,
  showOutsideDays = true,
  captionLayout = "label",
  buttonVariant = "ghost",
  formatters,
  components,
  ...props
}: React.ComponentProps<typeof DayPicker> & {
  buttonVariant?: React.ComponentProps<typeof Button>["variant"]
}) {
  const defaultClassNames = getDefaultClassNames()

  return (
    <DayPicker
      showOutsideDays={showOutsideDays}
      className={cn(
        "bg-background group/calendar p-3 [--cell-size:2rem] [[data-slot=card-content]_&]:bg-transparent [[data-slot=popover-content]_&]:bg-transparent",
        String.raw`rtl:**:[.rdp-button\_next>svg]:rotate-180`,
        String.raw`rtl:**:[.rdp-button\_previous>svg]:rotate-180`,
        className
      )}
      captionLayout={captionLayout}
      formatters={{
        formatMonthDropdown: (date) =>
          date.toLocaleString("default", { month: "short" }),
        ...formatters,
      }}
      classNames={{
        root: cn("w-fit", defaultClassNames.root),
        months: cn(
          "relative flex flex-col gap-4 md:flex-row",
          defaultClassNames.months
        ),
        month: cn("flex w-full flex-col gap-4", defaultClassNames.month),
        nav: cn(
          "absolute inset-x-0 top-0 flex w-full items-center justify-between gap-1",
          defaultClassNames.nav
        ),
        button_previous: cn(
          buttonVariants({ variant: buttonVariant }),
          "h-[--cell-size] w-[--cell-size] select-none p-0 aria-disabled:opacity-50",
          defaultClassNames.button_previous
        ),
        button_next: cn(
          buttonVariants({ variant: buttonVariant }),
          "h-[--cell-size] w-[--cell-size] select-none p-0 aria-disabled:opacity-50",
          defaultClassNames.button_next
        ),
        month_caption: cn(
          "flex h-[--cell-size] w-full items-center justify-center px-[--cell-size]",
          defaultClassNames.month_caption
        ),
        dropdowns: cn(
          "flex h-[--cell-size] w-full items-center justify-center gap-1.5 text-sm font-medium",
          defaultClassNames.dropdowns
        ),
        dropdown_root: cn(
          "has-focus:border-ring border-input shadow-xs has-focus:ring-ring/50 has-focus:ring-[3px] relative rounded-md border",
          defaultClassNames.dropdown_root
        ),
        dropdown: cn(
          "bg-popover absolute inset-0 opacity-0",
          defaultClassNames.dropdown
        ),
        caption_label: cn(
          "select-none font-medium",
          captionLayout === "label"
            ? "text-sm"
            : "[&>svg]:text-muted-foreground flex h-8 items-center gap-1 rounded-md pl-2 pr-1 text-sm [&>svg]:size-3.5",
          defaultClassNames.caption_label
        ),
        table: "w-full border-collapse",
        weekdays: cn("flex", defaultClassNames.weekdays),
        weekday: cn(
          "text-muted-foreground flex-1 select-none rounded-md text-[0.8rem] font-normal",
          defaultClassNames.weekday
        ),
        week: cn("mt-2 flex w-full", defaultClassNames.week),
        week_number_header: cn(
          "w-[--cell-size] select-none",
          defaultClassNames.week_number_header
        ),
        week_number: cn(
          "text-muted-foreground select-none text-[0.8rem]",
          defaultClassNames.week_number
        ),
        day: cn(
          "group/day relative aspect-square h-full w-full select-none p-0 text-center [&:first-child[data-selected=true]_button]:rounded-l-md [&:last-child[data-selected=true]_button]:rounded-r-md",
          defaultClassNames.day
        ),
        range_start: cn(
          "bg-accent rounded-l-md",
          defaultClassNames.range_start
        ),
        range_middle: cn("rounded-none", defaultClassNames.range_middle),
        range_end: cn("bg-accent rounded-r-md", defaultClassNames.range_end),
        today: cn(
          "bg-accent text-accent-foreground rounded-md data-[selected=true]:rounded-none",
          defaultClassNames.today
        ),
        outside: cn(
          "text-muted-foreground aria-selected:text-muted-foreground",
          defaultClassNames.outside
        ),
        disabled: cn(
          "text-muted-foreground opacity-50",
          defaultClassNames.disabled
        ),
        hidden: cn("invisible", defaultClassNames.hidden),
        ...classNames,
      }}
      components={{
        Root: ({ className, rootRef, ...props }) => {
          return (
            <div
              data-slot="calendar"
              ref={rootRef}
              className={cn(className)}
              {...props}
            />
          )
        },
        Chevron: ({ className, orientation, ...props }) => {
          if (orientation === "left") {
            return (
              <ChevronLeftIcon className={cn("size-4", className)} {...props} />
            )
          }

          if (orientation === "right") {
            return (
              <ChevronRightIcon
                className={cn("size-4", className)}
                {...props}
              />
            )
          }

          return (
            <ChevronDownIcon className={cn("size-4", className)} {...props} />
          )
        },
        DayButton: CalendarDayButton,
        WeekNumber: ({ children, ...props }) => {
          return (
            <td {...props}>
              <div className="flex size-[--cell-size] items-center justify-center text-center">
                {children}
              </div>
            </td>
          )
        },
        ...components,
      }}
      {...props}
    />
  )
}

function CalendarDayButton({
  className,
  day,
  modifiers,
  ...props
}: React.ComponentProps<typeof DayButton>) {
  const defaultClassNames = getDefaultClassNames()

  const ref = React.useRef<HTMLButtonElement>(null)
  React.useEffect(() => {
    if (modifiers.focused) ref.current?.focus()
  }, [modifiers.focused])

  return (
    <Button
      ref={ref}
      variant="ghost"
      size="icon"
      data-day={day.date.toLocaleDateString()}
      data-selected-single={
        modifiers.selected &&
        !modifiers.range_start &&
        !modifiers.range_end &&
        !modifiers.range_middle
      }
      data-range-start={modifiers.range_start}
      data-range-end={modifiers.range_end}
      data-range-middle={modifiers.range_middle}
      className={cn(
        "data-[selected-single=true]:bg-primary data-[selected-single=true]:text-primary-foreground data-[range-middle=true]:bg-accent data-[range-middle=true]:text-accent-foreground data-[range-start=true]:bg-primary data-[range-start=true]:text-primary-foreground data-[range-end=true]:bg-primary data-[range-end=true]:text-primary-foreground group-data-[focused=true]/day:border-ring group-data-[focused=true]/day:ring-ring/50 flex aspect-square h-auto w-full min-w-[--cell-size] flex-col gap-1 font-normal leading-none data-[range-end=true]:rounded-md data-[range-middle=true]:rounded-none data-[range-start=true]:rounded-md group-data-[focused=true]/day:relative group-data-[focused=true]/day:z-10 group-data-[focused=true]/day:ring-[3px] [&>span]:text-xs [&>span]:opacity-70",
        defaultClassNames.day,
        className
      )}
      {...props}
    />
  )
}

export { Calendar, CalendarDayButton }

</code>

components\ui\card.tsx:
<code>
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border bg-card text-card-foreground shadow-sm",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }

</code>

components\ui\carousel.tsx:
<code>
"use client"

import * as React from "react"
import useEmblaCarousel, {
  type UseEmblaCarouselType,
} from "embla-carousel-react"
import { ArrowLeft, ArrowRight } from "lucide-react"

import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"

type CarouselApi = UseEmblaCarouselType[1]
type UseCarouselParameters = Parameters<typeof useEmblaCarousel>
type CarouselOptions = UseCarouselParameters[0]
type CarouselPlugin = UseCarouselParameters[1]

type CarouselProps = {
  opts?: CarouselOptions
  plugins?: CarouselPlugin
  orientation?: "horizontal" | "vertical"
  setApi?: (api: CarouselApi) => void
}

type CarouselContextProps = {
  carouselRef: ReturnType<typeof useEmblaCarousel>[0]
  api: ReturnType<typeof useEmblaCarousel>[1]
  scrollPrev: () => void
  scrollNext: () => void
  canScrollPrev: boolean
  canScrollNext: boolean
} & CarouselProps

const CarouselContext = React.createContext<CarouselContextProps | null>(null)

function useCarousel() {
  const context = React.useContext(CarouselContext)

  if (!context) {
    throw new Error("useCarousel must be used within a <Carousel />")
  }

  return context
}

const Carousel = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & CarouselProps
>(
  (
    {
      orientation = "horizontal",
      opts,
      setApi,
      plugins,
      className,
      children,
      ...props
    },
    ref
  ) => {
    const [carouselRef, api] = useEmblaCarousel(
      {
        ...opts,
        axis: orientation === "horizontal" ? "x" : "y",
      },
      plugins
    )
    const [canScrollPrev, setCanScrollPrev] = React.useState(false)
    const [canScrollNext, setCanScrollNext] = React.useState(false)

    const onSelect = React.useCallback((api: CarouselApi) => {
      if (!api) {
        return
      }

      setCanScrollPrev(api.canScrollPrev())
      setCanScrollNext(api.canScrollNext())
    }, [])

    const scrollPrev = React.useCallback(() => {
      api?.scrollPrev()
    }, [api])

    const scrollNext = React.useCallback(() => {
      api?.scrollNext()
    }, [api])

    const handleKeyDown = React.useCallback(
      (event: React.KeyboardEvent<HTMLDivElement>) => {
        if (event.key === "ArrowLeft") {
          event.preventDefault()
          scrollPrev()
        } else if (event.key === "ArrowRight") {
          event.preventDefault()
          scrollNext()
        }
      },
      [scrollPrev, scrollNext]
    )

    React.useEffect(() => {
      if (!api || !setApi) {
        return
      }

      setApi(api)
    }, [api, setApi])

    React.useEffect(() => {
      if (!api) {
        return
      }

      onSelect(api)
      api.on("reInit", onSelect)
      api.on("select", onSelect)

      return () => {
        api?.off("select", onSelect)
      }
    }, [api, onSelect])

    return (
      <CarouselContext.Provider
        value={{
          carouselRef,
          api: api,
          opts,
          orientation:
            orientation || (opts?.axis === "y" ? "vertical" : "horizontal"),
          scrollPrev,
          scrollNext,
          canScrollPrev,
          canScrollNext,
        }}
      >
        <div
          ref={ref}
          onKeyDownCapture={handleKeyDown}
          className={cn("relative", className)}
          role="region"
          aria-roledescription="carousel"
          {...props}
        >
          {children}
        </div>
      </CarouselContext.Provider>
    )
  }
)
Carousel.displayName = "Carousel"

const CarouselContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { carouselRef, orientation } = useCarousel()

  return (
    <div ref={carouselRef} className="overflow-hidden">
      <div
        ref={ref}
        className={cn(
          "flex",
          orientation === "horizontal" ? "-ml-4" : "-mt-4 flex-col",
          className
        )}
        {...props}
      />
    </div>
  )
})
CarouselContent.displayName = "CarouselContent"

const CarouselItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { orientation } = useCarousel()

  return (
    <div
      ref={ref}
      role="group"
      aria-roledescription="slide"
      className={cn(
        "min-w-0 shrink-0 grow-0 basis-full",
        orientation === "horizontal" ? "pl-4" : "pt-4",
        className
      )}
      {...props}
    />
  )
})
CarouselItem.displayName = "CarouselItem"

const CarouselPrevious = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollPrev, canScrollPrev } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute  h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-left-12 top-1/2 -translate-y-1/2"
          : "-top-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollPrev}
      onClick={scrollPrev}
      {...props}
    >
      <ArrowLeft className="h-4 w-4" />
      <span className="sr-only">Previous slide</span>
    </Button>
  )
})
CarouselPrevious.displayName = "CarouselPrevious"

const CarouselNext = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollNext, canScrollNext } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-right-12 top-1/2 -translate-y-1/2"
          : "-bottom-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollNext}
      onClick={scrollNext}
      {...props}
    >
      <ArrowRight className="h-4 w-4" />
      <span className="sr-only">Next slide</span>
    </Button>
  )
})
CarouselNext.displayName = "CarouselNext"

export {
  type CarouselApi,
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselPrevious,
  CarouselNext,
}

</code>

components\ui\chart.tsx:
<code>
"use client"

import * as React from "react"
import * as RechartsPrimitive from "recharts"

import { cn } from "@/lib/utils"

// Format: { THEME_NAME: CSS_SELECTOR }
const THEMES = { light: "", dark: ".dark" } as const

export type ChartConfig = {
  [k in string]: {
    label?: React.ReactNode
    icon?: React.ComponentType
  } & (
    | { color?: string; theme?: never }
    | { color?: never; theme: Record<keyof typeof THEMES, string> }
  )
}

type ChartContextProps = {
  config: ChartConfig
}

const ChartContext = React.createContext<ChartContextProps | null>(null)

function useChart() {
  const context = React.useContext(ChartContext)

  if (!context) {
    throw new Error("useChart must be used within a <ChartContainer />")
  }

  return context
}

const ChartContainer = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    config: ChartConfig
    children: React.ComponentProps<
      typeof RechartsPrimitive.ResponsiveContainer
    >["children"]
  }
>(({ id, className, children, config, ...props }, ref) => {
  const uniqueId = React.useId()
  const chartId = `chart-${id || uniqueId.replace(/:/g, "")}`

  return (
    <ChartContext.Provider value={{ config }}>
      <div
        data-chart={chartId}
        ref={ref}
        className={cn(
          "flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none",
          className
        )}
        {...props}
      >
        <ChartStyle id={chartId} config={config} />
        <RechartsPrimitive.ResponsiveContainer>
          {children}
        </RechartsPrimitive.ResponsiveContainer>
      </div>
    </ChartContext.Provider>
  )
})
ChartContainer.displayName = "Chart"

const ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {
  const colorConfig = Object.entries(config).filter(
    ([, config]) => config.theme || config.color
  )

  if (!colorConfig.length) {
    return null
  }

  return (
    <style
      dangerouslySetInnerHTML={{
        __html: Object.entries(THEMES)
          .map(
            ([theme, prefix]) => `
${prefix} [data-chart=${id}] {
${colorConfig
  .map(([key, itemConfig]) => {
    const color =
      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||
      itemConfig.color
    return color ? `  --color-${key}: ${color};` : null
  })
  .join("\n")}
}
`
          )
          .join("\n"),
      }}
    />
  )
}

const ChartTooltip = RechartsPrimitive.Tooltip

const ChartTooltipContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &
    React.ComponentProps<"div"> & {
      hideLabel?: boolean
      hideIndicator?: boolean
      indicator?: "line" | "dot" | "dashed"
      nameKey?: string
      labelKey?: string
    }
>(
  (
    {
      active,
      payload,
      className,
      indicator = "dot",
      hideLabel = false,
      hideIndicator = false,
      label,
      labelFormatter,
      labelClassName,
      formatter,
      color,
      nameKey,
      labelKey,
    },
    ref
  ) => {
    const { config } = useChart()

    const tooltipLabel = React.useMemo(() => {
      if (hideLabel || !payload?.length) {
        return null
      }

      const [item] = payload
      const key = `${labelKey || item?.dataKey || item?.name || "value"}`
      const itemConfig = getPayloadConfigFromPayload(config, item, key)
      const value =
        !labelKey && typeof label === "string"
          ? config[label as keyof typeof config]?.label || label
          : itemConfig?.label

      if (labelFormatter) {
        return (
          <div className={cn("font-medium", labelClassName)}>
            {labelFormatter(value, payload)}
          </div>
        )
      }

      if (!value) {
        return null
      }

      return <div className={cn("font-medium", labelClassName)}>{value}</div>
    }, [
      label,
      labelFormatter,
      payload,
      hideLabel,
      labelClassName,
      config,
      labelKey,
    ])

    if (!active || !payload?.length) {
      return null
    }

    const nestLabel = payload.length === 1 && indicator !== "dot"

    return (
      <div
        ref={ref}
        className={cn(
          "grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl",
          className
        )}
      >
        {!nestLabel ? tooltipLabel : null}
        <div className="grid gap-1.5">
          {payload.map((item, index) => {
            const key = `${nameKey || item.name || item.dataKey || "value"}`
            const itemConfig = getPayloadConfigFromPayload(config, item, key)
            const indicatorColor = color || item.payload.fill || item.color

            return (
              <div
                key={item.dataKey}
                className={cn(
                  "flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground",
                  indicator === "dot" && "items-center"
                )}
              >
                {formatter && item?.value !== undefined && item.name ? (
                  formatter(item.value, item.name, item, index, item.payload)
                ) : (
                  <>
                    {itemConfig?.icon ? (
                      <itemConfig.icon />
                    ) : (
                      !hideIndicator && (
                        <div
                          className={cn(
                            "shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]",
                            {
                              "h-2.5 w-2.5": indicator === "dot",
                              "w-1": indicator === "line",
                              "w-0 border-[1.5px] border-dashed bg-transparent":
                                indicator === "dashed",
                              "my-0.5": nestLabel && indicator === "dashed",
                            }
                          )}
                          style={
                            {
                              "--color-bg": indicatorColor,
                              "--color-border": indicatorColor,
                            } as React.CSSProperties
                          }
                        />
                      )
                    )}
                    <div
                      className={cn(
                        "flex flex-1 justify-between leading-none",
                        nestLabel ? "items-end" : "items-center"
                      )}
                    >
                      <div className="grid gap-1.5">
                        {nestLabel ? tooltipLabel : null}
                        <span className="text-muted-foreground">
                          {itemConfig?.label || item.name}
                        </span>
                      </div>
                      {item.value && (
                        <span className="font-mono font-medium tabular-nums text-foreground">
                          {item.value.toLocaleString()}
                        </span>
                      )}
                    </div>
                  </>
                )}
              </div>
            )
          })}
        </div>
      </div>
    )
  }
)
ChartTooltipContent.displayName = "ChartTooltip"

const ChartLegend = RechartsPrimitive.Legend

const ChartLegendContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> &
    Pick<RechartsPrimitive.LegendProps, "payload" | "verticalAlign"> & {
      hideIcon?: boolean
      nameKey?: string
    }
>(
  (
    { className, hideIcon = false, payload, verticalAlign = "bottom", nameKey },
    ref
  ) => {
    const { config } = useChart()

    if (!payload?.length) {
      return null
    }

    return (
      <div
        ref={ref}
        className={cn(
          "flex items-center justify-center gap-4",
          verticalAlign === "top" ? "pb-3" : "pt-3",
          className
        )}
      >
        {payload.map((item) => {
          const key = `${nameKey || item.dataKey || "value"}`
          const itemConfig = getPayloadConfigFromPayload(config, item, key)

          return (
            <div
              key={item.value}
              className={cn(
                "flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground"
              )}
            >
              {itemConfig?.icon && !hideIcon ? (
                <itemConfig.icon />
              ) : (
                <div
                  className="h-2 w-2 shrink-0 rounded-[2px]"
                  style={{
                    backgroundColor: item.color,
                  }}
                />
              )}
              {itemConfig?.label}
            </div>
          )
        })}
      </div>
    )
  }
)
ChartLegendContent.displayName = "ChartLegend"

// Helper to extract item config from a payload.
function getPayloadConfigFromPayload(
  config: ChartConfig,
  payload: unknown,
  key: string
) {
  if (typeof payload !== "object" || payload === null) {
    return undefined
  }

  const payloadPayload =
    "payload" in payload &&
    typeof payload.payload === "object" &&
    payload.payload !== null
      ? payload.payload
      : undefined

  let configLabelKey: string = key

  if (
    key in payload &&
    typeof payload[key as keyof typeof payload] === "string"
  ) {
    configLabelKey = payload[key as keyof typeof payload] as string
  } else if (
    payloadPayload &&
    key in payloadPayload &&
    typeof payloadPayload[key as keyof typeof payloadPayload] === "string"
  ) {
    configLabelKey = payloadPayload[
      key as keyof typeof payloadPayload
    ] as string
  }

  return configLabelKey in config
    ? config[configLabelKey]
    : config[key as keyof typeof config]
}

export {
  ChartContainer,
  ChartTooltip,
  ChartTooltipContent,
  ChartLegend,
  ChartLegendContent,
  ChartStyle,
}

</code>

components\ui\checkbox.tsx:
<code>
"use client"

import * as React from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { Check } from "lucide-react"

import { cn } from "@/lib/utils"

const Checkbox = React.forwardRef<
  React.ElementRef<typeof CheckboxPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>
>(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      "peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",
      className
    )}
    {...props}
  >
    <CheckboxPrimitive.Indicator
      className={cn("flex items-center justify-center text-current")}
    >
      <Check className="h-4 w-4" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
))
Checkbox.displayName = CheckboxPrimitive.Root.displayName

export { Checkbox }

</code>

components\ui\collapsible.tsx:
<code>
"use client"

import * as CollapsiblePrimitive from "@radix-ui/react-collapsible"

const Collapsible = CollapsiblePrimitive.Root

const CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger

const CollapsibleContent = CollapsiblePrimitive.CollapsibleContent

export { Collapsible, CollapsibleTrigger, CollapsibleContent }

</code>

components\ui\command.tsx:
<code>
"use client"

import * as React from "react"
import { type DialogProps } from "@radix-ui/react-dialog"
import { Command as CommandPrimitive } from "cmdk"
import { Search } from "lucide-react"

import { cn } from "@/lib/utils"
import { Dialog, DialogContent } from "@/components/ui/dialog"

const Command = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive>
>(({ className, ...props }, ref) => (
  <CommandPrimitive
    ref={ref}
    className={cn(
      "flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground",
      className
    )}
    {...props}
  />
))
Command.displayName = CommandPrimitive.displayName

const CommandDialog = ({ children, ...props }: DialogProps) => {
  return (
    <Dialog {...props}>
      <DialogContent className="overflow-hidden p-0 shadow-lg">
        <Command className="[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5">
          {children}
        </Command>
      </DialogContent>
    </Dialog>
  )
}

const CommandInput = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Input>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>
>(({ className, ...props }, ref) => (
  <div className="flex items-center border-b px-3" cmdk-input-wrapper="">
    <Search className="mr-2 h-4 w-4 shrink-0 opacity-50" />
    <CommandPrimitive.Input
      ref={ref}
      className={cn(
        "flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    />
  </div>
))

CommandInput.displayName = CommandPrimitive.Input.displayName

const CommandList = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.List
    ref={ref}
    className={cn("max-h-[300px] overflow-y-auto overflow-x-hidden", className)}
    {...props}
  />
))

CommandList.displayName = CommandPrimitive.List.displayName

const CommandEmpty = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Empty>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>
>((props, ref) => (
  <CommandPrimitive.Empty
    ref={ref}
    className="py-6 text-center text-sm"
    {...props}
  />
))

CommandEmpty.displayName = CommandPrimitive.Empty.displayName

const CommandGroup = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Group>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Group
    ref={ref}
    className={cn(
      "overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground",
      className
    )}
    {...props}
  />
))

CommandGroup.displayName = CommandPrimitive.Group.displayName

const CommandSeparator = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 h-px bg-border", className)}
    {...props}
  />
))
CommandSeparator.displayName = CommandPrimitive.Separator.displayName

const CommandItem = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      className
    )}
    {...props}
  />
))

CommandItem.displayName = CommandPrimitive.Item.displayName

const CommandShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
CommandShortcut.displayName = "CommandShortcut"

export {
  Command,
  CommandDialog,
  CommandInput,
  CommandList,
  CommandEmpty,
  CommandGroup,
  CommandItem,
  CommandShortcut,
  CommandSeparator,
}

</code>

components\ui\context-menu.tsx:
<code>
"use client"

import * as React from "react"
import * as ContextMenuPrimitive from "@radix-ui/react-context-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const ContextMenu = ContextMenuPrimitive.Root

const ContextMenuTrigger = ContextMenuPrimitive.Trigger

const ContextMenuGroup = ContextMenuPrimitive.Group

const ContextMenuPortal = ContextMenuPrimitive.Portal

const ContextMenuSub = ContextMenuPrimitive.Sub

const ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup

const ContextMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <ContextMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </ContextMenuPrimitive.SubTrigger>
))
ContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName

const ContextMenuSubContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]",
      className
    )}
    {...props}
  />
))
ContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName

const ContextMenuContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Portal>
    <ContextMenuPrimitive.Content
      ref={ref}
      className={cn(
        "z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]",
        className
      )}
      {...props}
    />
  </ContextMenuPrimitive.Portal>
))
ContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName

const ContextMenuItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
ContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName

const ContextMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <ContextMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.CheckboxItem>
))
ContextMenuCheckboxItem.displayName =
  ContextMenuPrimitive.CheckboxItem.displayName

const ContextMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <ContextMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.RadioItem>
))
ContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName

const ContextMenuLabel = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold text-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
ContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName

const ContextMenuSeparator = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-border", className)}
    {...props}
  />
))
ContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName

const ContextMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
ContextMenuShortcut.displayName = "ContextMenuShortcut"

export {
  ContextMenu,
  ContextMenuTrigger,
  ContextMenuContent,
  ContextMenuItem,
  ContextMenuCheckboxItem,
  ContextMenuRadioItem,
  ContextMenuLabel,
  ContextMenuSeparator,
  ContextMenuShortcut,
  ContextMenuGroup,
  ContextMenuPortal,
  ContextMenuSub,
  ContextMenuSubContent,
  ContextMenuSubTrigger,
  ContextMenuRadioGroup,
}

</code>

components\ui\dialog.tsx:
<code>
"use client"

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}

</code>

components\ui\drawer.tsx:
<code>
"use client"

import * as React from "react"
import { Drawer as DrawerPrimitive } from "vaul"

import { cn } from "@/lib/utils"

const Drawer = ({
  shouldScaleBackground = true,
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (
  <DrawerPrimitive.Root
    shouldScaleBackground={shouldScaleBackground}
    {...props}
  />
)
Drawer.displayName = "Drawer"

const DrawerTrigger = DrawerPrimitive.Trigger

const DrawerPortal = DrawerPrimitive.Portal

const DrawerClose = DrawerPrimitive.Close

const DrawerOverlay = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Overlay
    ref={ref}
    className={cn("fixed inset-0 z-50 bg-black/80", className)}
    {...props}
  />
))
DrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName

const DrawerContent = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DrawerPortal>
    <DrawerOverlay />
    <DrawerPrimitive.Content
      ref={ref}
      className={cn(
        "fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background",
        className
      )}
      {...props}
    >
      <div className="mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted" />
      {children}
    </DrawerPrimitive.Content>
  </DrawerPortal>
))
DrawerContent.displayName = "DrawerContent"

const DrawerHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("grid gap-1.5 p-4 text-center sm:text-left", className)}
    {...props}
  />
)
DrawerHeader.displayName = "DrawerHeader"

const DrawerFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("mt-auto flex flex-col gap-2 p-4", className)}
    {...props}
  />
)
DrawerFooter.displayName = "DrawerFooter"

const DrawerTitle = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DrawerTitle.displayName = DrawerPrimitive.Title.displayName

const DrawerDescription = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DrawerDescription.displayName = DrawerPrimitive.Description.displayName

export {
  Drawer,
  DrawerPortal,
  DrawerOverlay,
  DrawerTrigger,
  DrawerClose,
  DrawerContent,
  DrawerHeader,
  DrawerFooter,
  DrawerTitle,
  DrawerDescription,
}

</code>

components\ui\dropdown-menu.tsx:
<code>
"use client"

import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]",
      className
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]",
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  )
}
DropdownMenuShortcut.displayName = "DropdownMenuShortcut"

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}

</code>

components\ui\form.tsx:
<code>
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { Slot } from "@radix-ui/react-slot"
import {
  Controller,
  FormProvider,
  useFormContext,
  type ControllerProps,
  type FieldPath,
  type FieldValues,
} from "react-hook-form"

import { cn } from "@/lib/utils"
import { Label } from "@/components/ui/label"

const Form = FormProvider

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
> = {
  name: TName
}

const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue
)

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  )
}

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext)
  const itemContext = React.useContext(FormItemContext)
  const { getFieldState, formState } = useFormContext()

  const fieldState = getFieldState(fieldContext.name, formState)

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>")
  }

  const { id } = itemContext

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  }
}

type FormItemContextValue = {
  id: string
}

const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue
)

const FormItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const id = React.useId()

  return (
    <FormItemContext.Provider value={{ id }}>
      <div ref={ref} className={cn("space-y-2", className)} {...props} />
    </FormItemContext.Provider>
  )
})
FormItem.displayName = "FormItem"

const FormLabel = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
>(({ className, ...props }, ref) => {
  const { error, formItemId } = useFormField()

  return (
    <Label
      ref={ref}
      className={cn(error && "text-destructive", className)}
      htmlFor={formItemId}
      {...props}
    />
  )
})
FormLabel.displayName = "FormLabel"

const FormControl = React.forwardRef<
  React.ElementRef<typeof Slot>,
  React.ComponentPropsWithoutRef<typeof Slot>
>(({ ...props }, ref) => {
  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()

  return (
    <Slot
      ref={ref}
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  )
})
FormControl.displayName = "FormControl"

const FormDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => {
  const { formDescriptionId } = useFormField()

  return (
    <p
      ref={ref}
      id={formDescriptionId}
      className={cn("text-sm text-muted-foreground", className)}
      {...props}
    />
  )
})
FormDescription.displayName = "FormDescription"

const FormMessage = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, children, ...props }, ref) => {
  const { error, formMessageId } = useFormField()
  const body = error ? String(error?.message ?? "") : children

  if (!body) {
    return null
  }

  return (
    <p
      ref={ref}
      id={formMessageId}
      className={cn("text-sm font-medium text-destructive", className)}
      {...props}
    >
      {body}
    </p>
  )
})
FormMessage.displayName = "FormMessage"

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
}

</code>

components\ui\hover-card.tsx:
<code>
"use client"

import * as React from "react"
import * as HoverCardPrimitive from "@radix-ui/react-hover-card"

import { cn } from "@/lib/utils"

const HoverCard = HoverCardPrimitive.Root

const HoverCardTrigger = HoverCardPrimitive.Trigger

const HoverCardContent = React.forwardRef<
  React.ElementRef<typeof HoverCardPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <HoverCardPrimitive.Content
    ref={ref}
    align={align}
    sideOffset={sideOffset}
    className={cn(
      "z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]",
      className
    )}
    {...props}
  />
))
HoverCardContent.displayName = HoverCardPrimitive.Content.displayName

export { HoverCard, HoverCardTrigger, HoverCardContent }

</code>

components\ui\input-otp.tsx:
<code>
"use client"

import * as React from "react"
import { OTPInput, OTPInputContext } from "input-otp"
import { Dot } from "lucide-react"

import { cn } from "@/lib/utils"

const InputOTP = React.forwardRef<
  React.ElementRef<typeof OTPInput>,
  React.ComponentPropsWithoutRef<typeof OTPInput>
>(({ className, containerClassName, ...props }, ref) => (
  <OTPInput
    ref={ref}
    containerClassName={cn(
      "flex items-center gap-2 has-[:disabled]:opacity-50",
      containerClassName
    )}
    className={cn("disabled:cursor-not-allowed", className)}
    {...props}
  />
))
InputOTP.displayName = "InputOTP"

const InputOTPGroup = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div">
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("flex items-center", className)} {...props} />
))
InputOTPGroup.displayName = "InputOTPGroup"

const InputOTPSlot = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div"> & { index: number }
>(({ index, className, ...props }, ref) => {
  const inputOTPContext = React.useContext(OTPInputContext)
  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]

  return (
    <div
      ref={ref}
      className={cn(
        "relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md",
        isActive && "z-10 ring-2 ring-ring ring-offset-background",
        className
      )}
      {...props}
    >
      {char}
      {hasFakeCaret && (
        <div className="pointer-events-none absolute inset-0 flex items-center justify-center">
          <div className="h-4 w-px animate-caret-blink bg-foreground duration-1000" />
        </div>
      )}
    </div>
  )
})
InputOTPSlot.displayName = "InputOTPSlot"

const InputOTPSeparator = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div">
>(({ ...props }, ref) => (
  <div ref={ref} role="separator" {...props}>
    <Dot />
  </div>
))
InputOTPSeparator.displayName = "InputOTPSeparator"

export { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }

</code>

components\ui\input.tsx:
<code>
import * as React from "react"

import { cn } from "@/lib/utils"

const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<"input">>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }

</code>

components\ui\label.tsx:
<code>
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }

</code>

components\ui\menubar.tsx:
<code>
"use client"

import * as React from "react"
import * as MenubarPrimitive from "@radix-ui/react-menubar"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

function MenubarMenu({
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {
  return <MenubarPrimitive.Menu {...props} />
}

function MenubarGroup({
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.Group>) {
  return <MenubarPrimitive.Group {...props} />
}

function MenubarPortal({
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {
  return <MenubarPrimitive.Portal {...props} />
}

function MenubarRadioGroup({
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {
  return <MenubarPrimitive.RadioGroup {...props} />
}

function MenubarSub({
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {
  return <MenubarPrimitive.Sub data-slot="menubar-sub" {...props} />
}

const Menubar = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Root
    ref={ref}
    className={cn(
      "flex h-10 items-center space-x-1 rounded-md border bg-background p-1",
      className
    )}
    {...props}
  />
))
Menubar.displayName = MenubarPrimitive.Root.displayName

const MenubarTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      className
    )}
    {...props}
  />
))
MenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName

const MenubarSubTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <MenubarPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </MenubarPrimitive.SubTrigger>
))
MenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName

const MenubarSubContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]",
      className
    )}
    {...props}
  />
))
MenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName

const MenubarContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>
>(
  (
    { className, align = "start", alignOffset = -4, sideOffset = 8, ...props },
    ref
  ) => (
    <MenubarPrimitive.Portal>
      <MenubarPrimitive.Content
        ref={ref}
        align={align}
        alignOffset={alignOffset}
        sideOffset={sideOffset}
        className={cn(
          "z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]",
          className
        )}
        {...props}
      />
    </MenubarPrimitive.Portal>
  )
)
MenubarContent.displayName = MenubarPrimitive.Content.displayName

const MenubarItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarItem.displayName = MenubarPrimitive.Item.displayName

const MenubarCheckboxItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <MenubarPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.CheckboxItem>
))
MenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName

const MenubarRadioItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <MenubarPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.RadioItem>
))
MenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName

const MenubarLabel = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarLabel.displayName = MenubarPrimitive.Label.displayName

const MenubarSeparator = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
MenubarSeparator.displayName = MenubarPrimitive.Separator.displayName

const MenubarShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
MenubarShortcut.displayname = "MenubarShortcut"

export {
  Menubar,
  MenubarMenu,
  MenubarTrigger,
  MenubarContent,
  MenubarItem,
  MenubarSeparator,
  MenubarLabel,
  MenubarCheckboxItem,
  MenubarRadioGroup,
  MenubarRadioItem,
  MenubarPortal,
  MenubarSubContent,
  MenubarSubTrigger,
  MenubarGroup,
  MenubarSub,
  MenubarShortcut,
}

</code>

components\ui\navigation-menu.tsx:
<code>
import * as React from "react"
import * as NavigationMenuPrimitive from "@radix-ui/react-navigation-menu"
import { cva } from "class-variance-authority"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const NavigationMenu = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Root
    ref={ref}
    className={cn(
      "relative z-10 flex max-w-max flex-1 items-center justify-center",
      className
    )}
    {...props}
  >
    {children}
    <NavigationMenuViewport />
  </NavigationMenuPrimitive.Root>
))
NavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName

const NavigationMenuList = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.List
    ref={ref}
    className={cn(
      "group flex flex-1 list-none items-center justify-center space-x-1",
      className
    )}
    {...props}
  />
))
NavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName

const NavigationMenuItem = NavigationMenuPrimitive.Item

const navigationMenuTriggerStyle = cva(
  "group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent"
)

const NavigationMenuTrigger = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Trigger
    ref={ref}
    className={cn(navigationMenuTriggerStyle(), "group", className)}
    {...props}
  >
    {children}{" "}
    <ChevronDown
      className="relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180"
      aria-hidden="true"
    />
  </NavigationMenuPrimitive.Trigger>
))
NavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName

const NavigationMenuContent = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Content
    ref={ref}
    className={cn(
      "left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto ",
      className
    )}
    {...props}
  />
))
NavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName

const NavigationMenuLink = NavigationMenuPrimitive.Link

const NavigationMenuViewport = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>
>(({ className, ...props }, ref) => (
  <div className={cn("absolute left-0 top-full flex justify-center")}>
    <NavigationMenuPrimitive.Viewport
      className={cn(
        "origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]",
        className
      )}
      ref={ref}
      {...props}
    />
  </div>
))
NavigationMenuViewport.displayName =
  NavigationMenuPrimitive.Viewport.displayName

const NavigationMenuIndicator = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Indicator
    ref={ref}
    className={cn(
      "top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in",
      className
    )}
    {...props}
  >
    <div className="relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md" />
  </NavigationMenuPrimitive.Indicator>
))
NavigationMenuIndicator.displayName =
  NavigationMenuPrimitive.Indicator.displayName

export {
  navigationMenuTriggerStyle,
  NavigationMenu,
  NavigationMenuList,
  NavigationMenuItem,
  NavigationMenuContent,
  NavigationMenuTrigger,
  NavigationMenuLink,
  NavigationMenuIndicator,
  NavigationMenuViewport,
}

</code>

components\ui\pagination.tsx:
<code>
import * as React from "react"
import { ChevronLeft, ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"
import { ButtonProps, buttonVariants } from "@/components/ui/button"

const Pagination = ({ className, ...props }: React.ComponentProps<"nav">) => (
  <nav
    role="navigation"
    aria-label="pagination"
    className={cn("mx-auto flex w-full justify-center", className)}
    {...props}
  />
)
Pagination.displayName = "Pagination"

const PaginationContent = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    className={cn("flex flex-row items-center gap-1", className)}
    {...props}
  />
))
PaginationContent.displayName = "PaginationContent"

const PaginationItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li ref={ref} className={cn("", className)} {...props} />
))
PaginationItem.displayName = "PaginationItem"

type PaginationLinkProps = {
  isActive?: boolean
} & Pick<ButtonProps, "size"> &
  React.ComponentProps<"a">

const PaginationLink = ({
  className,
  isActive,
  size = "icon",
  ...props
}: PaginationLinkProps) => (
  <a
    aria-current={isActive ? "page" : undefined}
    className={cn(
      buttonVariants({
        variant: isActive ? "outline" : "ghost",
        size,
      }),
      className
    )}
    {...props}
  />
)
PaginationLink.displayName = "PaginationLink"

const PaginationPrevious = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to previous page"
    size="default"
    className={cn("gap-1 pl-2.5", className)}
    {...props}
  >
    <ChevronLeft className="h-4 w-4" />
    <span>Previous</span>
  </PaginationLink>
)
PaginationPrevious.displayName = "PaginationPrevious"

const PaginationNext = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to next page"
    size="default"
    className={cn("gap-1 pr-2.5", className)}
    {...props}
  >
    <span>Next</span>
    <ChevronRight className="h-4 w-4" />
  </PaginationLink>
)
PaginationNext.displayName = "PaginationNext"

const PaginationEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    aria-hidden
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More pages</span>
  </span>
)
PaginationEllipsis.displayName = "PaginationEllipsis"

export {
  Pagination,
  PaginationContent,
  PaginationEllipsis,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
}

</code>

components\ui\popover.tsx:
<code>
"use client"

import * as React from "react"
import * as PopoverPrimitive from "@radix-ui/react-popover"

import { cn } from "@/lib/utils"

const Popover = PopoverPrimitive.Root

const PopoverTrigger = PopoverPrimitive.Trigger

const PopoverContent = React.forwardRef<
  React.ElementRef<typeof PopoverPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Portal>
    <PopoverPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]",
        className
      )}
      {...props}
    />
  </PopoverPrimitive.Portal>
))
PopoverContent.displayName = PopoverPrimitive.Content.displayName

export { Popover, PopoverTrigger, PopoverContent }

</code>

components\ui\progress.tsx:
<code>
"use client"

import * as React from "react"
import * as ProgressPrimitive from "@radix-ui/react-progress"

import { cn } from "@/lib/utils"

const Progress = React.forwardRef<
  React.ElementRef<typeof ProgressPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>
>(({ className, value, ...props }, ref) => (
  <ProgressPrimitive.Root
    ref={ref}
    className={cn(
      "relative h-4 w-full overflow-hidden rounded-full bg-secondary",
      className
    )}
    {...props}
  >
    <ProgressPrimitive.Indicator
      className="h-full w-full flex-1 bg-primary transition-all"
      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
    />
  </ProgressPrimitive.Root>
))
Progress.displayName = ProgressPrimitive.Root.displayName

export { Progress }

</code>

components\ui\radio-group.tsx:
<code>
"use client"

import * as React from "react"
import * as RadioGroupPrimitive from "@radix-ui/react-radio-group"
import { Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const RadioGroup = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Root
      className={cn("grid gap-2", className)}
      {...props}
      ref={ref}
    />
  )
})
RadioGroup.displayName = RadioGroupPrimitive.Root.displayName

const RadioGroupItem = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Item
      ref={ref}
      className={cn(
        "aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <RadioGroupPrimitive.Indicator className="flex items-center justify-center">
        <Circle className="h-2.5 w-2.5 fill-current text-current" />
      </RadioGroupPrimitive.Indicator>
    </RadioGroupPrimitive.Item>
  )
})
RadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName

export { RadioGroup, RadioGroupItem }

</code>

components\ui\resizable.tsx:
<code>
"use client"

import { GripVertical } from "lucide-react"
import * as ResizablePrimitive from "react-resizable-panels"

import { cn } from "@/lib/utils"

const ResizablePanelGroup = ({
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (
  <ResizablePrimitive.PanelGroup
    className={cn(
      "flex h-full w-full data-[panel-group-direction=vertical]:flex-col",
      className
    )}
    {...props}
  />
)

const ResizablePanel = ResizablePrimitive.Panel

const ResizableHandle = ({
  withHandle,
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {
  withHandle?: boolean
}) => (
  <ResizablePrimitive.PanelResizeHandle
    className={cn(
      "relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90",
      className
    )}
    {...props}
  >
    {withHandle && (
      <div className="z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border">
        <GripVertical className="h-2.5 w-2.5" />
      </div>
    )}
  </ResizablePrimitive.PanelResizeHandle>
)

export { ResizablePanelGroup, ResizablePanel, ResizableHandle }

</code>

components\ui\scroll-area.tsx:
<code>
"use client"

import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "@/lib/utils"

const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn("relative overflow-hidden", className)}
    {...props}
  >
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
))
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName

const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" &&
        "h-full w-2.5 border-l border-l-transparent p-[1px]",
      orientation === "horizontal" &&
        "h-2.5 flex-col border-t border-t-transparent p-[1px]",
      className
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
))
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName

export { ScrollArea, ScrollBar }

</code>

components\ui\select.tsx:
<code>
"use client"

import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { Check, ChevronDown, ChevronUp } from "lucide-react"

import { cn } from "@/lib/utils"

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
))
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("py-1.5 pl-8 pr-2 text-sm font-semibold", className)}
    {...props}
  />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>

    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
}

</code>

components\ui\separator.tsx:
<code>
"use client"

import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils"

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(
  (
    { className, orientation = "horizontal", decorative = true, ...props },
    ref
  ) => (
    <SeparatorPrimitive.Root
      ref={ref}
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "shrink-0 bg-border",
        orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
        className
      )}
      {...props}
    />
  )
)
Separator.displayName = SeparatorPrimitive.Root.displayName

export { Separator }

</code>

components\ui\sheet.tsx:
<code>
"use client"

import * as React from "react"
import * as SheetPrimitive from "@radix-ui/react-dialog"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Sheet = SheetPrimitive.Root

const SheetTrigger = SheetPrimitive.Trigger

const SheetClose = SheetPrimitive.Close

const SheetPortal = SheetPrimitive.Portal

const SheetOverlay = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName

const sheetVariants = cva(
  "fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
  {
    variants: {
      side: {
        top: "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
        bottom:
          "inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
        left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
        right:
          "inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm",
      },
    },
    defaultVariants: {
      side: "right",
    },
  }
)

interface SheetContentProps
  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,
    VariantProps<typeof sheetVariants> {}

const SheetContent = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Content>,
  SheetContentProps
>(({ side = "right", className, children, ...props }, ref) => (
  <SheetPortal>
    <SheetOverlay />
    <SheetPrimitive.Content
      ref={ref}
      className={cn(sheetVariants({ side }), className)}
      {...props}
    >
      {children}
      <SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </SheetPrimitive.Close>
    </SheetPrimitive.Content>
  </SheetPortal>
))
SheetContent.displayName = SheetPrimitive.Content.displayName

const SheetHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
SheetHeader.displayName = "SheetHeader"

const SheetFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
SheetFooter.displayName = "SheetFooter"

const SheetTitle = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold text-foreground", className)}
    {...props}
  />
))
SheetTitle.displayName = SheetPrimitive.Title.displayName

const SheetDescription = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
SheetDescription.displayName = SheetPrimitive.Description.displayName

export {
  Sheet,
  SheetPortal,
  SheetOverlay,
  SheetTrigger,
  SheetClose,
  SheetContent,
  SheetHeader,
  SheetFooter,
  SheetTitle,
  SheetDescription,
}

</code>

components\ui\sidebar.tsx:
<code>
"use client"

import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { VariantProps, cva } from "class-variance-authority"
import { PanelLeft } from "lucide-react"

import { useIsMobile } from "@/hooks/use-mobile"
import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Separator } from "@/components/ui/separator"
import {
  Sheet,
  SheetContent,
  SheetDescription,
  SheetHeader,
  SheetTitle,
} from "@/components/ui/sheet"
import { Skeleton } from "@/components/ui/skeleton"
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip"

const SIDEBAR_COOKIE_NAME = "sidebar_state"
const SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7
const SIDEBAR_WIDTH = "16rem"
const SIDEBAR_WIDTH_MOBILE = "18rem"
const SIDEBAR_WIDTH_ICON = "3rem"
const SIDEBAR_KEYBOARD_SHORTCUT = "b"

type SidebarContextProps = {
  state: "expanded" | "collapsed"
  open: boolean
  setOpen: (open: boolean) => void
  openMobile: boolean
  setOpenMobile: (open: boolean) => void
  isMobile: boolean
  toggleSidebar: () => void
}

const SidebarContext = React.createContext<SidebarContextProps | null>(null)

function useSidebar() {
  const context = React.useContext(SidebarContext)
  if (!context) {
    throw new Error("useSidebar must be used within a SidebarProvider.")
  }

  return context
}

const SidebarProvider = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    defaultOpen?: boolean
    open?: boolean
    onOpenChange?: (open: boolean) => void
  }
>(
  (
    {
      defaultOpen = true,
      open: openProp,
      onOpenChange: setOpenProp,
      className,
      style,
      children,
      ...props
    },
    ref
  ) => {
    const isMobile = useIsMobile()
    const [openMobile, setOpenMobile] = React.useState(false)

    // This is the internal state of the sidebar.
    // We use openProp and setOpenProp for control from outside the component.
    const [_open, _setOpen] = React.useState(defaultOpen)
    const open = openProp ?? _open
    const setOpen = React.useCallback(
      (value: boolean | ((value: boolean) => boolean)) => {
        const openState = typeof value === "function" ? value(open) : value
        if (setOpenProp) {
          setOpenProp(openState)
        } else {
          _setOpen(openState)
        }

        // This sets the cookie to keep the sidebar state.
        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`
      },
      [setOpenProp, open]
    )

    // Helper to toggle the sidebar.
    const toggleSidebar = React.useCallback(() => {
      return isMobile
        ? setOpenMobile((open) => !open)
        : setOpen((open) => !open)
    }, [isMobile, setOpen, setOpenMobile])

    // Adds a keyboard shortcut to toggle the sidebar.
    React.useEffect(() => {
      const handleKeyDown = (event: KeyboardEvent) => {
        if (
          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&
          (event.metaKey || event.ctrlKey)
        ) {
          event.preventDefault()
          toggleSidebar()
        }
      }

      window.addEventListener("keydown", handleKeyDown)
      return () => window.removeEventListener("keydown", handleKeyDown)
    }, [toggleSidebar])

    // We add a state so that we can do data-state="expanded" or "collapsed".
    // This makes it easier to style the sidebar with Tailwind classes.
    const state = open ? "expanded" : "collapsed"

    const contextValue = React.useMemo<SidebarContextProps>(
      () => ({
        state,
        open,
        setOpen,
        isMobile,
        openMobile,
        setOpenMobile,
        toggleSidebar,
      }),
      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]
    )

    return (
      <SidebarContext.Provider value={contextValue}>
        <TooltipProvider delayDuration={0}>
          <div
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH,
                "--sidebar-width-icon": SIDEBAR_WIDTH_ICON,
                ...style,
              } as React.CSSProperties
            }
            className={cn(
              "group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar",
              className
            )}
            ref={ref}
            {...props}
          >
            {children}
          </div>
        </TooltipProvider>
      </SidebarContext.Provider>
    )
  }
)
SidebarProvider.displayName = "SidebarProvider"

const Sidebar = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    side?: "left" | "right"
    variant?: "sidebar" | "floating" | "inset"
    collapsible?: "offcanvas" | "icon" | "none"
  }
>(
  (
    {
      side = "left",
      variant = "sidebar",
      collapsible = "offcanvas",
      className,
      children,
      ...props
    },
    ref
  ) => {
    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()

    if (collapsible === "none") {
      return (
        <div
          className={cn(
            "flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground",
            className
          )}
          ref={ref}
          {...props}
        >
          {children}
        </div>
      )
    }

    if (isMobile) {
      return (
        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>
          <SheetContent
            data-sidebar="sidebar"
            data-mobile="true"
            className="w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden"
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH_MOBILE,
              } as React.CSSProperties
            }
            side={side}
          >
            <SheetHeader className="sr-only">
              <SheetTitle>Sidebar</SheetTitle>
              <SheetDescription>Displays the mobile sidebar.</SheetDescription>
            </SheetHeader>
            <div className="flex h-full w-full flex-col">{children}</div>
          </SheetContent>
        </Sheet>
      )
    }

    return (
      <div
        ref={ref}
        className="group peer hidden text-sidebar-foreground md:block"
        data-state={state}
        data-collapsible={state === "collapsed" ? collapsible : ""}
        data-variant={variant}
        data-side={side}
      >
        {/* This is what handles the sidebar gap on desktop */}
        <div
          className={cn(
            "relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear",
            "group-data-[collapsible=offcanvas]:w-0",
            "group-data-[side=right]:rotate-180",
            variant === "floating" || variant === "inset"
              ? "group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon]"
          )}
        />
        <div
          className={cn(
            "fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex",
            side === "left"
              ? "left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]"
              : "right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]",
            // Adjust the padding for floating and inset variants.
            variant === "floating" || variant === "inset"
              ? "p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l",
            className
          )}
          {...props}
        >
          <div
            data-sidebar="sidebar"
            className="flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow"
          >
            {children}
          </div>
        </div>
      </div>
    )
  }
)
Sidebar.displayName = "Sidebar"

const SidebarTrigger = React.forwardRef<
  React.ElementRef<typeof Button>,
  React.ComponentProps<typeof Button>
>(({ className, onClick, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <Button
      ref={ref}
      data-sidebar="trigger"
      variant="ghost"
      size="icon"
      className={cn("h-7 w-7", className)}
      onClick={(event) => {
        onClick?.(event)
        toggleSidebar()
      }}
      {...props}
    >
      <PanelLeft />
      <span className="sr-only">Toggle Sidebar</span>
    </Button>
  )
})
SidebarTrigger.displayName = "SidebarTrigger"

const SidebarRail = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button">
>(({ className, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <button
      ref={ref}
      data-sidebar="rail"
      aria-label="Toggle Sidebar"
      tabIndex={-1}
      onClick={toggleSidebar}
      title="Toggle Sidebar"
      className={cn(
        "absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex",
        "[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize",
        "[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize",
        "group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar",
        "[[data-side=left][data-collapsible=offcanvas]_&]:-right-2",
        "[[data-side=right][data-collapsible=offcanvas]_&]:-left-2",
        className
      )}
      {...props}
    />
  )
})
SidebarRail.displayName = "SidebarRail"

const SidebarInset = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"main">
>(({ className, ...props }, ref) => {
  return (
    <main
      ref={ref}
      className={cn(
        "relative flex w-full flex-1 flex-col bg-background",
        "md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow",
        className
      )}
      {...props}
    />
  )
})
SidebarInset.displayName = "SidebarInset"

const SidebarInput = React.forwardRef<
  React.ElementRef<typeof Input>,
  React.ComponentProps<typeof Input>
>(({ className, ...props }, ref) => {
  return (
    <Input
      ref={ref}
      data-sidebar="input"
      className={cn(
        "h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring",
        className
      )}
      {...props}
    />
  )
})
SidebarInput.displayName = "SidebarInput"

const SidebarHeader = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="header"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarHeader.displayName = "SidebarHeader"

const SidebarFooter = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="footer"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarFooter.displayName = "SidebarFooter"

const SidebarSeparator = React.forwardRef<
  React.ElementRef<typeof Separator>,
  React.ComponentProps<typeof Separator>
>(({ className, ...props }, ref) => {
  return (
    <Separator
      ref={ref}
      data-sidebar="separator"
      className={cn("mx-2 w-auto bg-sidebar-border", className)}
      {...props}
    />
  )
})
SidebarSeparator.displayName = "SidebarSeparator"

const SidebarContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="content"
      className={cn(
        "flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarContent.displayName = "SidebarContent"

const SidebarGroup = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="group"
      className={cn("relative flex w-full min-w-0 flex-col p-2", className)}
      {...props}
    />
  )
})
SidebarGroup.displayName = "SidebarGroup"

const SidebarGroupLabel = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "div"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-label"
      className={cn(
        "flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        "group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupLabel.displayName = "SidebarGroupLabel"

const SidebarGroupAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-action"
      className={cn(
        "absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupAction.displayName = "SidebarGroupAction"

const SidebarGroupContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="group-content"
    className={cn("w-full text-sm", className)}
    {...props}
  />
))
SidebarGroupContent.displayName = "SidebarGroupContent"

const SidebarMenu = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu"
    className={cn("flex w-full min-w-0 flex-col gap-1", className)}
    {...props}
  />
))
SidebarMenu.displayName = "SidebarMenu"

const SidebarMenuItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    data-sidebar="menu-item"
    className={cn("group/menu-item relative", className)}
    {...props}
  />
))
SidebarMenuItem.displayName = "SidebarMenuItem"

const sidebarMenuButtonVariants = cva(
  "peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "hover:bg-sidebar-accent hover:text-sidebar-accent-foreground",
        outline:
          "bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]",
      },
      size: {
        default: "h-8 text-sm",
        sm: "h-7 text-xs",
        lg: "h-12 text-sm group-data-[collapsible=icon]:!p-0",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const SidebarMenuButton = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    isActive?: boolean
    tooltip?: string | React.ComponentProps<typeof TooltipContent>
  } & VariantProps<typeof sidebarMenuButtonVariants>
>(
  (
    {
      asChild = false,
      isActive = false,
      variant = "default",
      size = "default",
      tooltip,
      className,
      ...props
    },
    ref
  ) => {
    const Comp = asChild ? Slot : "button"
    const { isMobile, state } = useSidebar()

    const button = (
      <Comp
        ref={ref}
        data-sidebar="menu-button"
        data-size={size}
        data-active={isActive}
        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}
        {...props}
      />
    )

    if (!tooltip) {
      return button
    }

    if (typeof tooltip === "string") {
      tooltip = {
        children: tooltip,
      }
    }

    return (
      <Tooltip>
        <TooltipTrigger asChild>{button}</TooltipTrigger>
        <TooltipContent
          side="right"
          align="center"
          hidden={state !== "collapsed" || isMobile}
          {...tooltip}
        />
      </Tooltip>
    )
  }
)
SidebarMenuButton.displayName = "SidebarMenuButton"

const SidebarMenuAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    showOnHover?: boolean
  }
>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-action"
      className={cn(
        "absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "peer-data-[size=sm]/menu-button:top-1",
        "peer-data-[size=default]/menu-button:top-1.5",
        "peer-data-[size=lg]/menu-button:top-2.5",
        "group-data-[collapsible=icon]:hidden",
        showOnHover &&
          "group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuAction.displayName = "SidebarMenuAction"

const SidebarMenuBadge = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="menu-badge"
    className={cn(
      "pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground",
      "peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground",
      "peer-data-[size=sm]/menu-button:top-1",
      "peer-data-[size=default]/menu-button:top-1.5",
      "peer-data-[size=lg]/menu-button:top-2.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuBadge.displayName = "SidebarMenuBadge"

const SidebarMenuSkeleton = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    showIcon?: boolean
  }
>(({ className, showIcon = false, ...props }, ref) => {
  // Random width between 50 to 90%.
  const width = React.useMemo(() => {
    return `${Math.floor(Math.random() * 40) + 50}%`
  }, [])

  return (
    <div
      ref={ref}
      data-sidebar="menu-skeleton"
      className={cn("flex h-8 items-center gap-2 rounded-md px-2", className)}
      {...props}
    >
      {showIcon && (
        <Skeleton
          className="size-4 rounded-md"
          data-sidebar="menu-skeleton-icon"
        />
      )}
      <Skeleton
        className="h-4 max-w-[--skeleton-width] flex-1"
        data-sidebar="menu-skeleton-text"
        style={
          {
            "--skeleton-width": width,
          } as React.CSSProperties
        }
      />
    </div>
  )
})
SidebarMenuSkeleton.displayName = "SidebarMenuSkeleton"

const SidebarMenuSub = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu-sub"
    className={cn(
      "mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuSub.displayName = "SidebarMenuSub"

const SidebarMenuSubItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ ...props }, ref) => <li ref={ref} {...props} />)
SidebarMenuSubItem.displayName = "SidebarMenuSubItem"

const SidebarMenuSubButton = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentProps<"a"> & {
    asChild?: boolean
    size?: "sm" | "md"
    isActive?: boolean
  }
>(({ asChild = false, size = "md", isActive, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-sub-button"
      data-size={size}
      data-active={isActive}
      className={cn(
        "flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground",
        "data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground",
        size === "sm" && "text-xs",
        size === "md" && "text-sm",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuSubButton.displayName = "SidebarMenuSubButton"

export {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarGroup,
  SidebarGroupAction,
  SidebarGroupContent,
  SidebarGroupLabel,
  SidebarHeader,
  SidebarInput,
  SidebarInset,
  SidebarMenu,
  SidebarMenuAction,
  SidebarMenuBadge,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarMenuSkeleton,
  SidebarMenuSub,
  SidebarMenuSubButton,
  SidebarMenuSubItem,
  SidebarProvider,
  SidebarRail,
  SidebarSeparator,
  SidebarTrigger,
  useSidebar,
}

</code>

components\ui\skeleton.tsx:
<code>
import { cn } from "@/lib/utils"

function Skeleton({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) {
  return (
    <div
      className={cn("animate-pulse rounded-md bg-muted", className)}
      {...props}
    />
  )
}

export { Skeleton }

</code>

components\ui\slider.tsx:
<code>
"use client"

import * as React from "react"
import * as SliderPrimitive from "@radix-ui/react-slider"

import { cn } from "@/lib/utils"

const Slider = React.forwardRef<
  React.ElementRef<typeof SliderPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>
>(({ className, ...props }, ref) => (
  <SliderPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex w-full touch-none select-none items-center",
      className
    )}
    {...props}
  >
    <SliderPrimitive.Track className="relative h-2 w-full grow overflow-hidden rounded-full bg-secondary">
      <SliderPrimitive.Range className="absolute h-full bg-primary" />
    </SliderPrimitive.Track>
    <SliderPrimitive.Thumb className="block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50" />
  </SliderPrimitive.Root>
))
Slider.displayName = SliderPrimitive.Root.displayName

export { Slider }

</code>

components\ui\sonner.tsx:
<code>
"use client"

import { useTheme } from "next-themes"
import { Toaster as Sonner } from "sonner"

type ToasterProps = React.ComponentProps<typeof Sonner>

const Toaster = ({ ...props }: ToasterProps) => {
  const { theme = "system" } = useTheme()

  return (
    <Sonner
      theme={theme as ToasterProps["theme"]}
      className="toaster group"
      toastOptions={{
        classNames: {
          toast:
            "group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg",
          description: "group-[.toast]:text-muted-foreground",
          actionButton:
            "group-[.toast]:bg-primary group-[.toast]:text-primary-foreground",
          cancelButton:
            "group-[.toast]:bg-muted group-[.toast]:text-muted-foreground",
        },
      }}
      {...props}
    />
  )
}

export { Toaster }

</code>

components\ui\switch.tsx:
<code>
"use client"

import * as React from "react"
import * as SwitchPrimitives from "@radix-ui/react-switch"

import { cn } from "@/lib/utils"

const Switch = React.forwardRef<
  React.ElementRef<typeof SwitchPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
>(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      "peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input",
      className
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        "pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0"
      )}
    />
  </SwitchPrimitives.Root>
))
Switch.displayName = SwitchPrimitives.Root.displayName

export { Switch }

</code>

components\ui\table.tsx:
<code>
import * as React from "react"

import { cn } from "@/lib/utils"

const Table = React.forwardRef<
  HTMLTableElement,
  React.HTMLAttributes<HTMLTableElement>
>(({ className, ...props }, ref) => (
  <div className="relative w-full overflow-auto">
    <table
      ref={ref}
      className={cn("w-full caption-bottom text-sm", className)}
      {...props}
    />
  </div>
))
Table.displayName = "Table"

const TableHeader = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />
))
TableHeader.displayName = "TableHeader"

const TableBody = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn("[&_tr:last-child]:border-0", className)}
    {...props}
  />
))
TableBody.displayName = "TableBody"

const TableFooter = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn(
      "border-t bg-muted/50 font-medium [&>tr]:last:border-b-0",
      className
    )}
    {...props}
  />
))
TableFooter.displayName = "TableFooter"

const TableRow = React.forwardRef<
  HTMLTableRowElement,
  React.HTMLAttributes<HTMLTableRowElement>
>(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
      className
    )}
    {...props}
  />
))
TableRow.displayName = "TableRow"

const TableHead = React.forwardRef<
  HTMLTableCellElement,
  React.ThHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      "h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0",
      className
    )}
    {...props}
  />
))
TableHead.displayName = "TableHead"

const TableCell = React.forwardRef<
  HTMLTableCellElement,
  React.TdHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn("p-4 align-middle [&:has([role=checkbox])]:pr-0", className)}
    {...props}
  />
))
TableCell.displayName = "TableCell"

const TableCaption = React.forwardRef<
  HTMLTableCaptionElement,
  React.HTMLAttributes<HTMLTableCaptionElement>
>(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn("mt-4 text-sm text-muted-foreground", className)}
    {...props}
  />
))
TableCaption.displayName = "TableCaption"

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}

</code>

components\ui\tabs.tsx:
<code>
"use client"

import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground",
      className
    )}
    {...props}
  />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm",
      className
    )}
    {...props}
  />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className
    )}
    {...props}
  />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent }

</code>

components\ui\textarea.tsx:
<code>
import * as React from "react"

import { cn } from "@/lib/utils"

const Textarea = React.forwardRef<
  HTMLTextAreaElement,
  React.ComponentProps<"textarea">
>(({ className, ...props }, ref) => {
  return (
    <textarea
      className={cn(
        "flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        className
      )}
      ref={ref}
      {...props}
    />
  )
})
Textarea.displayName = "Textarea"

export { Textarea }

</code>

components\ui\toast.tsx:
<code>
"use client"

import * as React from "react"
import * as ToastPrimitives from "@radix-ui/react-toast"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const ToastProvider = ToastPrimitives.Provider

const ToastViewport = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Viewport>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Viewport
    ref={ref}
    className={cn(
      "fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]",
      className
    )}
    {...props}
  />
))
ToastViewport.displayName = ToastPrimitives.Viewport.displayName

const toastVariants = cva(
  "group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full",
  {
    variants: {
      variant: {
        default: "border bg-background text-foreground",
        destructive:
          "destructive group border-destructive bg-destructive text-destructive-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Toast = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &
    VariantProps<typeof toastVariants>
>(({ className, variant, ...props }, ref) => {
  return (
    <ToastPrimitives.Root
      ref={ref}
      className={cn(toastVariants({ variant }), className)}
      {...props}
    />
  )
})
Toast.displayName = ToastPrimitives.Root.displayName

const ToastAction = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Action>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Action
    ref={ref}
    className={cn(
      "inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive",
      className
    )}
    {...props}
  />
))
ToastAction.displayName = ToastPrimitives.Action.displayName

const ToastClose = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Close>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Close
    ref={ref}
    className={cn(
      "absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600",
      className
    )}
    toast-close=""
    {...props}
  >
    <X className="h-4 w-4" />
  </ToastPrimitives.Close>
))
ToastClose.displayName = ToastPrimitives.Close.displayName

const ToastTitle = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Title>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Title
    ref={ref}
    className={cn("text-sm font-semibold", className)}
    {...props}
  />
))
ToastTitle.displayName = ToastPrimitives.Title.displayName

const ToastDescription = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Description>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Description
    ref={ref}
    className={cn("text-sm opacity-90", className)}
    {...props}
  />
))
ToastDescription.displayName = ToastPrimitives.Description.displayName

type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>

type ToastActionElement = React.ReactElement<typeof ToastAction>

export {
  type ToastProps,
  type ToastActionElement,
  ToastProvider,
  ToastViewport,
  Toast,
  ToastTitle,
  ToastDescription,
  ToastClose,
  ToastAction,
}

</code>

components\ui\toaster.tsx:
<code>
"use client"

import { useToast } from "@/hooks/use-toast"
import {
  Toast,
  ToastClose,
  ToastDescription,
  ToastProvider,
  ToastTitle,
  ToastViewport,
} from "@/components/ui/toast"

export function Toaster() {
  const { toasts } = useToast()

  return (
    <ToastProvider>
      {toasts.map(function ({ id, title, description, action, ...props }) {
        return (
          <Toast key={id} {...props}>
            <div className="grid gap-1">
              {title && <ToastTitle>{title}</ToastTitle>}
              {description && (
                <ToastDescription>{description}</ToastDescription>
              )}
            </div>
            {action}
            <ToastClose />
          </Toast>
        )
      })}
      <ToastViewport />
    </ToastProvider>
  )
}

</code>

components\ui\toggle-group.tsx:
<code>
"use client"

import * as React from "react"
import * as ToggleGroupPrimitive from "@radix-ui/react-toggle-group"
import { type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"
import { toggleVariants } from "@/components/ui/toggle"

const ToggleGroupContext = React.createContext<
  VariantProps<typeof toggleVariants>
>({
  size: "default",
  variant: "default",
})

const ToggleGroup = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, children, ...props }, ref) => (
  <ToggleGroupPrimitive.Root
    ref={ref}
    className={cn("flex items-center justify-center gap-1", className)}
    {...props}
  >
    <ToggleGroupContext.Provider value={{ variant, size }}>
      {children}
    </ToggleGroupContext.Provider>
  </ToggleGroupPrimitive.Root>
))

ToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName

const ToggleGroupItem = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &
    VariantProps<typeof toggleVariants>
>(({ className, children, variant, size, ...props }, ref) => {
  const context = React.useContext(ToggleGroupContext)

  return (
    <ToggleGroupPrimitive.Item
      ref={ref}
      className={cn(
        toggleVariants({
          variant: context.variant || variant,
          size: context.size || size,
        }),
        className
      )}
      {...props}
    >
      {children}
    </ToggleGroupPrimitive.Item>
  )
})

ToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName

export { ToggleGroup, ToggleGroupItem }

</code>

components\ui\toggle.tsx:
<code>
"use client"

import * as React from "react"
import * as TogglePrimitive from "@radix-ui/react-toggle"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const toggleVariants = cva(
  "inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2",
  {
    variants: {
      variant: {
        default: "bg-transparent",
        outline:
          "border border-input bg-transparent hover:bg-accent hover:text-accent-foreground",
      },
      size: {
        default: "h-10 px-3 min-w-10",
        sm: "h-9 px-2.5 min-w-9",
        lg: "h-11 px-5 min-w-11",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const Toggle = React.forwardRef<
  React.ElementRef<typeof TogglePrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, ...props }, ref) => (
  <TogglePrimitive.Root
    ref={ref}
    className={cn(toggleVariants({ variant, size, className }))}
    {...props}
  />
))

Toggle.displayName = TogglePrimitive.Root.displayName

export { Toggle, toggleVariants }

</code>

components\ui\tooltip.tsx:
<code>
"use client"

import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"

import { cn } from "@/lib/utils"

const TooltipProvider = TooltipPrimitive.Provider

const Tooltip = TooltipPrimitive.Root

const TooltipTrigger = TooltipPrimitive.Trigger

const TooltipContent = React.forwardRef<
  React.ElementRef<typeof TooltipPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Content
    ref={ref}
    sideOffset={sideOffset}
    className={cn(
      "z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]",
      className
    )}
    {...props}
  />
))
TooltipContent.displayName = TooltipPrimitive.Content.displayName

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }

</code>

components\ui\use-mobile.tsx:
<code>
import * as React from "react"

const MOBILE_BREAKPOINT = 768

export function useIsMobile() {
  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)

  React.useEffect(() => {
    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)
    const onChange = () => {
      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    }
    mql.addEventListener("change", onChange)
    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    return () => mql.removeEventListener("change", onChange)
  }, [])

  return !!isMobile
}

</code>

components\ui\use-toast.ts:
<code>
"use client"

// Inspired by react-hot-toast library
import * as React from "react"

import type {
  ToastActionElement,
  ToastProps,
} from "@/components/ui/toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }

</code>

components\auth-forms.tsx:
<code>
'use client'

import React, { useState } from 'react'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Alert, AlertDescription } from '@/components/ui/alert'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { Github, Mail, Eye, EyeOff, AlertCircle, CheckCircle } from 'lucide-react'
import { supabase } from '@/lib/supabase'

interface AuthFormsProps {
  onClose?: () => void
}

export default function AuthForms({ onClose }: AuthFormsProps) {
  const [isLoading, setIsLoading] = useState(false)
  const [showPassword, setShowPassword] = useState(false)
  const [message, setMessage] = useState<{ type: 'success' | 'error'; text: string } | null>(null)
  
  const [signUpData, setSignUpData] = useState({
    email: '',
    password: '',
    confirmPassword: ''
  })
  
  const [signInData, setSignInData] = useState({
    email: '',
    password: ''
  })

  const handleSignUp = async (e: React.FormEvent) => {
    e.preventDefault()
    if (signUpData.password !== signUpData.confirmPassword) {
      setMessage({ type: 'error', text: 'Passwords do not match' })
      return
    }
    
    setIsLoading(true)
    setMessage(null)
    
    try {
      const { data, error } = await supabase.auth.signUp({
        email: signUpData.email,
        password: signUpData.password,
        // No email confirmation - direct signup for faster onboarding
      })
      
      if (error) throw error
      
      // User must manually switch to login after signup
      setMessage({
        type: 'success',
        text: 'Account created successfully! Please manually switch to login to continue.'
      })
      // REMOVED: Automatic tab switch - user must manually choose
    } catch (error: any) {
      setMessage({ type: 'error', text: error.message })
    } finally {
      setIsLoading(false)
    }
  }

  const handleSignIn = async (e: React.FormEvent) => {
    e.preventDefault()
    setIsLoading(true)
    setMessage(null)

    // Check if user entered a username instead of email
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
    if (!emailRegex.test(signInData.email)) {
      setMessage({
        type: 'error',
        text: 'Please enter a valid email address. For GitHub login, use the GitHub button below instead of entering your username here.'
      })
      setIsLoading(false)
      return
    }

    try {
      const { data, error } = await supabase.auth.signInWithPassword({
        email: signInData.email,
        password: signInData.password
      })

      if (error) throw error

      setMessage({
        type: 'success',
        text: 'Signed in successfully! Please manually navigate to your desired page.'
      })
      // REMOVED: Automatic redirect - user must manually navigate
    } catch (error: any) {
      setMessage({ type: 'error', text: error.message })
    } finally {
      setIsLoading(false)
    }
  }

  const handleGitHubSignIn = async () => {
    setIsLoading(true)
    setMessage(null)

    try {
      const { error } = await supabase.auth.signInWithOAuth({
        provider: 'github',
        options: {
          redirectTo: `${window.location.origin}/`,
          queryParams: {
            access_type: 'offline',
            prompt: 'consent',
          }
        }
      })

      if (error) throw error
    } catch (error: any) {
      setMessage({ type: 'error', text: error.message })
      setIsLoading(false)
    }
  }

  const handleGoogleSignIn = async () => {
    setIsLoading(true)
    setMessage(null)

    try {
      const { error } = await supabase.auth.signInWithOAuth({
        provider: 'google',
        options: {
          redirectTo: `${window.location.origin}/`,
          queryParams: {
            access_type: 'offline',
            prompt: 'consent',
          }
        }
      })

      if (error) throw error
    } catch (error: any) {
      setMessage({ type: 'error', text: error.message })
      setIsLoading(false)
    }
  }

  return (
    <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
      <Card className="w-full max-w-md">
        <CardHeader className="space-y-1">
          <div className="flex items-center justify-between">
            <CardTitle className="text-2xl font-bold">Welcome to NeatRepo</CardTitle>
            {onClose && (
              <Button variant="ghost" size="sm" onClick={onClose}>
                ×
              </Button>
            )}
          </div>
          <CardDescription>
            Sign in to your account or create a new one
          </CardDescription>
        </CardHeader>
        <CardContent>
          {message && (
            <Alert className={`mb-4 ${message.type === 'error' ? 'border-destructive' : 'border-green-500'}`}>
              {message.type === 'error' ? (
                <AlertCircle className="h-4 w-4" />
              ) : (
                <CheckCircle className="h-4 w-4" />
              )}
              <AlertDescription className={message.type === 'error' ? 'text-destructive' : 'text-green-600'}>
                {message.text}
              </AlertDescription>
            </Alert>
          )}

          <Tabs defaultValue="signin" className="w-full">
            <TabsList className="grid w-full grid-cols-2">
              <TabsTrigger value="signin">Sign In</TabsTrigger>
              <TabsTrigger value="signup">Sign Up</TabsTrigger>
            </TabsList>
            
            <TabsContent value="signin" className="space-y-4">
              <form onSubmit={handleSignIn} className="space-y-4">
                <div className="space-y-2">
                  <Label htmlFor="signin-email">Email</Label>
                  <Input
                    id="signin-email"
                    type="email"
                    placeholder="your@email.com"
                    value={signInData.email}
                    onChange={(e) => setSignInData(prev => ({ ...prev, email: e.target.value }))}
                    required
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="signin-password">Password</Label>
                  <div className="relative">
                    <Input
                      id="signin-password"
                      type={showPassword ? 'text' : 'password'}
                      placeholder="••••••••"
                      value={signInData.password}
                      onChange={(e) => setSignInData(prev => ({ ...prev, password: e.target.value }))}
                      required
                    />
                    <Button
                      type="button"
                      variant="ghost"
                      size="sm"
                      className="absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent"
                      onClick={() => setShowPassword(!showPassword)}
                    >
                      {showPassword ? <EyeOff className="h-4 w-4" /> : <Eye className="h-4 w-4" />}
                    </Button>
                  </div>
                </div>
                <Button type="submit" className="w-full" disabled={isLoading}>
                  {isLoading ? 'Signing in...' : 'Sign In'}
                </Button>
              </form>
            </TabsContent>
            
            <TabsContent value="signup" className="space-y-4">
              <form onSubmit={handleSignUp} className="space-y-4">
                <div className="space-y-2">
                  <Label htmlFor="signup-email">Email</Label>
                  <Input
                    id="signup-email"
                    type="email"
                    placeholder="your@email.com"
                    value={signUpData.email}
                    onChange={(e) => setSignUpData(prev => ({ ...prev, email: e.target.value }))}
                    required
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="signup-password">Password</Label>
                  <Input
                    id="signup-password"
                    type="password"
                    placeholder="••••••••"
                    value={signUpData.password}
                    onChange={(e) => setSignUpData(prev => ({ ...prev, password: e.target.value }))}
                    required
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="confirm-password">Confirm Password</Label>
                  <Input
                    id="confirm-password"
                    type="password"
                    placeholder="••••••••"
                    value={signUpData.confirmPassword}
                    onChange={(e) => setSignUpData(prev => ({ ...prev, confirmPassword: e.target.value }))}
                    required
                  />
                </div>
                <Button type="submit" className="w-full" disabled={isLoading}>
                  {isLoading ? 'Creating account...' : 'Create Account'}
                </Button>
              </form>
            </TabsContent>
          </Tabs>

          <div className="relative my-4">
            <div className="absolute inset-0 flex items-center">
              <span className="w-full border-t" />
            </div>
            <div className="relative flex justify-center text-xs uppercase">
              <span className="bg-background px-2 text-muted-foreground">Or continue with</span>
            </div>
          </div>

          <div className="grid grid-cols-2 gap-3">
            <Button
              variant="outline"
              className="w-full"
              onClick={handleGoogleSignIn}
              disabled={isLoading}
            >
              <svg className="mr-2 h-4 w-4" viewBox="0 0 24 24">
                <path fill="#4285F4" d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"/>
                <path fill="#34A853" d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"/>
                <path fill="#FBBC05" d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"/>
                <path fill="#EA4335" d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"/>
              </svg>
              Google
            </Button>
            <Button
              variant="outline"
              className="w-full"
              onClick={handleGitHubSignIn}
              disabled={isLoading}
            >
              <Github className="mr-2 h-4 w-4" />
              GitHub
            </Button>
          </div>
        </CardContent>
      </Card>
    </div>
  )
}

</code>

components\auth-guard.tsx:
<code>
"use client"

import { useEffect, useState } from 'react'
import { useRouter, useSearchParams } from 'next/navigation'
import { useAuth } from './auth-provider'

interface AuthGuardProps {
  children: React.ReactNode
  requireAuth?: boolean
}

export function AuthGuard({ children, requireAuth = true }: AuthGuardProps) {
  const { user, loading } = useAuth()
  const router = useRouter()
  const searchParams = useSearchParams()
  const [isChecking, setIsChecking] = useState(true)

  useEffect(() => {
    // If we don't require auth, just render children
    if (!requireAuth) {
      setIsChecking(false)
      return
    }

    // If still loading, wait
    if (loading) {
      return
    }

    // Check for auth success parameter (fresh from OAuth)
    const authSuccess = searchParams.get('auth')
    if (authSuccess === 'success') {
      console.log('🔄 AUTH GUARD: Auth success parameter detected, waiting for session...')
      
      // Give the session a moment to establish after OAuth callback
      const sessionTimeout = setTimeout(() => {
        if (!user) {
          console.log('⚠️ AUTH GUARD: Session not established after OAuth - user must manually navigate')
          // REMOVED: Automatic redirect - user must manually choose where to go
        } else {
          console.log('✅ AUTH GUARD: Session established successfully')
          // Clean up the URL parameter
          const url = new URL(window.location.href)
          url.searchParams.delete('auth')
          window.history.replaceState({}, '', url.toString())
        }
        setIsChecking(false)
      }, 2000) // Give 2 seconds for session to establish

      return () => clearTimeout(sessionTimeout)
    }

    // Normal auth check
    if (!user) {
      console.log('🚫 AUTH GUARD: No user found - user must manually navigate')
      // REMOVED: Automatic redirect - user must manually choose where to go
      setIsChecking(false)
      return
    }

    console.log('✅ AUTH GUARD: User authenticated, allowing access')
    setIsChecking(false)
  }, [user, loading, requireAuth, router, searchParams])

  // Show loading state while checking auth
  if (isChecking || loading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4"></div>
          <p className="text-muted-foreground">Authenticating...</p>
        </div>
      </div>
    )
  }

  // If we require auth and don't have a user, don't render children
  if (requireAuth && !user) {
    return null
  }

  return <>{children}</>
}
</code>

components\auth-provider.tsx:
<code>
"use client"

import React, { useEffect, useState } from "react";
import { User } from "@supabase/supabase-js";
import { supabase } from "@/lib/supabase";
import { AuthContext, AuthContextType, UserProfile, useAuth } from "./auth/auth-context";
import { fetchProfileService, updateTokenService, deleteTokenService, validateTokenService } from "@/lib/auth/profile-service";
import GitHubTokenPopup from "./github-token-popup";

// Re-export useAuth for convenience if other files import it from here
export { useAuth };

export function AuthProvider({ children }: { children: React.ReactNode }) {
  const [user, setUser] = useState<User | null>(null);
  const [profile, setProfile] = useState<UserProfile | null>(null);
  const [loading, setLoading] = useState(true);
  const [showTokenPopupState, setShowTokenPopupState] = useState(false);
  const [isSubmitting, setIsSubmitting] = useState(false);
  // Track if the token is invalid
  const [isTokenInvalid, setIsTokenInvalid] = useState(false);

  useEffect(() => {
    setLoading(true);
    console.log("🚀 AUTH: Provider mounted. Setting up auth listener.");
    
    const { data: { subscription } } = supabase.auth.onAuthStateChange(
        async (event, session) => {
            console.log("🔄 AUTH: Auth state changed:", { event, hasSession: !!session });

            if (session?.user) {
                const currentUser = session.user;
                setUser(currentUser);

                if (typeof window !== 'undefined') {
                    sessionStorage.setItem('current_user_id', currentUser.id);
                }

                if (typeof window !== 'undefined') {
                    const cachedPat = localStorage.getItem(`github_pat_token_${currentUser.id}`);
                    if (cachedPat && !cachedPat.startsWith('gho_')) {
                        console.log('🔄 AUTH: Preemptively hydrating profile with cached PAT.');
                        setProfile(prev => ({ ...(prev || { id: currentUser.id }), github_pat_token: cachedPat } as UserProfile));
                    }
                }
                

                const fetchedProfile = await fetchProfileService(currentUser.id, currentUser);
                setProfile(fetchedProfile);

                // ✨ NEW VALIDATION LOGIC ✨
                // If the fetched profile contains a PAT, validate it immediately on load.
                if (fetchedProfile?.github_pat_token) {
                    const isTokenValid = await validateTokenService(fetchedProfile.github_pat_token);
                    if (!isTokenValid) {
                        setIsTokenInvalid(true);
                    }
                }

            } else {
                setUser(null);
                setProfile(null);
                if (typeof window !== 'undefined') {
                    sessionStorage.removeItem('current_user_id');
                }
            }

            setLoading(false);
            console.log("✅ AUTH: State processing complete. Loading is now false.");
        }
    );

    const initialSessionCheck = async () => {
        const { data: { session } } = await supabase.auth.getSession();
        if (!session) {
            setLoading(false);
            console.log("✅ AUTH: No initial session found. Authentication finished.");
        }
    };

    initialSessionCheck();

    return () => {
        subscription.unsubscribe();
    };
}, []);

  const signOut = async () => {
    const userInfo = {
      username: profile?.github_username || user?.email || 'User',
      avatar: profile?.avatar_url || user?.user_metadata?.avatar_url || ''
    };
  
    if (user) {
      localStorage.removeItem(`token_popup_skipped_permanently_${user.id}`);
    }
  
    setProfile(null);
  
    if (typeof window !== 'undefined') {
      localStorage.clear();
      sessionStorage.clear();
    }
  
    await supabase.auth.signOut({ scope: 'global' });
  
    const signoutUrl = new URL('/signout', window.location.origin);
    signoutUrl.searchParams.set('username', userInfo.username);
    signoutUrl.searchParams.set('avatar', userInfo.avatar);
    window.location.href = signoutUrl.toString();
  };

  const updateToken = async (token: string) => {
    if (!user) return;
    setIsSubmitting(true);
    try {
      await updateTokenService(user.id, token);
      setProfile(prev => (prev ? { ...prev, github_pat_token: token } : null));
      setIsTokenInvalid(false); // Reset invalid status on update
      if (typeof window !== 'undefined') {
        localStorage.setItem(`github_pat_token_${user.id}`, token);
        localStorage.removeItem(`token_popup_skipped_permanently_${user.id}`);
      }
      setShowTokenPopupState(false);
    } catch (error) {
      alert('Failed to save token. Please check the console for details.');
      console.error("AuthProvider: updateToken failed", error);
    } finally {
      setIsSubmitting(false);
    }
  };

  const deleteToken = async () => {
    if (!user) return;
    setIsSubmitting(true);
    try {
      await deleteTokenService(user.id);
      setProfile(prev => (prev ? { ...prev, github_pat_token: undefined } : null));
      if (typeof window !== 'undefined') {
        localStorage.removeItem(`github_pat_token_${user.id}`);
      }
    } catch (error) {
      alert('Failed to delete token. Please try again.');
      console.error("AuthProvider: deleteToken failed", error);
    } finally {
      setIsSubmitting(false);
    }
  };

  const getEffectiveToken = async (): Promise<string | null> => {
    console.log("--- 🕵️‍♂️ getEffectiveToken Diagnostic ---");

    // Priority 1: Check the live profile state from React.
    if (profile) {
        if (profile.github_pat_token) {
            console.log("✅ [SUCCESS] Found PAT in the loaded profile state.");
            console.log("--- Diagnostic END ---");
            return profile.github_pat_token;
        } else {
            console.log("🟡 [INFO] Profile is loaded, but it does not contain a PAT.");
        }
    } else {
        console.log("🟡 [INFO] Profile state is currently null (still loading or not found).");
    }

    // Priority 2: Check localStorage as a fast fallback. This is crucial for hard refreshes.
    if (user && typeof window !== 'undefined') {
        const key = `github_pat_token_${user.id}`;
        const cachedPat = localStorage.getItem(key);
        
        if (cachedPat) {
            if (!cachedPat.startsWith('gho_')) {
                console.log("✅ [SUCCESS] Found PAT in localStorage cache.");
                console.log("--- Diagnostic END ---");
                return cachedPat;
            } else {
                console.log("🔴 [ERROR] An OAuth token (gho_) was incorrectly saved as a PAT in localStorage. Ignoring it.");
            }
        } else {
            console.log(`🟡 [INFO] No PAT found in localStorage for key: \"${key}\"`);
        }
    } else {
        console.log("🟡 [INFO] Cannot check localStorage because the user object isn't available yet.");
    }

    console.log("🔴 [FAILURE] No valid Personal Access Token (PAT) was found.");
    console.log("--- Diagnostic END ---");
    return null; // Explicitly return null. DO NOT fall back to any other token.
  };
  
  const handleSkipToken = () => {
    if (user && typeof window !== 'undefined') {
      localStorage.setItem(`token_popup_skipped_permanently_${user.id}`, 'true');
    }
    setShowTokenPopupState(false);
  };

  const value: AuthContextType = {
    user,
    profile,
    loading,
    signOut,
    showTokenPopup: () => setShowTokenPopupState(true),
    getEffectiveToken,
    updateToken,
    deleteToken,
    isTokenInvalid,
    markTokenAsInvalid: () => setIsTokenInvalid(true),
  };

  return (
    <AuthContext.Provider value={value}>
      {showTokenPopupState && (
        <GitHubTokenPopup
          onTokenSubmit={updateToken}
          isSubmitting={isSubmitting}
          onClose={() => setShowTokenPopupState(false)}
          onSkip={handleSkipToken}
        />
      )}
      {children}
    </AuthContext.Provider>
  );
}
</code>

components\dashboard-header.tsx:
<code>
"use client"

import { User, LogOut, Settings } from "lucide-react"
import { ThemeToggle } from "@/components/theme-toggle"
import { useTheme } from "next-themes"
import { Badge } from "@/components/ui/badge"
import { Button } from "@/components/ui/button"

import { useAuth } from "@/components/auth-provider"
import { useRouter } from "next/navigation"

export default function DashboardHeader() {
  const { user, profile, loading, signOut } = useAuth()
  const router = useRouter()
  const { theme } = useTheme()

  // Prefer avatar from profile, fallback to metadata
  const avatarSrc = profile?.avatar_url || user?.user_metadata?.avatar_url || '';

  const handleSignOut = async () => {
    await signOut();
    // Redirect is handled within the AuthProvider's signOut implementation
  }

  const handleSignIn = () => {
    router.push('/')
  }

  const handleProfileSettings = () => {
    router.push('/profile')
  }

  return (
    <header className="border-b border-border bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60 sticky top-0 z-50">
      <div className="container mx-auto px-4 py-3">
        <div className="flex items-center justify-between">
          {/* Logo & Brand */}
          <div className="flex items-center space-x-3">
            <img 
              src={theme === 'dark' ? '/logo-dark.png' : '/logo-light.png'}
              alt="NeatRepo Logo"
              className="h-8 w-8"
            />
            <div className="flex flex-col">
              <span className="text-xl font-bold">NeatRepo</span>
              <div className="flex items-center space-x-2">
                <Badge variant="secondary" className="text-xs">
                  Dashboard
                </Badge>
              </div>
            </div>
          </div>

          {/* Navigation Actions */}
          <div className="flex items-center space-x-4">
            <ThemeToggle />

            {/* User Menu with Profile Settings */}
            {user ? (
              <div className="flex items-center space-x-2">
                                {avatarSrc ? (
                  <img
                    src={avatarSrc}
                    alt={profile?.username || user?.user_metadata?.user_name || 'User'}
                    className="w-6 h-6 rounded-full"
                  />
                ) : (
                  <User className="w-4 h-4" />
                )}
                <span className="text-sm">
                  {profile?.username || user.email || 'User'}
                </span>
                <Button
                  variant="ghost"
                  size="icon"
                  onClick={handleProfileSettings}
                  disabled={loading}
                >
                  <Settings className="w-4 h-4" />
                </Button>
                <Button
                  variant="ghost"
                  size="icon"
                  onClick={handleSignOut}
                  disabled={loading}
                >
                  <LogOut className="w-4 h-4" />
                </Button>
              </div>
            ) : (
              <Button
                variant="ghost"
                onClick={handleSignIn}
                disabled={loading}
              >
                <User className="w-4 h-4 mr-2" />
                Sign In
              </Button>
            )}
          </div>
        </div>
      </div>
    </header>
  )
}

</code>

components\github-auth.tsx:
<code>
"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Alert, AlertDescription } from "@/components/ui/alert"
import { Github, Users, Zap, Shield, GitBranch, Star, X, AlertCircle } from "lucide-react"
import { supabase } from "@/lib/supabase"

interface GitHubAuthProps {
  onClose?: () => void
}

export default function GitHubAuth({ onClose }: GitHubAuthProps) {
  const [isLoading, setIsLoading] = useState(false)
  const [error, setError] = useState<string | null>(null)

  const handleGitHubSignIn = async () => {
    setIsLoading(true)
    setError(null)

    try {
      const { error } = await supabase.auth.signInWithOAuth({
        provider: 'github',
        options: {
          // Use custom OAuth callback route to handle session exchange server-side
          redirectTo: `${window.location.origin}/api/auth/callback?next=/dashboard`,
          scopes: 'repo read:user',
          queryParams: {
            access_type: 'offline',
            prompt: 'consent',
          }
        }
      })

      if (error) {
        throw error
      }
    } catch (err: any) {
      console.error('GitHub OAuth error:', err)
      setError(err.message || 'Failed to sign in with GitHub')
      setIsLoading(false)
    }
  }

  return (
    <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
      <Card className="w-full max-w-lg mx-auto">
        <CardHeader className="text-center">
          <div className="flex items-center justify-between">
            <div className="flex-1" />
            <Github className="h-10 w-10 text-primary" />
            {onClose && (
              <Button
                variant="ghost"
                size="sm"
                onClick={onClose}
                className="flex-shrink-0"
              >
                <X className="h-4 w-4" />
              </Button>
            )}
          </div>
          <CardTitle className="text-2xl">Welcome to NeatRepo</CardTitle>
          <CardDescription className="text-base">
            Professional GitHub Repository Management
          </CardDescription>
        </CardHeader>
        
        <CardContent className="space-y-6">
          {error && (
            <Alert variant="destructive">
              <AlertCircle className="h-4 w-4" />
              <AlertDescription>{error}</AlertDescription>
            </Alert>
          )}
          
          {/* Features Grid */}
          <div className="grid grid-cols-2 gap-4 text-sm">
            <div className="flex items-center space-x-3">
              <Zap className="h-4 w-4 text-yellow-500" />
              <span>Lightning Fast</span>
            </div>
            <div className="flex items-center space-x-3">
              <Shield className="h-4 w-4 text-green-500" />
              <span>Secure OAuth</span>
            </div>
            <div className="flex items-center space-x-3">
              <GitBranch className="h-4 w-4 text-purple-500" />
              <span>Bulk Operations</span>
            </div>
            <div className="flex items-center space-x-3">
              <Users className="h-4 w-4 text-blue-500" />
              <span>Repository Management</span>
            </div>
          </div>

          {/* Professional Features Highlight */}
          <div className="bg-gradient-to-r from-blue-50 to-purple-50 dark:from-blue-950/20 dark:to-purple-950/20 p-4 rounded-lg border">
            <div className="flex items-center space-x-2 mb-2">
              <Star className="h-4 w-4 text-yellow-500" />
              <span className="font-semibold text-sm">Professional Repository Management</span>
              <Badge variant="secondary" className="text-xs">Production Ready</Badge>
            </div>
            <p className="text-sm text-muted-foreground">
              Organize, manage, and optimize your GitHub repositories with powerful bulk operations and AI assistance.
            </p>
          </div>
          
          {/* Sign In Button */}
          <Button 
            onClick={handleGitHubSignIn}
            disabled={isLoading}
            className="w-full h-12 text-base"
            size="lg"
          >
            {isLoading ? (
              <>
                <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-white mr-3" />
                Connecting to GitHub...
              </>
            ) : (
              <>
                <Github className="h-5 w-5 mr-3" />
                Continue with GitHub
              </>
            )}
          </Button>
          
          {/* Benefits */}
          <div className="space-y-2 text-xs text-muted-foreground">
            <p className="flex items-center justify-center space-x-1">
              <Shield className="h-3 w-3" />
              <span>We only request necessary permissions</span>
            </p>
            <p className="flex items-center justify-center space-x-1">
              <Users className="h-3 w-3" />
              <span>Easy account switching • No email required</span>
            </p>
          </div>
        </CardContent>
      </Card>
    </div>
  )
}

</code>

components\github-connect-popup.tsx:
<code>
"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Github, Shield, Zap, X } from "lucide-react"
import { supabase } from "@/lib/supabase"

interface GitHubConnectPopupProps {
  onClose: () => void
  onSkip: () => void
  userEmail?: string
}

export default function GitHubConnectPopup({ onClose, onSkip, userEmail }: GitHubConnectPopupProps) {
  const [isConnecting, setIsConnecting] = useState(false)

  const handleConnectGitHub = async () => {
    setIsConnecting(true)
    
    try {
      const currentUrl = window.location.href
      const { error } = await supabase.auth.signInWithOAuth({
        provider: 'github',
        options: {
          redirectTo: currentUrl,
          scopes: 'repo read:user'
        }
      })
      
      if (error) {
        console.error('❌ GitHub OAuth failed:', error)
        setIsConnecting(false)
      }
    } catch (error) {
      console.error('❌ GitHub connection error:', error)
      setIsConnecting(false)
    }
  }

  return (
    <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
      <Card className="w-full max-w-md mx-auto">
        <CardHeader className="text-center">
          <div className="flex items-center justify-between">
            <div className="flex-1" />
            <Github className="h-8 w-8 text-primary" />
            <Button
              variant="ghost"
              size="sm"
              onClick={onClose}
              className="flex-shrink-0"
            >
              <X className="h-4 w-4" />
            </Button>
          </div>
          <CardTitle className="text-xl">Connect Your GitHub Account</CardTitle>
          <CardDescription>
            To access your repositories and use NeatRepo's features, please connect your GitHub account.
          </CardDescription>
        </CardHeader>
        
        <CardContent className="space-y-4">
          {userEmail && (
            <div className="bg-muted p-3 rounded-lg text-sm">
              <p className="text-muted-foreground">Currently signed in as:</p>
              <p className="font-medium">{userEmail}</p>
            </div>
          )}
          
          <div className="space-y-3">
            <div className="flex items-center space-x-3 text-sm">
              <Shield className="h-4 w-4 text-green-500" />
              <span>Secure OAuth authentication</span>
            </div>
            <div className="flex items-center space-x-3 text-sm">
              <Zap className="h-4 w-4 text-blue-500" />
              <span>Access your repositories</span>
            </div>
            <div className="flex items-center space-x-3 text-sm">
              <Github className="h-4 w-4 text-purple-500" />
              <span>Manage repositories efficiently</span>
            </div>
          </div>
          
          <div className="space-y-3 pt-4">
            <Button 
              onClick={handleConnectGitHub}
              disabled={isConnecting}
              className="w-full"
              size="lg"
            >
              {isConnecting ? (
                <>
                  <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2" />
                  Connecting...
                </>
              ) : (
                <>
                  <Github className="h-4 w-4 mr-2" />
                  Connect GitHub Account
                </>
              )}
            </Button>
            
            <Button 
              variant="outline" 
              onClick={onSkip}
              className="w-full"
              disabled={isConnecting}
            >
              Skip for now
              <Badge variant="secondary" className="ml-2 text-xs">
                Limited features
              </Badge>
            </Button>
          </div>
          
          <p className="text-xs text-muted-foreground text-center">
            You can connect your GitHub account later from your profile settings.
          </p>
        </CardContent>
      </Card>
    </div>
  )
}

</code>

components\github-token-popup.tsx:
<code>
import React, { useState } from 'react';
import { GithubIcon, X, ExternalLink, AlertTriangle, CheckCircle } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Badge } from '@/components/ui/badge';

interface GitHubTokenPopupProps {
  onTokenSubmit: (token: string) => void;
  isSubmitting: boolean;
  onClose: () => void;
  onSkip: () => void;
}

export default function GitHubTokenPopup({ onTokenSubmit, isSubmitting, onClose, onSkip }: GitHubTokenPopupProps) {
  const [token, setToken] = useState('');

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (token.trim()) {
      onTokenSubmit(token.trim());
    }
  };

  return (
    <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/50 backdrop-blur-sm p-4">
      <div className="bg-background border rounded-lg shadow-lg max-w-lg w-full max-h-[90vh] overflow-y-auto relative">
        <Button
          variant="ghost"
          size="icon"
          onClick={onClose}
          className="absolute top-4 right-4 h-8 w-8"
        >
          <X className="h-4 w-4" />
        </Button>

        <div className="p-6">
          <div className="flex items-center gap-3 mb-6">
            <div className="p-2 bg-muted rounded-lg">
              <GithubIcon className="h-6 w-6" />
            </div>
            <div>
              <h2 className="text-xl font-semibold">Connect GitHub Account</h2>
              <p className="text-sm text-muted-foreground">Set up your Personal Access Token</p>
            </div>
          </div>
          <Alert className="mb-4">
            <AlertTriangle className="h-4 w-4" />
            <AlertDescription>
              <strong>Required Permissions:</strong> The following scopes are needed for full functionality.
            </AlertDescription>
          </Alert>

          <div className="grid grid-cols-2 gap-2 mb-4">
            <Badge variant="secondary" className="justify-center">
              <CheckCircle className="h-3 w-3 mr-1" />
              repo
            </Badge>
            <Badge variant="secondary" className="justify-center">
              <CheckCircle className="h-3 w-3 mr-1" />
              delete_repo
            </Badge>
            <Badge variant="secondary" className="justify-center">
              <CheckCircle className="h-3 w-3 mr-1" />
              admin:org
            </Badge>
            <Badge variant="secondary" className="justify-center">
              <CheckCircle className="h-3 w-3 mr-1" />
              user
            </Badge>
          </div>

          <div className="space-y-3 mb-6 text-sm text-muted-foreground">
            <div className="flex items-start gap-2">
              <span className="flex-shrink-0 w-5 h-5 bg-primary text-primary-foreground rounded-full flex items-center justify-center text-xs font-medium">1</span>
              <span>Click the button below to open GitHub token page</span>
            </div>
            <div className="flex items-start gap-2">
              <span className="flex-shrink-0 w-5 h-5 bg-primary text-primary-foreground rounded-full flex items-center justify-center text-xs font-medium">2</span>
              <span>Name your token "NeatRepo" in the Note field</span>
            </div>
            <div className="flex items-start gap-2">
              <span className="flex-shrink-0 w-5 h-5 bg-primary text-primary-foreground rounded-full flex items-center justify-center text-xs font-medium">3</span>
              <span>Select all 4 required scopes shown above</span>
            </div>
            <div className="flex items-start gap-2">
              <span className="flex-shrink-0 w-5 h-5 bg-primary text-primary-foreground rounded-full flex items-center justify-center text-xs font-medium">4</span>
              <span>Generate and copy the token</span>
            </div>
            <div className="flex items-start gap-2">
              <span className="flex-shrink-0 w-5 h-5 bg-primary text-primary-foreground rounded-full flex items-center justify-center text-xs font-medium">5</span>
              <span>Paste the token in the field below</span>
            </div>
          </div>
          <form onSubmit={handleSubmit} className="space-y-4">
            <div className="space-y-2">
              <Label htmlFor="github-token">GitHub Personal Access Token</Label>
              <Input
                id="github-token"
                type="password"
                value={token}
                onChange={(e) => setToken(e.target.value)}
                placeholder="ghp_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
              />
            </div>

            <Button
              type="button"
              variant="outline"
              className="w-full"
              asChild
            >
              <a
                href="https://github.com/settings/tokens/new?scopes=repo,delete_repo,admin:org,user&description=NeatRepo%20-%20Full%20Access"
                target="_blank"
                rel="noopener noreferrer"
                className="flex items-center justify-center gap-2"
              >
                <ExternalLink className="h-4 w-4" />
                Open GitHub & Auto-Select Scopes
              </a>
            </Button>
            <div className="flex flex-col gap-2">
              <Button
                type="submit"
                disabled={isSubmitting || !token.trim()}
                className="w-full"
              >
                {isSubmitting ? 'Saving...' : 'Save and Continue'}
              </Button>

              <Button
                type="button"
                variant="ghost"
                onClick={onSkip}
                disabled={isSubmitting}
                className="w-full text-muted-foreground"
              >
                Skip for now (Limited functionality)
              </Button>
            </div>
          </form>
        </div>
      </div>
    </div>
  );
}

</code>

components\github-token-warning.tsx:
<code>
'use client'

import { useState } from 'react'
import { Alert, AlertDescription } from '@/components/ui/alert'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { AlertTriangle, Github, X, Trash2, Zap } from 'lucide-react'

interface GitHubTokenWarningProps {
  onSetupToken: () => void
}

export default function GitHubTokenWarning({ onSetupToken }: GitHubTokenWarningProps) {
  const [isDismissed, setIsDismissed] = useState(false)

  if (isDismissed) {
    return null
  }

  return (
    <Alert className="border-yellow-200 bg-yellow-50 dark:bg-yellow-900/20 dark:border-yellow-800 mb-6">
      <AlertTriangle className="h-4 w-4 text-yellow-600" />
      <AlertDescription className="flex items-center justify-between w-full">
        <div className="flex-1 pr-4">
          <div className="flex items-center gap-2 mb-2">
            <span className="font-medium text-yellow-800 dark:text-yellow-200">
              GitHub Token Not Configured
            </span>
            <Badge variant="outline" className="text-xs border-yellow-300 text-yellow-700">
              Limited Features
            </Badge>
          </div>
          
          <p className="text-sm text-yellow-700 dark:text-yellow-300 mb-3">
            Some features are disabled without a GitHub token. Set up your token to unlock:
          </p>
          
          <div className="grid grid-cols-1 sm:grid-cols-2 gap-2 mb-3">
            <div className="flex items-center gap-2 text-xs text-yellow-700 dark:text-yellow-300">
              <Trash2 className="w-3 h-3" />
              <span>Bulk Delete Repositories</span>
            </div>
            <div className="flex items-center gap-2 text-xs text-yellow-700 dark:text-yellow-300">
              <Zap className="w-3 h-3" />
              <span>Advanced Repository Management</span>
            </div>
            <div className="flex items-center gap-2 text-xs text-yellow-700 dark:text-yellow-300">
              <Github className="w-3 h-3" />
              <span>Private Repository Access</span>
            </div>
            <div className="flex items-center gap-2 text-xs text-yellow-700 dark:text-yellow-300">
              <Zap className="w-3 h-3" />
              <span>Real-time Repository Sync</span>
            </div>
          </div>
          
          <div className="flex items-center gap-2">
            <Button 
              onClick={onSetupToken}
              size="sm" 
              className="bg-yellow-600 hover:bg-yellow-700 text-white"
            >
              <Github className="w-3 h-3 mr-1" />
              Setup GitHub Token
            </Button>
            <Button 
              onClick={() => setIsDismissed(true)}
              variant="ghost" 
              size="sm"
              className="text-yellow-700 hover:text-yellow-800 hover:bg-yellow-100 dark:text-yellow-300 dark:hover:text-yellow-200 dark:hover:bg-yellow-800/30"
            >
              Dismiss
            </Button>
          </div>
        </div>
        
        <Button
          onClick={() => setIsDismissed(true)}
          variant="ghost"
          size="sm"
          className="text-yellow-600 hover:text-yellow-700 hover:bg-yellow-100 dark:text-yellow-400 dark:hover:text-yellow-300 dark:hover:bg-yellow-800/30 p-1"
        >
          <X className="w-4 h-4" />
        </Button>
      </AlertDescription>
    </Alert>
  )
}

</code>

components\navigation-error-boundary.tsx:
<code>
'use client'

import React from 'react'
import { Button } from '@/components/ui/button'
import { Alert, AlertDescription } from '@/components/ui/alert'
import { RefreshCw, Home } from 'lucide-react'

interface NavigationErrorBoundaryState {
  hasError: boolean
  error?: Error
}

interface NavigationErrorBoundaryProps {
  children: React.ReactNode
}

export class NavigationErrorBoundary extends React.Component<
  NavigationErrorBoundaryProps,
  NavigationErrorBoundaryState
> {
  constructor(props: NavigationErrorBoundaryProps) {
    super(props)
    this.state = { hasError: false }
  }

  static getDerivedStateFromError(error: Error): NavigationErrorBoundaryState {
    return { hasError: true, error }
  }

  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {
    console.error('🚨 Navigation Error Boundary caught an error:', error, errorInfo)
    
    // Send error details to console for debugging
    console.error('🔍 Error Details:', {
      message: error.message,
      stack: error.stack,
      name: error.name,
      componentStack: errorInfo.componentStack,
      errorBoundary: errorInfo.errorBoundary,
      timestamp: new Date().toISOString(),
      userAgent: typeof window !== 'undefined' ? window.navigator.userAgent : 'server',
      url: typeof window !== 'undefined' ? window.location.href : 'unknown'
    })
  }

  handleRefresh = () => {
    // Clear any cached data that might be causing issues
    localStorage.removeItem('github_repositories')
    localStorage.removeItem('github_repositories_time')
    
    // Reset error state and reload
    this.setState({ hasError: false })
    window.location.reload()
  }

  handleGoHome = () => {
    // Clear cached data and go to home
    localStorage.removeItem('github_repositories')
    localStorage.removeItem('github_repositories_time')
    window.location.href = '/'
  }

  render() {
    if (this.state.hasError) {
      return (
        <div className="min-h-screen flex items-center justify-center p-4">
          <div className="max-w-md w-full space-y-4">
            <Alert variant="destructive">
              <AlertDescription>
                Something went wrong with navigation. This might be due to browser back/forward 
                navigation or a temporary issue.
              </AlertDescription>
            </Alert>
            
            <div className="space-y-2">
              <Button 
                onClick={this.handleRefresh} 
                className="w-full"
                variant="default"
              >
                <RefreshCw className="mr-2 h-4 w-4" />
                Refresh Page
              </Button>
              
              <Button 
                onClick={this.handleGoHome} 
                className="w-full"
                variant="outline"
              >
                <Home className="mr-2 h-4 w-4" />
                Go to Home
              </Button>
            </div>
            
            {process.env.NODE_ENV === 'development' && (
              <details className="text-xs text-muted-foreground">
                <summary>Error Details (Development)</summary>
                <pre className="mt-2 p-2 bg-muted rounded text-xs overflow-auto">
                  {this.state.error?.stack}
                </pre>
              </details>
            )}
          </div>
        </div>
      )
    }

    return this.props.children
  }
}

</code>

components\oauth-debug.tsx:
<code>
"use client"

import { useState } from "react"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { supabase } from "@/lib/supabase"
import { AlertTriangle, CheckCircle, XCircle, RefreshCw } from "lucide-react"

export function OAuthDebug() {
  const [testResults, setTestResults] = useState<any>(null)
  const [isLoading, setIsLoading] = useState(false)

  const runDiagnostics = async () => {
    setIsLoading(true)
    const results: any = {
      timestamp: new Date().toISOString(),
      tests: {},
    }

    try {
      // Test 1: Environment Variables
      results.tests.envVars = {
        name: "Environment Variables",
        status: "success",
        details: {
          supabaseUrl: !!process.env.NEXT_PUBLIC_SUPABASE_URL,
          supabaseKey: !!process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY,
          urlValue: process.env.NEXT_PUBLIC_SUPABASE_URL?.substring(0, 20) + "...",
        },
      }

      // Test 2: Supabase Connection
      try {
        const { data, error } = await supabase.auth.getSession()
        results.tests.supabaseConnection = {
          name: "Supabase Connection",
          status: error ? "error" : "success",
          details: {
            connected: !error,
            session: !!data.session,
            error: error?.message,
          },
        }
      } catch (err) {
        results.tests.supabaseConnection = {
          name: "Supabase Connection",
          status: "error",
          details: { error: err instanceof Error ? err.message : "Unknown error" },
        }
      }

      // Test 3: GitHub OAuth Configuration
      try {
        // This will fail but we can catch the error to see if OAuth is configured
        await supabase.auth.signInWithOAuth({
          provider: "github",
          options: { redirectTo: "test" },
        })
      } catch (err: any) {
        results.tests.githubOAuth = {
          name: "GitHub OAuth Setup",
          status: err.message?.includes("not enabled") ? "error" : "warning",
          details: {
            configured: !err.message?.includes("not enabled"),
            error: err.message,
          },
        }
      }

      // Test 4: Network Connectivity
      try {
        const response = await fetch("https://api.github.com/", { method: "HEAD" })
        results.tests.networkConnectivity = {
          name: "Network Connectivity",
          status: response.ok ? "success" : "error",
          details: {
            githubApi: response.ok,
            status: response.status,
          },
        }
      } catch (err) {
        results.tests.networkConnectivity = {
          name: "Network Connectivity",
          status: "error",
          details: { error: err instanceof Error ? err.message : "Network error" },
        }
      }

      // Test 5: Browser Environment
      results.tests.browserEnv = {
        name: "Browser Environment",
        status: "success",
        details: {
          localStorage: typeof localStorage !== "undefined",
          sessionStorage: typeof sessionStorage !== "undefined",
          cookies: typeof document !== "undefined" && document.cookie !== undefined,
          https: window.location.protocol === "https:" || window.location.hostname === "localhost",
        },
      }

      setTestResults(results)
    } catch (error) {
      console.error("Diagnostics error:", error)
      results.tests.diagnosticsError = {
        name: "Diagnostics Error",
        status: "error",
        details: { error: error instanceof Error ? error.message : "Unknown error" },
      }
      setTestResults(results)
    } finally {
      setIsLoading(false)
    }
  }

  const getStatusIcon = (status: string) => {
    switch (status) {
      case "success":
        return <CheckCircle className="h-4 w-4 text-green-400" />
      case "warning":
        return <AlertTriangle className="h-4 w-4 text-yellow-400" />
      case "error":
        return <XCircle className="h-4 w-4 text-red-400" />
      default:
        return <RefreshCw className="h-4 w-4 text-gray-400" />
    }
  }

  const getStatusColor = (status: string) => {
    switch (status) {
      case "success":
        return "border-green-500/50 bg-green-900/20"
      case "warning":
        return "border-yellow-500/50 bg-yellow-900/20"
      case "error":
        return "border-red-500/50 bg-red-900/20"
      default:
        return "border-gray-500/50 bg-gray-900/20"
    }
  }

  return (
    <Card className="bg-gray-800/30 border-gray-700/50">
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <AlertTriangle className="h-5 w-5 text-yellow-400" />
          OAuth Diagnostics
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        <Button onClick={runDiagnostics} disabled={isLoading} className="w-full">
          {isLoading ? (
            <>
              <RefreshCw className="h-4 w-4 mr-2 animate-spin" />
              Running Diagnostics...
            </>
          ) : (
            "Run OAuth Diagnostics"
          )}
        </Button>

        {testResults && (
          <div className="space-y-3">
            <div className="text-sm text-gray-400">Last run: {new Date(testResults.timestamp).toLocaleString()}</div>

            {Object.entries(testResults.tests).map(([key, test]: [string, any]) => (
              <Card key={key} className={`${getStatusColor(test.status)} border`}>
                <CardContent className="p-4">
                  <div className="flex items-center justify-between mb-2">
                    <h4 className="font-semibold flex items-center gap-2">
                      {getStatusIcon(test.status)}
                      {test.name}
                    </h4>
                    <Badge variant={test.status === "success" ? "default" : "destructive"}>
                      {test.status.toUpperCase()}
                    </Badge>
                  </div>
                  <div className="text-sm space-y-1">
                    {Object.entries(test.details).map(([detailKey, value]: [string, any]) => (
                      <div key={detailKey} className="flex justify-between">
                        <span className="text-gray-400">{detailKey}:</span>
                        <span className={typeof value === "boolean" ? (value ? "text-green-400" : "text-red-400") : ""}>
                          {typeof value === "boolean" ? (value ? "✅" : "❌") : String(value)}
                        </span>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        )}
      </CardContent>
    </Card>
  )
}

</code>

components\theme-provider.tsx:
<code>
"use client"
import { ThemeProvider as NextThemesProvider } from "next-themes"
import type { ThemeProviderProps } from "next-themes"

export function ThemeProvider({ children, ...props }: ThemeProviderProps) {
  return (
    <NextThemesProvider attribute="class" defaultTheme="dark" enableSystem={false} {...props}>
      {children}
    </NextThemesProvider>
  )
}

</code>

components\theme-toggle.tsx:
<code>
"use client"
import { Moon, Sun } from "lucide-react"
import { useTheme } from "next-themes"

import { Button } from "@/components/ui/button"

export function ThemeToggle() {
  const { theme, setTheme } = useTheme()

  return (
    <Button
      variant="ghost"
      size="sm"
      onClick={() => setTheme(theme === "light" ? "dark" : "light")}
      className="text-gray-400 hover:text-white dark:text-gray-400 dark:hover:text-white"
    >
      <Sun className="h-4 w-4 rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0" />
      <Moon className="absolute h-4 w-4 rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100" />
      <span className="sr-only">Toggle theme</span>
    </Button>
  )
}

</code>

components\token-management.tsx:
<code>
import React, { useState } from 'react';
import { Settings, Trash2, Plus, AlertTriangle, CheckCircle, ExternalLink, ShieldAlert } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Alert, AlertDescription } from '@/components/ui/alert';
import GitHubTokenPopup from './github-token-popup';
import { useAuth } from './auth-provider';

export default function TokenManagement() {
  const { profile, updateToken, deleteToken, isTokenInvalid } = useAuth();
  const [showTokenPopup, setShowTokenPopup] = useState(false);
  const [isDeleting, setIsDeleting] = useState(false);
  const [showDeleteConfirm, setShowDeleteConfirm] = useState(false);
  const [isSubmitting, setIsSubmitting] = useState(false);

  const currentToken = profile?.github_pat_token;

  const handleDeleteToken = async () => {
    setIsDeleting(true);
    try {
      await deleteToken();
      setShowDeleteConfirm(false);
    } catch (error) {
      console.error('Error deleting token:', error);
    } finally {
      setIsDeleting(false);
    }
  };

  const handleTokenSubmit = async (token: string) => {
    setIsSubmitting(true);
    try {
      await updateToken(token);
      setShowTokenPopup(false);
    } catch (error) {
      console.error('Error updating token:', error);
    } finally {
      setIsSubmitting(false);
    }
  };

  const maskedToken = currentToken ? `${currentToken.substring(0, 8)}${'*'.repeat(32)}` : 'No token set';

  return (
    <>
      <Card className="w-full max-w-2xl">
        <CardHeader>
          <div className="flex items-center gap-2">
            <Settings className="h-5 w-5" />
            <CardTitle>GitHub Token Management</CardTitle>
          </div>
          <CardDescription>
            Manage your GitHub Personal Access Token for repository operations
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-6">
          {/* Current Token Status */}
          <div className="space-y-3">
            <h3 className="font-medium">Current Token Status</h3>
            {/* ✨ NEW DYNAMIC STATUS ALERT ✨ */}
            {isTokenInvalid && currentToken && (
              <Alert variant="destructive">
                <ShieldAlert className="h-4 w-4" />
                <AlertDescription>
                  Your saved token is invalid or has expired. Please delete it and generate a new one.
                </AlertDescription>
              </Alert>
            )}
            <div className="flex items-center justify-between p-3 bg-muted rounded-lg">
              <div className="flex items-center gap-3">
                {currentToken && !isTokenInvalid ? (
                  <CheckCircle className="h-5 w-5 text-green-500" />
                ) : (
                  <AlertTriangle className={`h-5 w-5 ${isTokenInvalid ? 'text-red-500' : 'text-yellow-500'}`} />
                )}
                <div>
                  <p className="font-mono text-sm">{maskedToken}</p>
                  <p className={`text-xs ${isTokenInvalid ? 'text-red-500' : 'text-muted-foreground'}`}>
                    {isTokenInvalid ? 'Token is invalid' : currentToken ? 'Token is active' : 'No token configured'}
                  </p>
                </div>
              </div>
              {currentToken && (
                <Button
                  variant="destructive"
                  size="sm"
                  onClick={() => setShowDeleteConfirm(true)}
                  disabled={isDeleting}
                >
                  <Trash2 className="h-4 w-4 mr-2" />
                  Delete
                </Button>
              )}
            </div>
          </div>

          {/* Token Permissions Check */}
          {currentToken && (
            <Alert>
              <AlertTriangle className="h-4 w-4" />
              <AlertDescription>
                <strong>Having issues with delete functionality?</strong> Your token might be missing required scopes. 
                Generate a new token with all required permissions.
              </AlertDescription>
            </Alert>
          )}

          {/* Action Buttons */}
          <div className="flex gap-3">
            <Button
              onClick={() => setShowTokenPopup(true)}
              className="flex-1"
              variant={currentToken ? "outline" : "default"}
            >
              <Plus className="h-4 w-4 mr-2" />
              {currentToken ? 'Update Token' : 'Add Token'}
            </Button>
            
            <Button
              variant="outline"
              onClick={() => window.open('https://github.com/settings/tokens', '_blank')}
            >
              <ExternalLink className="h-4 w-4 mr-2" />
              GitHub Settings
            </Button>
          </div>

          {/* Help Section */}
          <div className="bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg p-4">
            <h4 className="font-medium text-blue-800 dark:text-blue-200 mb-2">
              🔧 Token Issues? Common Solutions:
            </h4>
            <ul className="text-sm text-blue-700 dark:text-blue-300 space-y-1">
              <li>• <strong>Lost access after system update?</strong> Recent authentication improvements may require re-entering your PAT</li>
              <li>• <strong>Delete not working?</strong> Generate new token with all 4 scopes</li>
              <li>• <strong>Wrong scopes selected?</strong> Delete current token and create new one</li>
              <li>• <strong>Token expired?</strong> GitHub tokens can expire, create a fresh one</li>
              <li>• <strong>Permission denied?</strong> Make sure you have admin access to repositories</li>
            </ul>
          </div>

          {/* Recovery Notice */}
          {!currentToken && (
            <Alert className="border-amber-200 bg-amber-50 dark:bg-amber-900/20">
              <AlertTriangle className="h-4 w-4 text-amber-600" />
              <AlertDescription className="text-amber-800 dark:text-amber-200">
                <strong>Need to re-enter your PAT?</strong> Recent system improvements may have reset authentication settings.
                This is a one-time setup to restore your repository access. Your data is safe and secure.
              </AlertDescription>
            </Alert>
          )}
        </CardContent>
      </Card>

      {/* Delete Confirmation Dialog */}
      {showDeleteConfirm && (
        <div className="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50 backdrop-blur-sm">
          <div className="bg-card text-card-foreground rounded-lg shadow-lg p-6 max-w-md w-full mx-4">
            <div className="flex items-center gap-3 mb-4">
              <AlertTriangle className="h-6 w-6 text-red-500" />
              <h3 className="text-lg font-semibold">Delete GitHub Token</h3>
            </div>
            <p className="text-muted-foreground mb-6">
              Are you sure you want to delete your GitHub token? You'll need to add a new one to continue using repository features.
            </p>
            <div className="flex gap-3">
              <Button
                variant="outline"
                onClick={() => setShowDeleteConfirm(false)}
                className="flex-1"
              >
                Cancel
              </Button>
              <Button
                variant="destructive"
                onClick={handleDeleteToken}
                disabled={isDeleting}
                className="flex-1"
              >
                {isDeleting ? 'Deleting...' : 'Delete Token'}
              </Button>
            </div>
          </div>
        </div>
      )}

      {/* Token Popup */}
      {showTokenPopup && (
        <GitHubTokenPopup
          onTokenSubmit={handleTokenSubmit}
          isSubmitting={isSubmitting}
          onClose={() => setShowTokenPopup(false)}
          onSkip={() => setShowTokenPopup(false)}
        />
      )}
    </>
  );
}

</code>

components\token-warning-badge.tsx:
<code>
'use client'

import React from 'react'
import { AlertTriangle, Settings } from 'lucide-react'
import { useAuth } from '@/components/auth-provider'

export default function TokenWarningBadge() {
  const { hasToken, showTokenPopup } = useAuth()

  // Don't show if user has token
  if (hasToken) return null

  return (
    <div className="bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800 rounded-lg p-3 mb-4">
      <div className="flex items-start gap-3">
        <AlertTriangle className="h-5 w-5 text-yellow-600 dark:text-yellow-400 flex-shrink-0 mt-0.5" />
        <div className="flex-1">
          <h3 className="font-semibold text-yellow-800 dark:text-yellow-200 text-sm mb-1">
            GitHub Token Not Configured
          </h3>
          <p className="text-yellow-700 dark:text-yellow-300 text-xs mb-3">
            Some features like <strong>bulk delete</strong>, <strong>repository creation</strong>, and <strong>advanced operations</strong> will not function properly without a GitHub Personal Access Token.
          </p>
          <button
            onClick={showTokenPopup}
            className="inline-flex items-center gap-2 bg-yellow-600 hover:bg-yellow-700 text-white px-3 py-1.5 rounded-md text-xs font-medium transition-colors"
          >
            <Settings className="h-3 w-3" />
            Configure Token Now
          </button>
        </div>
      </div>
    </div>
  )
}

</code>

hooks\use-mobile.tsx:
<code>
import * as React from "react"

const MOBILE_BREAKPOINT = 768

export function useIsMobile() {
  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)

  React.useEffect(() => {
    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)
    const onChange = () => {
      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    }
    mql.addEventListener("change", onChange)
    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    return () => mql.removeEventListener("change", onChange)
  }, [])

  return !!isMobile
}

</code>

hooks\use-toast.ts:
<code>
"use client"

// Inspired by react-hot-toast library
import * as React from "react"

import type {
  ToastActionElement,
  ToastProps,
} from "@/components/ui/toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }

</code>

lib\ai\actions\.keep:
<code>

</code>

lib\ai\actions\analyzeComplexity.ts:
<code>
import { AIResponse, UserContext } from '../types';
import { analyzeRepositoryComplexity } from '../analysis/repositoryAnalysis';

export const handleAnalyzeComplexity = async (
  context: UserContext,
  params: { repoName: string }
): Promise<AIResponse> => {
  const repo = context.repositories.find(r => r.name === params.repoName);

  if (!repo) {
    const errorMessage = `Error: Repository "${params.repoName}" not found.`;
    console.error(errorMessage);
    return { message: errorMessage, success: false };
  }

  try {
    const { complexity, reasoning } = await analyzeRepositoryComplexity(
      repo,
      context.userProfile ?? null
    );

    const responseMessage = `The complexity of the repository **${params.repoName}** is **${complexity}**.\n\n*Reasoning:*\n${reasoning}`;

    return { message: responseMessage, success: true };
  } catch (error: any) {
    console.error(`Error analyzing complexity for repo "${params.repoName}":`, error);
    return {
      message: `Sorry, an error occurred while analyzing the repository: ${error.message}`,
      success: false,
    };
  }
};


</code>

lib\ai\actions\createFile.ts:
<code>
// lib/ai/actions/createFile.ts

import { AIResponse, UserContext } from '../types';
import { GitHubAPIService } from '../../github-api';

interface CreateFileParams {
  repoName: string;
  filePath: string;
  content: string;
  commitMessage?: string;
}

/**
 * Handles the creation of a new file in a GitHub repository.
 */
export async function handleCreateFile(
  context: UserContext,
  params: CreateFileParams
): Promise<AIResponse> {
  const { repoName, filePath, content, commitMessage } = params;
  const { githubAccessToken, githubUsername } = context;

  if (!repoName || !filePath || !content) {
    return {
      message: 'To create a file, I need a repository name, a file path, and the content.',
      success: false,
    };
  }

  if (!githubAccessToken || !githubUsername) {
    return {
      message: 'GitHub credentials are not configured. Please connect your GitHub account.',
      success: false,
    };
  }

  try {
    const githubAPI = new GitHubAPIService(githubAccessToken, githubUsername);
    const result = await githubAPI.createFile({
      owner: githubUsername,
      repo: repoName,
      path: filePath,
      content: content,
      message: commitMessage || `feat: create ${filePath}`,
    });

    if (result.success) {
      return {
        message: `Successfully created file! You can find it at: ${result.url}`,
        success: true,
        data: result.file,
      };
    } else {
      return {
        message: `Failed to create file: ${result.error}`,
        success: false,
      };
    }
  } catch (error: any) {
    console.error('Error creating file:', error);
    return {
      message: `An unexpected error occurred: ${error.message}`,
      success: false,
    };
  }
}

</code>

lib\ai\actions\createRepo.ts:
<code>
// lib/ai/actions/createRepo.ts

import { AIResponse, UserContext } from '../types';
import { GitHubAPIService } from '../../github-api';

/**
 * Handles the creation of a new GitHub repository.
 * 
 * @param context The user's context, including their profile and repositories.
 * @param params The parameters for the action, expecting a 'name' for the repository.
 * @returns An AIResponse indicating the result of the operation.
 */
export async function handleCreateRepo(
  context: UserContext,
  params: { name: string }
): Promise<AIResponse> {
  const { name } = params;
  const { githubAccessToken, githubUsername } = context;

  if (!name) {
    return {
      message: 'You need to provide a name for the new repository.',
      success: false,
    };
  }

  if (!githubAccessToken || !githubUsername) {
    return {
      message: 'GitHub credentials are not configured. Please connect your GitHub account.',
      success: false,
    };
  }

  try {
    const githubAPI = new GitHubAPIService(githubAccessToken, githubUsername);
    const result = await githubAPI.createRepository({ name });

    if (result.success) {
      return {
        message: `Successfully created repository! You can find it at: ${result.url}`,
        success: true,
        data: result.repository,
      };
    } else {
      return {
        message: `Failed to create repository: ${result.error}`,
        success: false,
      };
    }
  } catch (error: any) {
    console.error('Error creating repository:', error);
    return {
      message: `An unexpected error occurred: ${error.message}`,
      success: false,
    };
  }
}

</code>

lib\ai\actions\deleteRepo.ts:
<code>
// lib/ai/actions/deleteRepo.ts

import { AIResponse, UserContext } from '../types';
import { GitHubAPIService } from '../../github-api';

/**
 * Handles the deletion of a GitHub repository.
 */
export async function handleDeleteRepo(
  context: UserContext,
  params: { name: string }
): Promise<AIResponse> {
  const { name } = params;
  const { githubAccessToken, githubUsername } = context;

  if (!name) {
    return {
      message: 'You need to provide the name of the repository to delete.',
      success: false,
    };
  }

  if (!githubAccessToken || !githubUsername) {
    return {
      message: 'GitHub credentials are not configured. Please connect your GitHub account.',
      success: false,
    };
  }

  try {
    const githubAPI = new GitHubAPIService(githubAccessToken, githubUsername);
    const result = await githubAPI.deleteRepository({ owner: githubUsername, name });

    if (result.success) {
      return {
        message: `Successfully deleted repository "${name}".`,
        success: true,
      };
    } else {
      return {
        message: `Failed to delete repository: ${result.error}`,
        success: false,
      };
    }
  } catch (error: any) {
    console.error('Error deleting repository:', error);
    return {
      message: `An unexpected error occurred: ${error.message}`,
      success: false,
    };
  }
}

</code>

lib\ai\actions\handleGeneralResponse.ts:
<code>
// lib/ai/actions/handleGeneralResponse.ts
import { AIResponse, UserContext } from '../types';
import { geminiAI } from '@/lib/gemini';

export const handleGeneralResponse = async (context: UserContext, params: any): Promise<AIResponse> => {
    const { repositories } = context;
    const { analyzeRepos, isCriticMode } = params;

    // Guard clause: if not analyzing or no repos, return a helpful message.
    if (!analyzeRepos || !repositories || repositories.length === 0) {
        const helpMessage = `I can help with various repository tasks. For example, you can ask me to "analyze my repositories," "generate a portfolio README," or "recommend projects for a frontend developer job." What would you like to do?`;
        return { message: helpMessage, success: true };
    }

    try {
        const repoSummaries = repositories
            .filter(repo => !repo.fork) // Focus on original work
            .slice(0, 20) // Limit to a reasonable number to avoid huge prompts
            .map(r => `- ${r.name}: ${r.description || 'No description.'} (Lang: ${r.language || 'N/A'}, Stars: ${r.stargazers_count})`)
            .join('\n');

        const criticPrompt = isCriticMode
            ? "Your tone should be brutally honest, direct, and witty, like a senior engineer who has seen it all. Don't hold back on constructive criticism. Point out weaknesses bluntly."
            : "Your tone should be encouraging, professional, and helpful, like a friendly mentor. Focus on positive aspects and frame suggestions constructively.";

        const prompt = `
            As a senior engineering manager reviewing a developer's GitHub portfolio, provide a high-level analysis of the following repositories.
            ${criticPrompt}

            Based on this list of repositories:
            ${repoSummaries}

            Please provide:
            1.  **Overall Impression:** A brief, one-paragraph summary of the portfolio's strengths and weaknesses.
            2.  **Key Strengths:** 2-3 bullet points highlighting what this portfolio does well (e.g., language diversity, project complexity, clear focus).
            3.  **Top Areas for Improvement:** 2-3 actionable bullet points on what to improve next (e.g., add project descriptions, create more complex projects, add live demos).

            Keep the entire response concise and easy to read in a chat window.
        `;

        const analysisMessage = await geminiAI.generateResponse(prompt);

        return {
            message: analysisMessage,
            success: true,
        };
    } catch (error: any) {
        console.error("Error in handleGeneralResponse calling Gemini:", error);
        return {
            message: "I had some trouble analyzing your repositories right now. Please check if the AI integration is configured correctly and try again.",
            success: false,
        };
    }
};

</code>

lib\ai\actions\handleInterviewAnswer.ts:
<code>
// lib/ai/actions/handleInterviewAnswer.ts

import { AIResponse, UserContext, InterviewState } from '../types';

/**
 * Generates a personalized README from the interview answers.
 */
function generatePersonalReadme(answers: Record<string, string>, repositories: any[]): string {
  let readme = `# Hello, I'm `;
  
  // Extract name from the first answer
  const nameMatch = answers.name_and_passion?.match(/(?:I'm|I am|My name is|Call me)\s+([A-Za-z]+)/i);
  const name = nameMatch ? nameMatch[1] : 'a Developer';
  
  readme += `${name}! 👋\n\n`;
  
  // Add a dynamic intro based on their passion
  if (answers.name_and_passion) {
    const passionText = answers.name_and_passion.replace(/(?:I'm|I am|My name is|Call me)\s+[A-Za-z]+[,.]?\s*/i, '');
    readme += `## � What Drives Me\n\n${passionText}\n\n`;
  }
  
  // Add hobbies section
  if (answers.hobbies_and_interests) {
    readme += `## 🎯 Beyond the Code\n\nWhen I'm not crafting solutions in code, you'll find me ${answers.hobbies_and_interests.toLowerCase()}. I believe these experiences make me a more creative and well-rounded developer!\n\n`;
  }
  
  // Add coding journey
  if (answers.coding_journey) {
    readme += `## 🚀 My Coding Journey\n\n${answers.coding_journey}\n\n`;
  }

  // Add tech stack
  if (answers.tech_stack_and_preferences) {
    readme += `## 🛠️ My Tech Arsenal\n\n${answers.tech_stack_and_preferences}\n\n`;
  }

  // Add featured project
  if (answers.proudest_achievement) {
    readme += `## 🏆 Project I'm Most Proud Of\n\n${answers.proudest_achievement}\n\n`;
  }

  // Add problem solving approach
  if (answers.problem_solving_approach) {
    readme += `## 🧠 How I Tackle Challenges\n\n${answers.problem_solving_approach}\n\n`;
  }

  // Add collaboration style
  if (answers.collaboration_style) {
    readme += `## 🤝 Working Together\n\n${answers.collaboration_style}\n\n`;
  }

  // Add repository showcase
  if (repositories && repositories.length > 0) {
    readme += `## 📈 Featured Repositories\n\n`;
    const topRepos = repositories.slice(0, 6);
    topRepos.forEach(repo => {
      const stars = repo.stargazers_count > 0 ? ` ⭐ ${repo.stargazers_count}` : '';
      readme += `- **[${repo.name}](${repo.html_url})**${stars} - ${repo.description || 'A showcase of my development skills'}\n`;
    });
    readme += `\n`;
  }

  // Add future aspirations
  if (answers.future_dreams) {
    readme += `## 🌟 Future Aspirations\n\n${answers.future_dreams}\n\n`;
  }

  // Add contact footer
  readme += `## 📬 Let's Connect!\n\n`;
  readme += `I'm always excited to collaborate on interesting projects or discuss new opportunities. Feel free to reach out!\n\n`;
  
  // Add GitHub stats
  readme += `---\n\n`;
  readme += `### 📊 GitHub Stats\n\n`;
  readme += `![GitHub Stats](https://github-readme-stats.vercel.app/api?username=YOUR_USERNAME&show_icons=true&theme=radical)\n\n`;
  readme += `![Top Languages](https://github-readme-stats.vercel.app/api/top-langs/?username=YOUR_USERNAME&layout=compact&theme=radical)\n\n`;
  
  readme += `*This personalized README was crafted through an AI-powered interview with NeatRepo - showcasing not just my code, but who I am as a developer and person.* ✨`;

  return readme;
}


/**
 * Handles a user's answer during a portfolio interview.
 */
export async function handleInterviewAnswer(
  context: UserContext,
  params: { answer: string }
): Promise<AIResponse> {
  const { interviewState } = context;
  const { answer } = params;

  if (!interviewState || !interviewState.isActive) {
    return {
      message: "There's no interview currently active. Say 'start interview' to begin.",
      success: false,
    };
  }

  // Create a new state object to avoid direct mutation
  const newInterviewState: InterviewState = JSON.parse(JSON.stringify(interviewState));

  // Store the answer
  const currentQuestionId = newInterviewState.questions[newInterviewState.currentQuestion].id;
  newInterviewState.answers[currentQuestionId] = answer;

  // Move to the next question
  newInterviewState.currentQuestion++;

  // Check if the interview is complete
  if (newInterviewState.currentQuestion >= newInterviewState.questions.length) {
    newInterviewState.isActive = false;
    const personalReadme = generatePersonalReadme(newInterviewState.answers, context.repositories);
    
    return {
      message: `🎉 Interview Complete! I've generated your personalized README based on our conversation:

---

${personalReadme}`,
      success: true,
      data: { 
        interviewState: newInterviewState,
        portfolioReadme: personalReadme,
        interviewActive: false,
        progress: 100
      },
    };
  }

  // Ask the next question
  const nextQuestion = newInterviewState.questions[newInterviewState.currentQuestion];
  const progress = ((newInterviewState.currentQuestion + 1) / newInterviewState.questions.length) * 100;
  const questionNumber = newInterviewState.currentQuestion + 1;
  const totalQuestions = newInterviewState.questions.length;
  
  // Generate encouraging transition messages
  const encouragements = [
    "Thanks for sharing that! 😊",
    "Great insight! 🌟", 
    "Love hearing about that! 💫",
    "Awesome response! 🚀",
    "Fantastic! 🎯",
    "Really appreciate that perspective! ✨",
    "That's so interesting! 🤔"
  ];
  
  const randomEncouragement = encouragements[Math.floor(Math.random() * encouragements.length)];
  
  return {
    message: `${randomEncouragement}

**Question ${questionNumber} of ${totalQuestions}:**
${nextQuestion.question}`,
    success: true,
    data: { 
      interviewState: newInterviewState,
      interviewActive: true,
      progress: progress
    },
  };
}

</code>

lib\ai\actions\recommendCVRepos.ts:
<code>
// lib/ai/actions/recommendCVRepos.ts

import { AIResponse, UserContext } from '../types';
import { RepositorySorter } from '../../github-api';

/**
 * Handles generating CV recommendations based on repository analysis.
 */
export async function handleRecommendCVRepos(
  context: UserContext,
  params: {}
): Promise<AIResponse> {
  const { repositories } = context;

  if (!repositories || repositories.length === 0) {
    return {
      message: "I need to know about your repositories first. Please connect your GitHub account and refresh.",
      success: false,
    };
  }

  try {
    // Note: This assumes repositories have been analyzed for complexity beforehand.
    const recommendations = RepositorySorter.generateCVRecommendations(repositories);
    
    let message = "Here are my recommendations for your CV based on your repositories:\n\n";

    recommendations.forEach(rec => {
      message += `**${rec.title}**\n`;
      message += `${rec.description}\n`;
      if (rec.repositories) {
        rec.repositories.forEach((repo: any) => {
          message += `- **${repo.name}**: ${repo.reason}\n`;
        });
      }
      message += '\n';
    });

    return {
      message,
      success: true,
      data: recommendations,
    };
  } catch (error: any) {
    console.error('Error generating CV recommendations:', error);
    return {
      message: `An unexpected error occurred while generating CV recommendations: ${error.message}`,
      success: false,
    };
  }
}

</code>

lib\ai\actions\recommendReposForJob.ts:
<code>
// lib/ai/actions/recommendReposForJob.ts
import { AIResponse, UserContext } from '../types';
import { geminiAI } from '@/lib/gemini';
import { GitHubRepo } from '@/app/dashboard/types';

export const recommendReposForJob = async (context: UserContext, params: { jobTitle: string }): Promise<AIResponse> => {
    const { jobTitle } = params;
    const { repositories } = context;

    if (!jobTitle) {
        return { message: "Please provide a job title so I can recommend the best repositories.", success: false };
    }
    if (!repositories || repositories.length === 0) {
        return { message: "I need your repositories to be loaded to make a recommendation.", success: false };
    }

    const originalRepos = repositories.filter(repo => !repo.fork);

    if (originalRepos.length === 0) {
        return { message: "You don't have any original repositories. I can't make a recommendation without them.", success: true, data: { recommendedRepos: [] } };
    }

    const repoList = originalRepos.map(r =>
        `- Name: ${r.name}, Description: ${r.description || 'N/A'}, Language: ${r.language || 'N/A'}, Stars: ${r.stargazers_count}`
    ).join('\n');

    // More robust prompt asking for a specific format (JSON)
    const prompt = `
        Analyze the following list of GitHub repositories and select the top 4 most relevant projects for a person applying to a "${jobTitle}" position.

        Consider technical relevance (frameworks, languages), project complexity, and overall appeal to a recruiter for this specific role.

        Repositories:
        ${repoList}

        Respond ONLY with a JSON array of strings containing the exact names of the 4 recommended repositories. For example: ["repo-one", "project-x", "another-repo", "final-choice"]. Do not include any other text, explanation, or markdown formatting.
    `;

    try {
        const rawResponse = await geminiAI.generateResponse(prompt);
        let recommendedRepoNames: string[] = [];

        // More robust parsing logic to find and parse the JSON array
        try {
            const jsonMatch = rawResponse.match(/\[[\s\S]*?\]/);
            if (jsonMatch) {
                recommendedRepoNames = JSON.parse(jsonMatch[0]);
            } else {
                console.warn("AI response was not valid JSON, falling back to comma-separated parsing.");
                recommendedRepoNames = rawResponse.split(',').map(name => name.trim().replace(/["']/g, ''));
            }
        } catch (parseError) {
            console.error("Failed to parse AI response, falling back to simple split:", parseError);
            recommendedRepoNames = rawResponse.split(',').map(name => name.trim().replace(/["']/g, ''));
        }
        
        // Filter the original repo list to find the full objects using a precise match
        const recommendedRepos = recommendedRepoNames
            .map(name => originalRepos.find(repo => repo.name.toLowerCase() === name.toLowerCase()))
            .filter((repo): repo is GitHubRepo => repo !== undefined); // Type guard to filter out any undefined matches

        const finalRepos = recommendedRepos.slice(0, 4);
        
        if (finalRepos.length === 0) {
            return {
                message: `I couldn't confidently select relevant repositories for a "${jobTitle}" role. Here are your top repositories by stars instead:`,
                success: true,
                data: { 
                    recommendedRepos: originalRepos
                        .sort((a, b) => (b.stargazers_count || 0) - (a.stargazers_count || 0))
                        .slice(0, 4)
                }
            };
        }

        let message = `### 🎯 Job Template for: **${jobTitle}**\n\nHere are the **${finalRepos.length} most relevant repositories** to showcase for this position:\n\n`;
        
        finalRepos.forEach((repo, index) => {
            message += `**${index + 1}. ${repo.name}**\n`;
            message += `   • Language: ${repo.language || 'Multiple'}\n`;
            message += `   • Stars: ${repo.stargazers_count || 0}\n`;
            message += `   • ${repo.description || 'No description available'}\n\n`;
        });
        
        message += `💡 **Pro tip**: Update the README files of these repositories to highlight features most relevant to ${jobTitle} roles!`;

        return {
            message,
            success: true,
            data: { recommendedRepos: finalRepos },
        };
    } catch (error: any) {
        console.error("Error in recommendReposForJob calling Gemini:", error);
        return {
            message: "I had trouble analyzing your repositories for that job title. Please check if the AI integration is configured correctly and try again.",
            success: false,
        };
    }
};
</code>

lib\ai\actions\sortRepos.ts:
<code>
// lib/ai/actions/sortRepos.ts

import { AIResponse, UserContext } from '../types';
import { RepositorySorter } from '../../github-api';
import { GitHubRepo } from '@/app/dashboard/types';

/**
 * Handles sorting the user's repositories based on specified criteria.
 */
export async function handleSortRepos(
  context: UserContext,
  params: { criteria: 'complexity' | 'date'; order: 'asc' | 'desc' }
): Promise<AIResponse> {
  const { criteria, order } = params;
  const { repositories } = context;

  if (!repositories || repositories.length === 0) {
    return {
      message: "I don't have any repositories to sort. Please connect your GitHub account and refresh.",
      success: false,
    };
  }

  let sortedRepos: GitHubRepo[] = [];
  let sortDescription = '';

  try {
    if (criteria === 'complexity') {
      // The RepositorySorter expects repositories to have a 'complexity' object.
      // This is a placeholder for now, as complexity analysis is its own action.
      // In a real scenario, we'd fetch this data first if it's not already available.
      sortedRepos = RepositorySorter.sortByComplexity(repositories, order);
      sortDescription = `by complexity (${order === 'asc' ? 'Simple → Advanced' : 'Advanced → Simple'})`;
    } else {
      // Default to sorting by date (updated_at)
      sortedRepos = [...repositories].sort((a, b) => {
        const dateA = new Date(a.updated_at).getTime();
        const dateB = new Date(b.updated_at).getTime();
        return order === 'asc' ? dateA - dateB : dateB - dateA;
      });
      sortDescription = `by last update date (${order === 'asc' ? 'Oldest → Newest' : 'Newest → Oldest'})`;
    }

    const repoList = sortedRepos.map(repo => `- **${repo.name}**`).join('\n');

    return {
      message: `I have sorted your repositories ${sortDescription}:\n\n${repoList}`,
      success: true,
      data: sortedRepos,
    };
  } catch (error: any) {
    console.error('Error sorting repositories:', error);
    return {
      message: `An unexpected error occurred while sorting: ${error.message}`,
      success: false,
    };
  }
}

</code>

lib\ai\actions\startInterview.ts:
<code>
// lib/ai/actions/startInterview.ts

import { AIResponse, UserContext, InterviewQuestion } from '../types';

const interviewQuestions: InterviewQuestion[] = [
  {
    id: 'name_and_passion',
    question: 'Hi there! 👋 Let\'s start with the basics - what\'s your name, and what do you love most about coding? What makes you jump out of bed excited to write code?'
  },
  {
    id: 'hobbies_and_interests',
    question: 'Great! Now tell me, what do you do when you\'re not coding? Any hobbies, interests, or activities that fuel your creativity? I\'m curious about the person behind the programmer! 🎨'
  },
  {
    id: 'coding_journey',
    question: 'Love hearing about that! 🌟 Now, let\'s dive into your coding story - what sparked your journey into programming? Was there a particular moment or project that made you think "This is it, this is what I want to do"?'
  },
  {
    id: 'tech_stack_and_preferences',
    question: 'Fantastic journey! 🚀 What technologies or programming languages make you feel most at home? Are there any tools or frameworks you\'re particularly excited about or want to master?'
  },
  {
    id: 'proudest_achievement',
    question: 'Awesome choices! 💪 Looking at your repositories, which project makes you proudest? Tell me the story - what challenges did you overcome, what did you learn, and why does it mean so much to you?'
  },
  {
    id: 'problem_solving_approach',
    question: 'That\'s impressive! 🧠 Everyone has their unique approach to tackling tough problems. How do you usually approach a challenging bug or a complex feature? What\'s your problem-solving superpower?'
  },
  {
    id: 'collaboration_style',
    question: 'Smart approach! 🤝 Tell me about your collaboration style - do you prefer pair programming, code reviews, leading teams, or working solo? What brings out your best work in a team environment?'
  },
  {
    id: 'future_dreams',
    question: 'Perfect! 🌈 Finally, let\'s talk dreams and aspirations - where do you see yourself in the next few years? What kind of impact do you hope to make through your code? Any wild ideas or projects you\'d love to tackle?'
  }
];

/**
 * Handles starting a new portfolio interview.
 */
export async function handleStartInterview(
  context: UserContext,
  params: {}
): Promise<AIResponse> {
  
  // Initialize the interview state
  const newInterviewState = {
    isActive: true,
    currentQuestion: 0,
    questions: interviewQuestions,
    answers: {},
  };

  const firstQuestion = interviewQuestions[0];
  const progress = (1 / interviewQuestions.length) * 100;

  return {
    message: `🎉 Welcome to your Personal README Interview! 

This quick interview will help me create a personalized README that showcases not just your code, but YOU as a developer and person.

We'll go through ${interviewQuestions.length} fun questions that should take about 5-10 minutes. Ready? Let's dive in!

**Question 1 of ${interviewQuestions.length}:**
${firstQuestion.question}`,
    success: true,
    data: { 
      interviewState: newInterviewState,
      interviewActive: true,
      progress: progress
    },
  };
}

</code>

lib\ai\analysis\.keep:
<code>

</code>

lib\ai\analysis\repositoryAnalysis.ts:
<code>
// lib/ai/analysis/repositoryAnalysis.ts

import { Repository } from '@/lib/repository-sorter';
import { geminiAI } from '@/lib/gemini';
import { buildRepositoryAnalysisPrompt } from '../prompts/analysisPrompts';
import { UserProfile } from '../types';

/**
 * Analyzes a list of repositories for language stats and key highlights.
 */
export const analyzeRepositories = (repos: Repository[]) => {
  const languages: Record<string, number> = {};
  let totalStars = 0;
  let mostStarredRepo: Repository | null = null;
  let maxStars = -1;

  repos.forEach(repo => {
    if (repo.language) {
      languages[repo.language] = (languages[repo.language] || 0) + 1;
    }
    totalStars += repo.stargazers_count || 0;
    if ((repo.stargazers_count || 0) > maxStars) {
      maxStars = repo.stargazers_count || 0;
      mostStarredRepo = repo;
    }
  });

  const primaryLanguages = Object.entries(languages)
    .sort(([, a], [, b]) => b - a)
    .slice(0, 3)
    .map(([lang]) => lang);

  return {
    primaryLanguages,
    totalStars,
    mostStarredRepo,
    totalRepos: repos.length,
    languages
  };
};

/**
 * Gets the most recently updated projects from a list of repositories.
 */
export const getRecentProjects = (repos: Repository[], count: number = 3) => {
  return repos
    .filter(repo => !repo.private) // Exclude private repos for showcases
    .sort((a, b) => new Date(b.updated_at).getTime() - new Date(a.updated_at).getTime())
    .slice(0, count);
};

/**
 * Analyzes the complexity of a repository.
 */
export async function analyzeRepositoryComplexity(repo: Repository, userProfile: UserProfile | null): Promise<{ complexity: string, reasoning: string }> {
  const prompt = buildRepositoryAnalysisPrompt(repo, userProfile);
  const response = await geminiAI.generateResponse(prompt);
  const text = response;

  // Simple parsing, assuming the model returns "Complexity: [level]\nReasoning: [text]"
  const complexityMatch = text.match(/Complexity:\s*(.*)/);
  const reasoningMatch = text.match(/Reasoning:\s*([\s\S]*)/);

  const complexity = complexityMatch ? complexityMatch[1].trim() : 'Could not determine';
  const reasoning = reasoningMatch ? reasoningMatch[1].trim() : 'No reasoning provided.';

  return { complexity, reasoning };
}

</code>

lib\ai\prompts\.keep:
<code>

</code>

lib\ai\prompts\analysisPrompts.ts:
<code>
// lib/ai/prompts/analysisPrompts.ts

import { Repository } from '@/lib/repository-sorter';
import { UserProfile } from '../types';

export function buildRepositoryAnalysisPrompt(
  repo: Repository,
  userProfile: UserProfile | null
): string {
  let prompt = `🧠 **Repository Analysis Request**

You are a helpful AI assistant that helps developers improve their GitHub repositories before applying for internships or jobs.

The user will provide you a repository's structure and basic information. Based on this, your task is to analyze and give specific feedback across the following categories:

---

📁 **Repository Name**: ${repo.name || "Unknown"}
📝 **Description**: ${repo.description || "No description provided"}
📂 **Primary Language**: ${repo.language || "Unknown"}
⭐ **Stars**: ${repo.stargazers_count || 0}
🍴 **Forks**: ${repo.forks_count || 0}
🔗 **Repository URL**: ${repo.html_url || "Not available"}

`;

  if (userProfile) {
    prompt += '🧑‍💻 **User Profile**:\n';
    if (userProfile.bio) {
      prompt += `- Bio: ${userProfile.bio}\n`;
    }
    if (userProfile.techStack && userProfile.techStack.length > 0) {
      prompt += `- Tech stack: ${userProfile.techStack.join(', ')}\n`;
    }
    if (userProfile.interests && userProfile.interests.length > 0) {
      prompt += `- Interests: ${userProfile.interests.join(', ')}\n`;
    }
  }

  prompt += `
---

Return your analysis in **markdown** format with the following sections:

## ✅ What This Project Does
- Short summary of what the project is about (in 1-2 sentences)

## 🔍 How Recruiters Might See It
- Review from the perspective of a hiring manager or tech recruiter

## 🧹 Suggestions to Improve This Repo
- Documentation (e.g. missing sections?)
- File/folder structure (e.g. too deep, unclear names?)
- Code quality hints (if possible)
- Deployment and demo recommendations

## 🧠 How to Include This in Your Resume
- One-sentence resume bullet point in STAR format
- Tips to describe it during interview

## ⭐ Final Portfolio Score
- Give a rating from 1-10 based on how job-ready this repo is
- Brief explanation of the score

Keep the tone friendly but professional.`;

  return prompt;
}

</code>

lib\ai\types.ts:
<code>
// lib/ai/types.ts

import { GitHubRepo } from "@/app/dashboard/types";

// The context of the user, including their repos, preferences, and chat history
export interface UserProfile {
  name?: string;
  bio?: string;
  techStack?: string[];
  interests?: string[];
}

// Represents a single entry in the conversation history
export interface ConversationEntry {
  role: 'user' | 'assistant';
  content: string;
  timestamp: Date;
}

// The context of the user, including their repos, preferences, and chat history
export interface InterviewQuestion {
  id: string;
  question: string;
}

export interface InterviewState {
  isActive: boolean;
  currentQuestion: number;
  questions: InterviewQuestion[];
  answers: Record<string, string>;
}

export interface UserContext {
  repositories: GitHubRepo[];
  conversationHistory: ConversationEntry[];
  preferences: Record<string, any>;
  userProfile?: UserProfile | null;
  githubAccessToken?: string;
  githubUsername?: string;
  interviewState?: InterviewState;
}

// The action parsed from the user's message
export interface AIAction {
  type: string;
  intent: string;
  parameters: any;
  confidence: number;
}

// The response from the AI after executing an action
export interface AIResponse {
  message: string;
  success: boolean;
  action?: AIAction;
  data?: any;
}

</code>

lib\auth\profile-service.ts:
<code>
/**
 * Performs a lightweight check with the GitHub API to see if a token is valid.
 * @param token - The GitHub PAT to validate.
 * @returns {Promise<boolean>} - True if the token is valid, false otherwise.
 */
export const validateTokenService = async (token: string): Promise<boolean> => {
  try {
    console.log("🔍 PROFILE_SERVICE: Validating PAT with GitHub API...");
    const response = await fetch("https://api.github.com/user", {
      headers: {
        Authorization: `token ${token}`,
        Accept: "application/vnd.github.v3+json",
      },
    });

    if (response.status === 200) {
      console.log("✅ PROFILE_SERVICE: PAT is valid.");
      return true;
    }

    console.warn(`⚠️ PROFILE_SERVICE: PAT is invalid. GitHub API responded with ${response.status}.`);
    return false;

  } catch (error) {
    console.error("❌ PROFILE_SERVICE: Error during token validation network request:", error);
    return false; // Assume invalid on any network error
  }
};

import { supabase } from "@/lib/supabase";
import { User } from "@supabase/supabase-js";
import { UserProfile } from "@/components/auth/auth-context";


/**
 * Fetches a user's profile by calling our secure, server-side API route.
 * @param userId - The ID of the user.
 * @param user - The full Supabase user object.
 * @returns The user's profile.
 */
export const fetchProfileService = async (userId: string, user: User): Promise<UserProfile> => {
  try {
    console.log("🔍 PROFILE_SERVICE: Fetching profile via API route for user:", userId);
    
    const response = await fetch('/api/user/profile', { cache: 'no-store' }); // Ensure it's not cached

    if (!response.ok) {
      throw new Error(`API call failed with status: ${response.status}`);
    }

    const data: UserProfile | null = await response.json();

    if (data) {
      console.log("✅ PROFILE_SERVICE: Profile fetched successfully via API.");
      if (data.github_pat_token?.startsWith('gho_')) {
        data.github_pat_token = undefined;
      }
      return data;
    }

    // API returned null, meaning profile doesn't exist yet. Create it.
    console.log('🔧 PROFILE_SERVICE: Profile not found via API, creating a new one...');
    const githubUsername = user.user_metadata?.user_name || user.email?.split('@')[0] || `user_${userId.substring(0, 8)}`;
    const newProfile: UserProfile = {
      id: userId,
      github_username: githubUsername,
      display_name: user.user_metadata?.full_name || user.user_metadata?.name,
      avatar_url: user.user_metadata?.avatar_url,
    };

    const { error: insertError } = await supabase.from('user_profiles').insert(newProfile);
    if (insertError) {
      console.error("❌ PROFILE_SERVICE: Error creating profile after API check:", insertError);
    } else {
      console.log("✅ PROFILE_SERVICE: New basic profile created successfully.");
    }
    return newProfile;

  } catch (err) {
    console.error('❌ PROFILE_SERVICE: Fetch/create failed. Building fallback profile.', err);

    const fallbackProfile: UserProfile = {
      id: userId,
      github_username: user.user_metadata?.user_name || 'user',
      avatar_url: user.user_metadata?.avatar_url,
      display_name: user.user_metadata?.full_name || user.user_metadata?.name,
    };

    if (typeof window !== 'undefined') {
        const cachedPat = localStorage.getItem(`github_pat_token_${userId}`);
        if (cachedPat && !cachedPat.startsWith('gho_')) {
            console.log('🔄 PROFILE_SERVICE: Recovering PAT from localStorage for fallback profile.');
            fallbackProfile.github_pat_token = cachedPat;
        }
    }
    return fallbackProfile;
  }
};

/**
 * Updates or inserts a user's GitHub Personal Access Token (PAT) in the database.
 * @param userId - The ID of the user.
 * @param token - The GitHub PAT to save.
 */
export const updateTokenService = async (userId: string, token: string): Promise<void> => {
  console.log('💾 PROFILE_SERVICE: Saving PAT for user:', userId);

  const { error } = await supabase
    .from('user_profiles')
    .update({ github_pat_token: token, updated_at: new Date().toISOString() })
    .eq('id', userId);

  if (error) {
    console.error('❌ PROFILE_SERVICE: Error updating token:', error);
    throw error;
  }
  
  console.log('✅ PROFILE_SERVICE: PAT saved to database successfully.');
};

/**
 * Deletes a user's GitHub Personal Access Token (PAT) from the database.
 * @param userId - The ID of the user.
 */
export const deleteTokenService = async (userId: string): Promise<void> => {
  console.log('🗑️ PROFILE_SERVICE: Deleting PAT for user:', userId);

  const { error } = await supabase
    .from('user_profiles')
    .update({ github_pat_token: null, updated_at: new Date().toISOString() })
    .eq('id', userId);

  if (error) {
    console.error('❌ PROFILE_SERVICE: Error deleting token:', error);
    throw error;
  }
  
  console.log('✅ PROFILE_SERVICE: PAT deleted from database successfully.');
};
</code>

lib\ai-assistant.ts:
<code>
import { AIAction, AIResponse, UserContext, ConversationEntry } from './ai/types';

// Action Handlers
import { handleAnalyzeComplexity } from './ai/actions/analyzeComplexity';
import { handleGeneralResponse } from './ai/actions/handleGeneralResponse';
import { recommendReposForJob } from './ai/actions/recommendReposForJob';
import { handleCreateRepo } from './ai/actions/createRepo';
import { handleCreateFile } from './ai/actions/createFile';
import { handleDeleteRepo } from './ai/actions/deleteRepo';
import { handleSortRepos } from './ai/actions/sortRepos';
import { handleRecommendCVRepos } from './ai/actions/recommendCVRepos';
import { handleStartInterview } from './ai/actions/startInterview';
import { handleInterviewAnswer } from './ai/actions/handleInterviewAnswer';

// A map of action names to their handler functions
const actionHandlers: {
  [key: string]: (context: UserContext, params: any) => Promise<AIResponse>;
} = {
  create_repo: handleCreateRepo,
  create_file: handleCreateFile,
  delete_repo: handleDeleteRepo,
  sort_repos: handleSortRepos,
  recommend_cv_repos: handleRecommendCVRepos,
  start_interview: handleStartInterview,
  handle_interview_answer: handleInterviewAnswer,
  analyze_complexity: handleAnalyzeComplexity,
  recommend_repos_for_job: recommendReposForJob,
  general_response: handleGeneralResponse,
};

/**
 * A simple intent parser based on keywords.
 * This is a placeholder and can be replaced with a more sophisticated NLU/NLP service.
 * @param message The user's message.
 * @returns An AIAction object representing the detected intent.
 */
function parseIntent(message: string, context: UserContext): AIAction {
  const lowerMessage = message.toLowerCase();

  // If an interview is active, treat any message as an answer.
  if (context.interviewState?.isActive) {
    return {
      type: 'handle_interview_answer',
      intent: 'User is answering an interview question.',
      parameters: { answer: message },
      confidence: 1.0, // Highest confidence because it's a stateful override
    };
  }

  if (lowerMessage.includes('create') && lowerMessage.includes('file')) {
    const fileMatch = message.match(/create a file named ['"]?([^'"\s]+)['"]?/i);
    const repoMatch = message.match(/in (?:repo|repository) ['"]?([^'"\s]+)['"]?/i);
    const contentMatch = message.match(/with content ['"](.*)['"]/i);

    const filePath = fileMatch ? fileMatch[1] : '';
    const repoName = repoMatch ? repoMatch[1] : '';
    const content = contentMatch ? contentMatch[1] : `// ${filePath} created by NeatRepo AI`;

    return {
      type: 'create_file',
      intent: 'User wants to create a new file in a repository.',
      parameters: { repoName, filePath, content },
      confidence: 0.9,
    };
  }

  if (lowerMessage.includes('start') && lowerMessage.includes('interview')) {
    return {
      type: 'start_interview',
      intent: 'User wants to start the portfolio interview.',
      parameters: {},
      confidence: 0.95,
    };
  }

  if ((lowerMessage.includes('cv') || lowerMessage.includes('resume')) && lowerMessage.includes('recommend')) {
    return {
      type: 'recommend_cv_repos',
      intent: 'User wants CV recommendations for their repositories.',
      parameters: {},
      confidence: 0.9,
    };
  }

  if (lowerMessage.includes('sort') && lowerMessage.includes('repos')) {
    let criteria: 'complexity' | 'date' = 'date';
    let order: 'asc' | 'desc' = 'desc';

    if (lowerMessage.includes('complexity')) {
      criteria = 'complexity';
    }

    if (lowerMessage.includes('asc') || lowerMessage.includes('simple to complex') || lowerMessage.includes('oldest')) {
      order = 'asc';
    }

    return {
      type: 'sort_repos',
      intent: 'User wants to sort repositories.',
      parameters: { criteria, order },
      confidence: 0.9,
    };
  }

  if (lowerMessage.includes('delete') && lowerMessage.includes('repo')) {
    const nameMatch = message.match(/(?:delete|remove) (?:repo|repository) ['"]?([^'"\s]+)['"]?/i);
    const repoName = nameMatch ? nameMatch[1] : '';
    return {
      type: 'delete_repo',
      intent: 'User wants to delete a repository.',
      parameters: { name: repoName },
      confidence: 0.9,
    };
  }

  if (lowerMessage.includes('create') && lowerMessage.includes('repo')) {
    const nameMatch = message.match(/(?:named?|called)\s+['"]?([^'"\s]+)['"]?/i);
    const repoName = nameMatch ? nameMatch[1] : '';
    return {
      type: 'create_repo',
      intent: 'User wants to create a new repository.',
      parameters: { name: repoName },
      confidence: 0.9,
    };
  }

  if (lowerMessage.includes('analyze') && lowerMessage.includes('complexity')) {
    // Extract repo name if available, e.g., "analyze complexity of my-repo"
    const repoNameMatch = lowerMessage.match(/of (.*?)$/);
    const repoName = repoNameMatch ? repoNameMatch[1].trim() : '';
    return {
      type: 'analyze_complexity',
      intent: 'User wants to analyze repository complexity.',
      parameters: { repoName }, // Pass repoName to handler
      confidence: 0.8,
    };
  }

  if (lowerMessage.includes('recommend') && (lowerMessage.includes('job') || lowerMessage.includes('position'))) {
    const jobTitleMatch = lowerMessage.match(/for (?:a |an )?(.*?)(?:\s+position|$)/);
    const jobTitle = jobTitleMatch ? jobTitleMatch[1].trim() : 'developer';
    return {
      type: 'recommend_repos_for_job',
      intent: 'User wants repository recommendations for a job application.',
      parameters: { jobTitle },
      confidence: 0.8,
    };
  }

  if (lowerMessage.includes('generate') && lowerMessage.includes('personal') && lowerMessage.includes('readme')) {
    return {
      type: 'start_interview',
      intent: 'User wants to generate a personal README through interview.',
      parameters: {},
      confidence: 0.95,
    };
  }

  if (lowerMessage.includes('generate') && lowerMessage.includes('portfolio') && lowerMessage.includes('readme')) {
    return {
      type: 'start_interview',
      intent: 'User wants to generate a portfolio README through interview.',
      parameters: {},
      confidence: 0.9,
    };
  }

  if (lowerMessage.includes('analyze') || lowerMessage.includes('structure') || lowerMessage.includes('suggestions') || lowerMessage.includes('improve') || lowerMessage.includes('think') || lowerMessage.includes('opinion')) {
    return {
      type: 'general_response',
      intent: 'User wants analysis or suggestions about their repositories.',
      parameters: { 
        originalMessage: message, 
        analyzeRepos: true,
        isCriticMode: context.preferences?.isCriticMode || false
      },
      confidence: 0.7,
    };
  }

  return {
    type: 'general_response',
    intent: 'General query or fallback.',
    parameters: { originalMessage: message },
    confidence: 0.5,
  };
}

export class AIAssistant {
  private static instance: AIAssistant;
  private userContext: UserContext;
  private conversationHistory: ConversationEntry[] = [];

  private constructor() {
    this.userContext = {
      repositories: [],
      githubUsername: undefined,
      githubAccessToken: undefined,
      conversationHistory: [],
      interviewState: undefined,
      preferences: {},
      userProfile: null,
    };
  }

  public static getInstance(): AIAssistant {
    if (!AIAssistant.instance) {
      AIAssistant.instance = new AIAssistant();
    }
    return AIAssistant.instance;
  }

  public updateUserContext(updates: Partial<UserContext>) {
    this.userContext = { ...this.userContext, ...updates };
  }

  public getContext(): UserContext {
    return this.userContext;
  }

  private addToConversationHistory(entry: ConversationEntry) {
    this.userContext.conversationHistory.push(entry);
  }

  public async processMessage(message: string): Promise<AIResponse> {
    this.addToConversationHistory({
      role: 'user',
      content: message,
      timestamp: new Date(),
    });

    const detectedAction = parseIntent(message, this.userContext);
    const handler = actionHandlers[detectedAction.type];

    if (!handler) {
      const errorResponse: AIResponse = {
        message: `Error: Action "${detectedAction.type}" is not supported.`,
        success: false,
      };
      this.addToConversationHistory({ role: 'assistant', content: errorResponse.message, timestamp: new Date() });
      return errorResponse;
    }

    try {
      const response = await handler(this.userContext, detectedAction.parameters);

      // Check if the action returned a state update for the interview
      if (response.data?.interviewState) {
        this.userContext.interviewState = response.data.interviewState;
      }

      this.addToConversationHistory({
        role: 'assistant',
        content: response.message,
        timestamp: new Date(),
      });

      return response;
    } catch (error: any) {
      console.error(`Error processing action "${detectedAction.type}":`, error);
      const errorResponse: AIResponse = {
        message: `Sorry, an error occurred: ${error.message}`,
        success: false,
      };
      this.addToConversationHistory({ role: 'assistant', content: errorResponse.message, timestamp: new Date() });
      return errorResponse;
    }
  }
}

// Singleton instance of the AI assistant, initialized with empty context.
export const aiAssistant = AIAssistant.getInstance();

</code>

lib\gemini.ts:
<code>
// Gemini AI integration using Gemini 2.5 Flash
import { GoogleGenerativeAI } from "@google/generative-ai"

interface ChatMessage {
  role: "user" | "assistant"
  content: string
}

export class GeminiAI {
  private apiKey: string
  private genAI: GoogleGenerativeAI
  private model: any

  constructor() {
    this.apiKey = process.env.NEXT_PUBLIC_GEMINI_API_KEY || ""
    if (!this.apiKey) {
      throw new Error("NEXT_PUBLIC_GEMINI_API_KEY environment variable is required")
    }

    this.genAI = new GoogleGenerativeAI(this.apiKey)
    // Using configurable Gemini model with environment-based settings
    this.model = this.genAI.getGenerativeModel({
      model: process.env.GEMINI_MODEL || "gemini-2.5-flash",
      generationConfig: {
        temperature: parseFloat(process.env.GEMINI_TEMPERATURE || "0.7"),
        topP: parseFloat(process.env.GEMINI_TOP_P || "0.8"),
        topK: parseInt(process.env.GEMINI_TOP_K || "40"),
        maxOutputTokens: parseInt(process.env.GEMINI_MAX_TOKENS || "8192"),
      },
    })
  }

  async generateResponse(
    message: string,
    conversationHistory: ChatMessage[] = [],
    systemPrompt?: string,
    signal?: AbortSignal,
  ): Promise<string> {
    try {
      // Build conversation context
      let prompt = ""

      if (systemPrompt) {
        prompt += `${systemPrompt}\n\n`
      }

      // Add conversation history
      if (conversationHistory.length > 0) {
        prompt += "Previous conversation:\n"
        conversationHistory.forEach((msg) => {
          prompt += `${msg.role === "user" ? "Human" : "Assistant"}: ${msg.content}\n`
        })
        prompt += "\n"
      }

      prompt += `Human: ${message}\nAssistant:`

      const result = await this.model.generateContent(prompt, { signal })
      const response = await result.response
      const text = response.text()

      if (!text) {
        throw new Error("Empty response from Gemini API")
      }

      return text
    } catch (error) {
      console.error("Gemini AI Error:", error)
      throw new Error(`Failed to generate response: ${error instanceof Error ? error.message : "Unknown error"}`)
    }
  }

  async analyzeRepository(
    repoData: any,
    userProfile?: {
      targetJob?: string
      techStack?: string
      userNotes?: string
    },
  ) {
    const prompt = this.buildRepositoryAnalysisPrompt(repoData, userProfile)

    try {
      const response = await this.generateResponse(
        prompt,
        [],
        "You are a helpful AI assistant that helps developers improve their GitHub repositories before applying for internships or jobs. Always respond in markdown format with the exact sections requested.",
      )

      // Try to parse structured response, fallback to raw response if parsing fails
      try {
        return {
          analysis: response,
          suggestions: this.extractSuggestionsFromAnalysis(response),
          score: this.extractScoreFromAnalysis(response),
          resumeBullet: this.extractResumeBulletFromAnalysis(response),
        }
      } catch {
        return {
          analysis: response,
          suggestions: [
            {
              type: "analysis",
              title: "Repository Analysis",
              description: response,
              priority: "medium",
            },
          ],
          score: 75,
          resumeBullet: `Built ${repoData.name} using ${repoData.language || "modern technologies"} with focus on clean code architecture and user experience.`,
        }
      }
    } catch (error) {
      console.error("Repository analysis error:", error)
      throw new Error("Failed to analyze repository")
    }
  }

  private buildRepositoryAnalysisPrompt(
    repoData: any,
    userProfile?: {
      targetJob?: string
      techStack?: string
      userNotes?: string
    },
  ): string {
    return `🧠 **Repository Analysis Request**

You are a helpful AI assistant that helps developers improve their GitHub repositories before applying for internships or jobs.

The user will provide you a repository's structure and basic information. Based on this, your task is to analyze and give specific feedback across the following categories:

---

📁 **Repository Name**: ${repoData.name || "Unknown"}
📝 **Description**: ${repoData.description || "No description provided"}
📂 **Primary Language**: ${repoData.language || "Unknown"}
⭐ **Stars**: ${repoData.stargazers_count || 0}
🍴 **Forks**: ${repoData.forks_count || 0}
🔗 **Repository URL**: ${repoData.html_url || "Not available"}

🧑‍💻 **User Profile**:
- Target job: ${userProfile?.targetJob || "General software development"} (e.g. frontend dev, fullstack intern, ML engineer)
- Tech stack: ${userProfile?.techStack || "Not specified"} (e.g. React, TypeScript, Python, FastAPI)
- Notes: ${userProfile?.userNotes || "No additional notes"}

---

Return your analysis in **markdown** format with the following sections:

## ✅ What This Project Does
- Short summary of what the project is about (in 1-2 sentences)

## 🔍 How Recruiters Might See It
- Review from the perspective of a hiring manager or tech recruiter

## 🧹 Suggestions to Improve This Repo
- Documentation (e.g. missing sections?)
- File/folder structure (e.g. too deep, unclear names?)
- Code quality hints (if possible)
- Deployment and demo recommendations

## 🧠 How to Include This in Your Resume
- One-sentence resume bullet point in STAR format  
- Tips to describe it during interview

## ⭐ Final Portfolio Score
- Give a rating from 1-10 based on how job-ready this repo is
- Brief explanation of the score

Keep the tone friendly but professional.

**Example Output Format:**

### ✅ What This Project Does
A grammar correction web app that uses OpenAI GPT API to detect and fix typos in English text. Users paste input and see fixes in real time.

### 🔍 How Recruiters Might See It
This is a solid showcase of frontend + AI integration. The use of GPT adds uniqueness, and the tech stack (React + TypeScript) is aligned with modern frontend roles. README is decent, but could use deployment link and example screenshots.

### 🧹 Suggestions to Improve This Repo
- Add live demo link on Vercel
- Include before/after grammar example in README
- Add unit tests for grammar fixing component
- Rename \`api/\` to \`services/\` for clarity
- Improve folder grouping (move utils under \`lib/\`)

### 🧠 How to Include This in Your Resume
> 🛠 Built a grammar correction web app using React and GPT API, enabling real-time feedback for over 300+ users, with clean TypeScript architecture.

Tip: In interviews, emphasize the API integration challenge and how you handled prompt engineering.

### ⭐ Final Portfolio Score
**7.5 / 10** — Good tech stack, cool idea, just missing polish (demos, tests, better README).`
  }

  private extractSuggestionsFromAnalysis(analysis: string): any[] {
    const suggestions = []
    const lines = analysis.split("\n")
    let inSuggestionsSection = false

    for (const line of lines) {
      if (line.includes("🧹") && line.includes("Suggestions")) {
        inSuggestionsSection = true
        continue
      }

      if (inSuggestionsSection && line.startsWith("###")) {
        inSuggestionsSection = false
        break
      }

      if (inSuggestionsSection && line.trim().startsWith("-")) {
        const suggestion = line.trim().substring(1).trim()
        if (suggestion) {
          suggestions.push({
            type: "improvement",
            title: suggestion.split(" ")[0] || "Improvement",
            description: suggestion,
            priority: "medium",
          })
        }
      }
    }

    return suggestions.length > 0
      ? suggestions
      : [
          {
            type: "general",
            title: "Code Review Needed",
            description: "Consider adding more documentation and examples",
            priority: "medium",
          },
        ]
  }

  private extractScoreFromAnalysis(analysis: string): number {
    const scoreMatch = analysis.match(/(\d+(?:\.\d+)?)\s*\/\s*10/)
    if (scoreMatch) {
      return Number.parseFloat(scoreMatch[1]) * 10 // Convert to 100-point scale
    }
    return 75 // Default score
  }

  private extractResumeBulletFromAnalysis(analysis: string): string {
    const lines = analysis.split("\n")
    let inResumeSection = false

    for (const line of lines) {
      if (line.includes("🧠") && line.includes("Resume")) {
        inResumeSection = true
        continue
      }

      if (inResumeSection && line.startsWith("###")) {
        inResumeSection = false
        break
      }

      if (inResumeSection && line.trim().startsWith(">")) {
        return line.trim().substring(1).trim()
      }
    }

    return "Built a comprehensive application showcasing modern development practices and clean architecture."
  }

  async generateReadme(repoData: any) {
    const prompt = `Generate a comprehensive README.md for this GitHub repository:
    
    Repository: ${repoData.name}
    Description: ${repoData.description}
    Language: ${repoData.language}
    
    Include sections for:
    - Project description
    - Features
    - Installation
    - Usage
    - Contributing
    - License
    
    Make it professional and informative.`

    try {
      return await this.generateResponse(
        prompt,
        [],
        "You are a technical writer creating professional README documentation.",
      )
    } catch (error) {
      console.error("README generation error:", error)
      // Fallback README
      return `# ${repoData.name}

${repoData.description || "A project built with modern technologies."}

## Installation

\`\`\`bash
git clone ${repoData.clone_url || ""}
cd ${repoData.name}
npm install
\`\`\`

## Usage

Please refer to the documentation for usage instructions.

## Contributing

Contributions are welcome! Please feel free to submit a Pull Request.

## License

This project is licensed under the MIT License.`
    }
  }

  async analyzeRepositoryDetailed(
    repoData: any,
    options?: {
      readmeContent?: string
      folderStructure?: string
      userProfile?: {
        targetJob?: string
        techStack?: string
        userNotes?: string
      }
    },
  ) {
    const prompt = `🧠 **Detailed Repository Analysis Request**

You are a helpful AI assistant that helps developers improve their GitHub repositories before applying for internships or jobs.

The user will provide you a repository's structure and basic information like the README content. Based on this, your task is to analyze and give specific feedback across the following categories:

---

📁 **Repository Name**: ${repoData.name || "Unknown"}
📝 **README.md Content**: 
${options?.readmeContent || "No README content provided"}

📂 **Folder Structure**:
${options?.folderStructure || "No folder structure provided"}

🔗 **Repository Details**:
- Description: ${repoData.description || "No description"}
- Language: ${repoData.language || "Unknown"}
- Stars: ${repoData.stargazers_count || 0}
- Forks: ${repoData.forks_count || 0}
- URL: ${repoData.html_url || "Not available"}

🧑‍💻 **User Profile**:
- Target job: ${options?.userProfile?.targetJob || "General software development"} (e.g. frontend dev, fullstack intern, ML engineer)
- Tech stack: ${options?.userProfile?.techStack || "Not specified"} (e.g. React, TypeScript, Python, FastAPI)
- Notes: ${options?.userProfile?.userNotes || "No additional notes"}

---

Return your analysis in **markdown** format with the following sections:

## ✅ What This Project Does
- Short summary of what the project is about (in 1-2 sentences)

## 🔍 How Recruiters Might See It
- Review from the perspective of a hiring manager or tech recruiter
- Alignment with target job role

## 🧹 Suggestions to Improve This Repo
- Documentation improvements (missing sections, clarity issues)
- File/folder structure recommendations
- Code quality and organization hints
- Deployment and demo suggestions
- Missing features or enhancements

## 🧠 How to Include This in Your Resume
- One-sentence resume bullet point in STAR format (Situation, Task, Action, Result)
- Tips to describe it during interview
- Key technical skills to highlight

## ⭐ Final Portfolio Score
- Give a rating from 1-10 based on how job-ready this repo is
- Brief explanation of the score with specific areas for improvement

Keep the tone friendly but professional. Be specific and actionable in your suggestions.`

    try {
      const response = await this.generateResponse(
        prompt,
        [],
        "You are a senior software engineer and technical recruiter helping developers improve their GitHub portfolios for job applications. Always respond in clean markdown format.",
      )

      return {
        analysis: response,
        suggestions: this.extractSuggestionsFromAnalysis(response),
        score: this.extractScoreFromAnalysis(response),
        resumeBullet: this.extractResumeBulletFromAnalysis(response),
        recruitersView: this.extractRecruitersViewFromAnalysis(response),
      }
    } catch (error) {
      console.error("Detailed repository analysis error:", error)
      throw new Error("Failed to analyze repository in detail")
    }
  }

  private extractRecruitersViewFromAnalysis(analysis: string): string {
    const lines = analysis.split("\n")
    let inRecruitersSection = false
    let content = ""

    for (const line of lines) {
      if (line.includes("🔍") && line.includes("Recruiters")) {
        inRecruitersSection = true
        continue
      }

      if (inRecruitersSection && line.startsWith("##")) {
        break
      }

      if (inRecruitersSection && line.trim()) {
        content += line.trim() + " "
      }
    }

    return (
      content.trim() || "This repository shows good technical skills and would be interesting to potential employers."
    )
  }

  async generateCommitMessage(changes: string[]) {
    const prompt = `Generate a clear, conventional commit message for these changes:
    
    Changes:
    ${changes.join("\n")}
    
    Follow conventional commit format (feat:, fix:, docs:, etc.)`

    try {
      return await this.generateResponse(
        prompt,
        [],
        "You are a developer creating conventional commit messages. Keep them concise and clear.",
      )
    } catch (error) {
      console.error("Commit message generation error:", error)
      return "feat: update project files and documentation"
    }
  }
}

export const geminiAI = new GeminiAI()

</code>

lib\github-api.ts:
<code>
// GitHub API Integration for Real Actions
import { Octokit } from "@octokit/rest";

export interface CreateRepoParams {
  name: string;
  description?: string;
  private?: boolean;
  auto_init?: boolean;
  gitignore_template?: string;
  license_template?: string;
}

export interface CreateFileParams {
  owner: string;
  repo: string;
  path: string;
  content: string;
  message: string;
  branch?: string;
}

interface DeleteRepoParams {
  owner: string;
  name: string;
}

export interface RepositoryComplexity {
  score: number;
  factors: {
    languages: number;
    fileCount: number;
    dependencies: number;
    architecture: number;
    documentation: number;
  };
  level: 'Simple' | 'Intermediate' | 'Complex' | 'Advanced';
  reasoning: string;
}

export class GitHubAPIService {
  private octokit: Octokit;
  private username: string;

  constructor(accessToken: string, username: string) {
    this.octokit = new Octokit({
      auth: accessToken,
    });
    this.username = username;
  }

  // 🚀 CREATE NEW REPOSITORY
  async createRepository(params: CreateRepoParams) {
    try {
      console.log(`🚀 Creating repository: ${params.name}`);

      // Test if octokit is properly initialized
      console.log('🔍 Testing Octokit instance:', typeof this.octokit);
      console.log('🔍 Testing rest property:', typeof this.octokit.rest);
      console.log('🔍 Testing repos property:', typeof this.octokit.rest?.repos);

      const response = await this.octokit.request('POST /user/repos', {
        name: params.name,
        description: params.description || `Repository created by NeatRepo`,
        private: params.private || false,
        auto_init: params.auto_init || true,
        gitignore_template: params.gitignore_template,
        license_template: params.license_template,
      });

      console.log(`✅ Repository created: ${response.data.html_url}`);
      return {
        success: true,
        repository: response.data,
        url: response.data.html_url,
      };
    } catch (error: any) {
      console.error('❌ Failed to create repository:', error);
      return {
        success: false,
        error: error.message || 'Failed to create repository',
      };
    }
  }

  // 📄 CREATE FILE IN REPOSITORY
  async createFile(params: CreateFileParams) {
    try {
      console.log(`📄 Creating file: ${params.path} in ${params.owner}/${params.repo}`);
      
      const content = Buffer.from(params.content).toString('base64');
      
      const response = await this.octokit.rest.repos.createOrUpdateFileContents({
        owner: params.owner,
        repo: params.repo,
        path: params.path,
        message: params.message,
        content: content,
        branch: params.branch || 'main',
      });

      console.log(`✅ File created: ${response.data.content?.html_url}`);
      return {
        success: true,
        file: response.data,
        url: response.data.content?.html_url,
      };
    } catch (error: any) {
      console.error('❌ Failed to create file:', error);
      return {
        success: false,
        error: error.message || 'Failed to create file',
      };
    }
  }

  // 🗑️ DELETE REPOSITORY
  async deleteRepository(params: DeleteRepoParams) {
    try {
      console.log(`🗑️ Deleting repository: ${params.owner}/${params.name}`);

      const response = await this.octokit.request('DELETE /repos/{owner}/{repo}', {
        owner: params.owner,
        repo: params.name,
      });

      console.log(`✅ Repository deleted: ${params.owner}/${params.name}`);
      return {
        success: true,
        message: `Repository ${params.name} has been permanently deleted`,
      };
    } catch (error: any) {
      console.error('❌ Failed to delete repository:', error);
      return {
        success: false,
        error: error.message || 'Failed to delete repository',
      };
    }
  }

  // 🧠 ANALYZE REPOSITORY COMPLEXITY
  async analyzeRepositoryComplexity(owner: string, repo: string): Promise<RepositoryComplexity> {
    try {
      console.log(`🧠 Analyzing complexity for: ${owner}/${repo}`);

      // Get repository details
      const repoData = await this.octokit.rest.repos.get({ owner, repo });
      
      // Get languages
      const languages = await this.octokit.rest.repos.listLanguages({ owner, repo });
      
      // Get repository contents
      const contents = await this.octokit.rest.repos.getContent({ 
        owner, 
        repo, 
        path: '' 
      });

      // Calculate complexity factors
      const languageCount = Object.keys(languages.data).length;
      const fileCount = Array.isArray(contents.data) ? contents.data.length : 1;
      
      // Check for package.json, requirements.txt, etc.
      let dependencyComplexity = 0;
      if (Array.isArray(contents.data)) {
        const hasPackageJson = contents.data.some(file => file.name === 'package.json');
        const hasRequirements = contents.data.some(file => file.name === 'requirements.txt');
        const hasCargoToml = contents.data.some(file => file.name === 'Cargo.toml');
        const hasPomXml = contents.data.some(file => file.name === 'pom.xml');
        
        dependencyComplexity = [hasPackageJson, hasRequirements, hasCargoToml, hasPomXml]
          .filter(Boolean).length * 2;
      }

      // Check for documentation
      const hasReadme = Array.isArray(contents.data) && 
        contents.data.some(file => file.name.toLowerCase().includes('readme'));
      const documentationScore = hasReadme ? 2 : 0;

      // Calculate architecture complexity (based on folder structure)
      const architectureScore = fileCount > 10 ? 3 : fileCount > 5 ? 2 : 1;

      // Calculate total complexity score
      const factors = {
        languages: languageCount,
        fileCount: Math.min(fileCount / 5, 5), // Normalize to max 5
        dependencies: dependencyComplexity,
        architecture: architectureScore,
        documentation: documentationScore,
      };

      const totalScore = Object.values(factors).reduce((sum, score) => sum + score, 0);
      
      // Determine complexity level
      let level: RepositoryComplexity['level'];
      let reasoning: string;

      if (totalScore <= 5) {
        level = 'Simple';
        reasoning = 'Basic project with minimal dependencies and straightforward structure';
      } else if (totalScore <= 10) {
        level = 'Intermediate';
        reasoning = 'Well-structured project with moderate complexity and dependencies';
      } else if (totalScore <= 15) {
        level = 'Complex';
        reasoning = 'Advanced project with multiple technologies and sophisticated architecture';
      } else {
        level = 'Advanced';
        reasoning = 'Highly complex project with extensive dependencies and advanced patterns';
      }

      console.log(`✅ Complexity analysis complete: ${level} (${totalScore})`);

      return {
        score: totalScore,
        factors,
        level,
        reasoning,
      };
    } catch (error: any) {
      console.error('❌ Failed to analyze repository complexity:', error);
      return {
        score: 0,
        factors: {
          languages: 0,
          fileCount: 0,
          dependencies: 0,
          architecture: 0,
          documentation: 0,
        },
        level: 'Simple',
        reasoning: 'Unable to analyze repository complexity',
      };
    }
  }

  // 📊 GET USER REPOSITORIES WITH COMPLEXITY
  async getRepositoriesWithComplexity() {
    try {
      console.log(`📊 Fetching repositories with complexity analysis...`);
      
      const repos = await this.octokit.rest.repos.listForAuthenticatedUser({
        sort: 'updated',
        per_page: 100,
      });

      const repositoriesWithComplexity = await Promise.all(
        repos.data.map(async (repo) => {
          const complexity = await this.analyzeRepositoryComplexity(repo.owner.login, repo.name);
          return {
            ...repo,
            complexity,
          };
        })
      );

      console.log(`✅ Analyzed ${repositoriesWithComplexity.length} repositories`);
      return repositoriesWithComplexity;
    } catch (error: any) {
      console.error('❌ Failed to fetch repositories with complexity:', error);
      throw new Error('Failed to analyze repositories');
    }
  }
}

// 🎯 REPOSITORY SORTING UTILITIES
export class RepositorySorter {
  static sortByComplexity(repositories: any[], order: 'asc' | 'desc' = 'asc') {
    return repositories.sort((a, b) => {
      const scoreA = a.complexity?.score || 0;
      const scoreB = b.complexity?.score || 0;
      return order === 'asc' ? scoreA - scoreB : scoreB - scoreA;
    });
  }

  static sortForCV(repositories: any[]) {
    // Sort repositories in optimal order for CV:
    // 1. Complex/Advanced projects first
    // 2. Well-documented projects
    // 3. Recent projects
    // 4. Projects with good naming
    
    return repositories.sort((a, b) => {
      // Primary: Complexity score (higher first)
      const complexityDiff = (b.complexity?.score || 0) - (a.complexity?.score || 0);
      if (complexityDiff !== 0) return complexityDiff;
      
      // Secondary: Documentation (has README)
      const aHasReadme = a.complexity?.factors?.documentation > 0 ? 1 : 0;
      const bHasReadme = b.complexity?.factors?.documentation > 0 ? 1 : 0;
      const docDiff = bHasReadme - aHasReadme;
      if (docDiff !== 0) return docDiff;
      
      // Tertiary: Recent updates
      const aDate = new Date(a.updated_at).getTime();
      const bDate = new Date(b.updated_at).getTime();
      return bDate - aDate;
    });
  }

  static generateCVRecommendations(repositories: any[]) {
    const sorted = this.sortForCV(repositories);
    const recommendations = [];

    // Top 5 repositories for CV
    const topRepos = sorted.slice(0, 5);
    
    recommendations.push({
      type: 'cv_order',
      title: '🎯 Recommended CV Order',
      description: 'These repositories should be featured prominently on your CV',
      repositories: topRepos.map((repo, index) => ({
        position: index + 1,
        name: repo.name,
        reason: this.getRecommendationReason(repo, index),
        complexity: repo.complexity?.level || 'Unknown',
      })),
    });

    // Improvement suggestions
    const improvements = this.generateImprovementSuggestions(repositories);
    recommendations.push(...improvements);

    return recommendations;
  }

  private static getRecommendationReason(repo: any, position: number): string {
    const complexity = repo.complexity?.level || 'Unknown';
    const hasReadme = repo.complexity?.factors?.documentation > 0;
    
    if (position === 0) {
      return `Lead project - ${complexity} complexity showcases your technical skills`;
    } else if (complexity === 'Advanced' || complexity === 'Complex') {
      return `Demonstrates advanced technical capabilities (${complexity})`;
    } else if (hasReadme) {
      return `Well-documented project shows professionalism`;
    } else {
      return `Recent project demonstrates current activity`;
    }
  }

  private static generateImprovementSuggestions(repositories: any[]) {
    const suggestions = [];
    
    // Check for repositories without README
    const noReadme = repositories.filter(repo => 
      repo.complexity?.factors?.documentation === 0
    );
    
    if (noReadme.length > 0) {
      suggestions.push({
        type: 'improvement',
        title: '📝 Add Documentation',
        description: 'These repositories would benefit from README files',
        repositories: noReadme.slice(0, 3).map(repo => ({
          name: repo.name,
          suggestion: 'Add a comprehensive README with project description, setup instructions, and usage examples',
        })),
      });
    }

    return suggestions;
  }
}

</code>

lib\repository-manager.ts:
<code>
// ULTRA-FAST repository manager - TARGET: 1-3 SECOND LOADING 🚀

// Custom error for invalid GitHub tokens
export class InvalidTokenError extends Error {
  constructor(message: string) {
    super(message);
    this.name = 'InvalidTokenError';
  }
}
class RepositoryManager {
  private static instance: RepositoryManager;
  private repositories: any[] = [];
  private lastFetch: number = 0;
  private isInitialized: boolean = false;
  private listeners: Set<(repos: any[]) => void> = new Set();
  private streamingListeners: Set<(repo: any) => void> = new Set();
  private isFetching: boolean = false;
  private loadingStartTime: number = 0;

  private constructor() {
    this.loadFromCache();
  }

  static getInstance(): RepositoryManager {
    if (!RepositoryManager.instance) {
      RepositoryManager.instance = new RepositoryManager();
    }
    return RepositoryManager.instance;
  }

  private loadFromCache(userId?: string) {
    // Skip on server side
    if (typeof window === 'undefined') return false;

    try {
      // Try user-specific cache first, then fall back to global cache
      const cacheKey = userId ? `github_repositories_${userId}` : 'github_repositories';
      const timeKey = userId ? `github_repositories_time_${userId}` : 'github_repositories_time';

      const cached = localStorage.getItem(cacheKey);
      const cacheTime = localStorage.getItem(timeKey);

      if (cached && cacheTime) {
        const timeSinceCache = Date.now() - parseInt(cacheTime);
        // 🚀 IMPROVED UX: Only use cache if very recent (5 minutes) for better freshness
        if (timeSinceCache < 300000) { // 5 minutes instead of 1 hour
          this.repositories = JSON.parse(cached);
          this.lastFetch = parseInt(cacheTime);
          this.isInitialized = true;
          console.log(`⚡ SINGLETON: Loaded ${this.repositories.length} repositories from ${userId ? 'user-specific' : 'global'} cache (${Math.round(timeSinceCache/1000)}s old)`);
          this.notifyListeners();
          return true;
        } else {
          console.log(`🔄 SINGLETON: Cache is stale (${Math.round(timeSinceCache/60000)} minutes old), will fetch fresh data`);
        }
      }
    } catch (error) {
      console.log('📁 SINGLETON: Cache load failed:', error);
    }
    return false;
  }

  private saveToCache(userId?: string) {
    // Skip on server side
    if (typeof window === 'undefined') return;

    try {
      // Save to user-specific cache if userId provided, otherwise global cache
      const cacheKey = userId ? `github_repositories_${userId}` : 'github_repositories';
      const timeKey = userId ? `github_repositories_time_${userId}` : 'github_repositories_time';

      localStorage.setItem(cacheKey, JSON.stringify(this.repositories));
      localStorage.setItem(timeKey, Date.now().toString());
      this.lastFetch = Date.now();
      console.log(`💾 SINGLETON: Repositories cached to ${userId ? 'user-specific' : 'global'} storage`);
    } catch (error) {
      console.log('📁 SINGLETON: Cache save failed:', error);
    }
  }

  private notifyListeners() {
    this.listeners.forEach(listener => listener([...this.repositories]));
  }

  subscribe(listener: (repos: any[]) => void): () => void {
    this.listeners.add(listener);
    // Immediately provide current data
    listener([...this.repositories]);
    
    return () => {
      this.listeners.delete(listener);
    };
  }

  getRepositories(): any[] {
    return [...this.repositories];
  }

  // Add streaming listener for real-time updates
  addStreamingListener(listener: (repo: any) => void): () => void {
    this.streamingListeners.add(listener);
    return () => {
      this.streamingListeners.delete(listener);
    };
  }

  private notifyStreamingListeners(repo: any) {
    this.streamingListeners.forEach(listener => {
      try {
        listener(repo);
      } catch (error) {
        console.error('🚨 SINGLETON: Streaming listener error:', error);
      }
    });
  }

  async fetchRepositories(token: string, forceRefresh = false, userId?: string): Promise<void> {
    // CRITICAL DEBUG: Log token information (safely)
    console.log('🔑 SINGLETON: Starting fetch with token:', {
      hasToken: !!token,
      tokenLength: token?.length,
      tokenPrefix: token?.substring(0, 7) + '...',
      forceRefresh
    });

    // Validate token before proceeding – if missing, try public-repo fallback instead of hard-erroring
    if (!token || token.trim() === '') {
      console.warn(' SINGLETON: No GitHub token – attempting public-repo fallback');

      // If we have the GitHub username cached we can still show public repos (read-only)
      if (typeof window !== 'undefined') {
        const cachedUsername =
          (userId ? localStorage.getItem(`github_username_${userId}`) : null) ||
          localStorage.getItem('github_username');

        if (cachedUsername) {
          try {
            const res = await fetch(`https://api.github.com/users/${cachedUsername}/repos?per_page=100`);
            if (res.ok) {
              this.repositories = await res.json();
              console.log(` SINGLETON: Loaded public repos for ${cachedUsername} (count: ${this.repositories.length})`);
              this.saveToCache(userId);
              this.notifyListeners();
              return; // Success – no token required
            }
            console.error(' SINGLETON: Public-repo fetch failed', res.status);
          } catch (publicErr) {
            console.error(' SINGLETON: Exception during public-repo fetch', publicErr);
          }
        }
      }

      // Still no data – propagate original error
      throw new Error('No GitHub token available for repository access');
    }

    // IMPROVED UX: Always fetch fresh data unless explicitly using cache
    // Only skip if we have recent data (less than 5 minutes old) and not forced
    if (!forceRefresh && this.repositories.length > 0) {
      const timeSinceLastFetch = Date.now() - this.lastFetch;
      if (timeSinceLastFetch < 300000) { // 5 minutes
        console.log(' SINGLETON: Using recent data, INSTANT LOAD!');
        console.log('⚡ SINGLETON: Using recent data, INSTANT LOAD!');
        return;
      } else {
        console.log('🔄 SINGLETON: Data is stale, fetching fresh repositories...');
      }
    }

    // Prevent multiple simultaneous fetches
    if (this.isFetching) {
      console.log('⏳ SINGLETON: Fetch already in progress');
      return;
    }

    this.isFetching = true;
    this.loadingStartTime = Date.now();

    try {
      console.log('🚀 SINGLETON: ULTRA-FAST FETCH STARTING...');

      // PARALLEL REQUESTS for maximum speed
      console.log('🌐 SINGLETON: Making parallel GitHub API requests...');
      const [userRepos, starredRepos] = await Promise.allSettled([
        fetch("https://api.github.com/user/repos?sort=updated&per_page=50", {
          headers: {
            Authorization: `token ${token}`,
            Accept: "application/vnd.github.v3+json",
          },
        }),
        fetch("https://api.github.com/user/starred?per_page=20", {
          headers: {
            Authorization: `token ${token}`,
            Accept: "application/vnd.github.v3+json",
          },
        })
      ]);

      // ✨ MODIFICATION: Check for 401 Unauthorized on userRepos
      if (userRepos.status === 'fulfilled' && userRepos.value.status === 401) {
        // If the token is invalid, throw our specific error
        throw new InvalidTokenError('The provided GitHub PAT is invalid, expired, or lacks repo scope.');
      }

      console.log('🌐 SINGLETON: API requests completed:', {
        userReposStatus: userRepos.status,
        starredReposStatus: starredRepos.status
      });

      let repos: any[] = [];

      // Process user repos
      if (userRepos.status === 'fulfilled' && userRepos.value.ok) {
        const userReposData = await userRepos.value.json();
        repos = userReposData;

        // STREAMING: Notify as data arrives
        userReposData.forEach((repo: any, index: number) => {
          setTimeout(() => {
            this.notifyStreamingListeners(repo);
          }, index * 10); // Stagger for smooth streaming effect
        });
      }

      const fetchTime = Date.now() - this.loadingStartTime;

      console.log(`🚀 ULTRA-FAST: Loaded ${repos.length} repositories in ${fetchTime}ms`);

      // PERFORMANCE METRICS
      if (fetchTime < 1000) {
        console.log('🏆 PERFORMANCE: SUB-1-SECOND LOADING ACHIEVED!');
      } else if (fetchTime < 2000) {
        console.log('⚡ PERFORMANCE: SUB-2-SECOND LOADING!');
      } else if (fetchTime < 3000) {
        console.log('✅ PERFORMANCE: SUB-3-SECOND LOADING!');
      }

      this.repositories = repos;
      this.lastFetch = Date.now();
      this.isInitialized = true;
      this.saveToCache(userId);
      this.notifyListeners();

    } catch (error) {
      console.error('❌ SINGLETON: Fetch error:', error);

      // 🚨 CRITICAL DEBUG: Log detailed error information
      if (error instanceof Error) {
        console.error('❌ SINGLETON: Error details:', {
          message: error.message,
          name: error.name,
          stack: error.stack
        });
      }

      // Check if it's a token-related error
      if (error instanceof InvalidTokenError) {
        console.error('🔑 SINGLETON: Token appears to be invalid or expired');
        // Clear cached data for invalid tokens
        this.clearCache();
      }

      // Fallback to cached data if available
      if (this.repositories.length > 0) {
        console.log('🔄 SINGLETON: Using cached data as fallback');
        this.notifyListeners();
      } else {
        // If no cached data, ensure listeners are still notified with empty array
        console.log('🔄 SINGLETON: No cached data available, notifying with empty state');
        this.notifyListeners();
      }
      throw error;
    } finally {
      this.isFetching = false;
      console.log('🔄 SINGLETON: Fetch operation completed, isFetching reset to false');
    }
  }

  isDataAvailable(): boolean {
    return this.repositories.length > 0;
  }

  getLastFetchTime(): number {
    return this.lastFetch;
  }

  async deleteRepository(token: string, owner: string, repoName: string): Promise<boolean> {
    try {
      const response = await fetch(`https://api.github.com/repos/${owner}/${repoName}`, {
        method: 'DELETE',
        headers: {
          'Authorization': `token ${token}`,
          'Accept': 'application/vnd.github.v3+json'
        },
      });

      if (response.status === 204) {
        console.log(`RepositoryManager: Successfully deleted ${owner}/${repoName}`);
        return true;
      } else {
        const errorData = await response.json();
        console.error(`RepositoryManager: Failed to delete ${owner}/${repoName}:`, errorData.message);
        return false;
      }
    } catch (error) {
      console.error(`RepositoryManager: Error during fetch for deleting ${owner}/${repoName}:`, error);
      return false;
    }
  }

  // 🎯 YOUTUBE-STYLE: Enhanced background sync with long-term resilience
  async backgroundSync(token: string): Promise<void> {
    console.log('🔄 SINGLETON: Background sync starting...');
    
    try {
      // Test token validity first before attempting sync
      const tokenTest = await fetch("https://api.github.com/user", {
        headers: {
          Authorization: `token ${token}`,
          Accept: "application/vnd.github.v3+json",
        },
      });

      if (!tokenTest.ok) {
        if (tokenTest.status === 401) {
          console.error('🔑 SINGLETON: GitHub token expired or invalid');
          // Clear cached data if token is invalid
          this.clearCache();
          throw new Error('GitHub token expired');
        }
        throw new Error(`GitHub API error: ${tokenTest.status}`);
      }

      // If we have stale data (older than 1 hour), force refresh
      const timeSinceLastFetch = Date.now() - this.lastFetch;
      const forceRefresh = timeSinceLastFetch > 3600000; // 1 hour
      
      if (forceRefresh) {
        console.log('🔄 SINGLETON: Data is very stale (>1h), forcing refresh...');
      }

      await this.fetchRepositories(token, forceRefresh);
      console.log('✅ SINGLETON: Background sync completed successfully');
    } catch (error) {
      console.error('❌ SINGLETON: Background sync failed:', error);
      
      // If sync fails but we have cached data, keep using it
      if (this.repositories.length > 0) {
        console.log('🔄 SINGLETON: Using cached data due to sync failure');
        this.notifyListeners();
      }
    }
  }

  // Clear cache method for token expiry scenarios
  private clearCache(userId?: string): void {
    if (typeof window !== 'undefined') {
      if (userId) {
        localStorage.removeItem(`github_repositories_${userId}`);
        localStorage.removeItem(`github_repositories_time_${userId}`);
        console.log(`🗑️ SINGLETON: User-specific cache cleared for ${userId}`);
      } else {
        localStorage.removeItem('github_repositories');
        localStorage.removeItem('github_repositories_time');
        console.log('🗑️ SINGLETON: Global cache cleared due to token issues');
      }
    }
  }
}

export const repositoryManager = RepositoryManager.getInstance();

</code>

lib\repository-sorter.ts:
<code>
// Repository Sorting and Complexity Analysis Engine
export interface Repository {
  id: number;
  name: string;
  full_name: string;
  description?: string;
  language?: string;
  stargazers_count: number;
  forks_count: number;
  updated_at: string;
  created_at: string;
  html_url: string;
  size?: number;
  open_issues_count?: number;
  has_issues?: boolean;
  has_projects?: boolean;
  has_wiki?: boolean;
  archived?: boolean;
  disabled?: boolean;
  pushed_at?: string;
  complexity?: RepositoryComplexity;
  topics?: string[];
  private?: boolean;
  owner?: {
    login: string;
    avatar_url: string;
  };
}

export interface RepositoryComplexity {
  score: number;
  level: 'Simple' | 'Intermediate' | 'Complex' | 'Advanced';
  factors: string[];
  reasoning: string;
}

export interface CVRecommendation {
  title: string;
  description: string;
  repositories?: Repository[];
  priority: number;
}

export class RepositorySorter {
  // 🧮 CALCULATE REPOSITORY COMPLEXITY
  static calculateComplexity(repo: Repository): RepositoryComplexity {
    let score = 0;
    const factors: string[] = [];

    // Language complexity scoring
    const languageScores: Record<string, number> = {
      'TypeScript': 4,
      'JavaScript': 3,
      'Python': 3,
      'Java': 4,
      'C++': 5,
      'C#': 4,
      'Go': 4,
      'Rust': 5,
      'Swift': 4,
      'Kotlin': 4,
      'PHP': 2,
      'Ruby': 3,
      'HTML': 1,
      'CSS': 1,
      'Shell': 2,
      'Dockerfile': 2,
    };

    if (repo.language) {
      const langScore = languageScores[repo.language] || 2;
      score += langScore;
      factors.push(`${repo.language} (${langScore}pts)`);
    }

    // Repository size and activity
    const size = repo.size || 0;
    if (size > 10000) {
      score += 3;
      factors.push('Large codebase (3pts)');
    } else if (size > 1000) {
      score += 2;
      factors.push('Medium codebase (2pts)');
    } else if (size > 100) {
      score += 1;
      factors.push('Small codebase (1pt)');
    }

    // Community engagement
    const stars = repo.stargazers_count || 0;
    const forks = repo.forks_count || 0;
    if (stars > 50 || forks > 10) {
      score += 2;
      factors.push('High engagement (2pts)');
    } else if (stars > 10 || forks > 2) {
      score += 1;
      factors.push('Some engagement (1pt)');
    }

    // Documentation and features
    if (repo.has_wiki) {
      score += 1;
      factors.push('Has wiki (1pt)');
    }
    if (repo.has_issues && (repo.open_issues_count || 0) > 0) {
      score += 1;
      factors.push('Active issues (1pt)');
    }
    if (repo.has_projects) {
      score += 1;
      factors.push('Project boards (1pt)');
    }

    // Topics/tags indicate thoughtful organization
    if (repo.topics && repo.topics.length > 0) {
      score += Math.min(repo.topics.length, 3);
      factors.push(`${repo.topics.length} topics (${Math.min(repo.topics.length, 3)}pts)`);
    }

    // Recent activity
    const lastUpdate = new Date(repo.updated_at);
    const monthsAgo = (Date.now() - lastUpdate.getTime()) / (1000 * 60 * 60 * 24 * 30);
    if (monthsAgo < 1) {
      score += 2;
      factors.push('Very recent activity (2pts)');
    } else if (monthsAgo < 6) {
      score += 1;
      factors.push('Recent activity (1pt)');
    }

    // Determine complexity level
    let level: RepositoryComplexity['level'];
    let reasoning: string;

    if (score <= 4) {
      level = 'Simple';
      reasoning = 'Basic project with minimal complexity and dependencies';
    } else if (score <= 8) {
      level = 'Intermediate';
      reasoning = 'Well-structured project with moderate complexity';
    } else if (score <= 12) {
      level = 'Complex';
      reasoning = 'Advanced project with multiple technologies and features';
    } else {
      level = 'Advanced';
      reasoning = 'Highly sophisticated project with extensive features and engagement';
    }

    return {
      score,
      level,
      factors,
      reasoning,
    };
  }

  // 📊 SORT BY COMPLEXITY
  static sortByComplexity(repositories: Repository[], order: 'asc' | 'desc' = 'asc'): Repository[] {
    return repositories.sort((a, b) => {
      const complexityA = a.complexity || this.calculateComplexity(a);
      const complexityB = b.complexity || this.calculateComplexity(b);

      const scoreA = complexityA.score;
      const scoreB = complexityB.score;

      return order === 'asc' ? scoreA - scoreB : scoreB - scoreA;
    });
  }

  // 💼 SORT FOR CV OPTIMIZATION
  static sortForCV(repositories: Repository[]): Repository[] {
    return repositories.sort((a, b) => {
      const complexityA = a.complexity || this.calculateComplexity(a);
      const complexityB = b.complexity || this.calculateComplexity(b);

      // Primary: Complexity score (higher first for CV)
      const complexityDiff = complexityB.score - complexityA.score;
      if (complexityDiff !== 0) return complexityDiff;

      // Secondary: Recent activity
      const aDate = new Date(a.updated_at).getTime();
      const bDate = new Date(b.updated_at).getTime();
      const dateDiff = bDate - aDate;
      if (dateDiff !== 0) return dateDiff;

      // Tertiary: Community engagement
      const aEngagement = (a.stargazers_count || 0) + (a.forks_count || 0);
      const bEngagement = (b.stargazers_count || 0) + (b.forks_count || 0);
      return bEngagement - aEngagement;
    });
  }

  // 🎯 GENERATE CV RECOMMENDATIONS
  static generateCVRecommendations(repositories: Repository[]): CVRecommendation[] {
    const recommendations: CVRecommendation[] = [];

    // Add complexity analysis to repositories
    const reposWithComplexity = repositories.map(repo => ({
      ...repo,
      complexity: repo.complexity || this.calculateComplexity(repo),
    }));

    // Top Complex Projects
    const complexProjects = reposWithComplexity
      .filter(repo => repo.complexity!.score >= 8)
      .sort((a, b) => b.complexity!.score - a.complexity!.score)
      .slice(0, 3);

    if (complexProjects.length > 0) {
      recommendations.push({
        title: '⭐ Showcase Projects (Lead with these)',
        description: 'Your most complex and impressive repositories that demonstrate advanced skills.',
        repositories: complexProjects,
        priority: 1,
      });
    }

    // Recent Active Projects
    const recentProjects = reposWithComplexity
      .filter(repo => {
        const monthsAgo = (Date.now() - new Date(repo.updated_at).getTime()) / (1000 * 60 * 60 * 24 * 30);
        return monthsAgo < 3 && repo.complexity!.score >= 4;
      })
      .sort((a, b) => new Date(b.updated_at).getTime() - new Date(a.updated_at).getTime())
      .slice(0, 3);

    if (recentProjects.length > 0) {
      recommendations.push({
        title: '🚀 Recent Work (Show current activity)',
        description: 'Recently updated projects that show you\'re actively coding.',
        repositories: recentProjects,
        priority: 2,
      });
    }

    // Well-Documented Projects
    const documentedProjects = reposWithComplexity
      .filter(repo => repo.has_wiki || repo.description || (repo.topics && repo.topics.length > 0))
      .sort((a, b) => b.complexity!.score - a.complexity!.score)
      .slice(0, 3);

    if (documentedProjects.length > 0) {
      recommendations.push({
        title: '📚 Well-Documented Projects',
        description: 'Projects with good documentation that show your communication skills.',
        repositories: documentedProjects,
        priority: 3,
      });
    }

    return recommendations;
  }
}
</code>

lib\supabase.ts:
<code>
import { createBrowserClient } from "@supabase/ssr"

// Remove hardcoded values - require environment variables
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY

if (!supabaseUrl || !supabaseAnonKey) {
  throw new Error('Missing required Supabase environment variables. Please set NEXT_PUBLIC_SUPABASE_URL and NEXT_PUBLIC_SUPABASE_ANON_KEY')
}

// 🔧 CRITICAL FIX: Use createBrowserClient for proper session persistence in Next.js
export const supabase = createBrowserClient(supabaseUrl, supabaseAnonKey)

// Database types based on our schema

export interface UserProfile {
  id: string
  github_username: string
  github_user_id: number
  github_pat_token?: string
  display_name?: string
  avatar_url?: string
  bio?: string
  goals?: string[]
  preferences: Record<string, any>
  created_at: string
  updated_at: string
}

export interface UserRepository {
  id: string
  user_id: string
  github_repo_id: number
  repo_data: GitHubRepository
  priority_order: number
  user_notes?: string
  ai_analysis?: RepositoryAnalysis
  is_featured: boolean
  created_at: string
  updated_at: string
}

export interface GitHubRepository {
  id: number
  name: string
  full_name: string
  description?: string
  language?: string
  stargazers_count: number
  forks_count: number
  updated_at: string
  created_at: string
  html_url: string
  clone_url: string
  default_branch: string
  topics: string[]
  private: boolean
  owner: {
    login: string
    avatar_url: string
  }
  // Additional fields from GitHub API
  size?: number
  open_issues_count?: number
  has_issues?: boolean
  has_projects?: boolean
  has_wiki?: boolean
  archived?: boolean
  disabled?: boolean
  pushed_at?: string
  // Custom fields for our app
  priority_order?: number
  user_notes?: string | null
  ai_analysis?: RepositoryAnalysis | null
  is_featured?: boolean
}

export interface RepositoryAnalysis {
  complexity_score: number
  tech_stack: string[]
  project_type: string
  completeness_score: number
  suggestions: string[]
  generated_at: string
}

export interface ChatSession {
  id: string
  user_id: string
  title?: string
  repository_id?: number // GitHub repository ID (bigint)
  messages?: ChatMessage[]
  context?: Record<string, any>
  created_at: string
  updated_at: string
}

export interface ChatMessage {
  id: string
  session_id?: string
  role: "user" | "assistant"
  content: string
  timestamp?: string
  created_at: string
  context?: {
    repository?: UserRepository
    action_type?: "analysis" | "suggestion" | "generation"
  }
}

export interface GeneratedContent {
  id: string
  user_id: string
  repository_id: string // This should be a UUID from the repositories table
  content_type: "readme" | "file" | "folder"
  content: Record<string, any>
  status: "draft" | "applied" | "rejected"
  github_commit_sha?: string
  created_at: string
}

// Database helper functions
export const createUserProfile = async (userData: {
  id: string
  github_username: string
  github_user_id: number
  display_name?: string
  avatar_url?: string
  bio?: string
}) => {
  const { data, error } = await supabase.from("user_profiles").insert([userData]).select().single()

  return { data, error }
}

export const getUserProfile = async (userId: string) => {
  const { data, error } = await supabase.from("user_profiles").select("*").eq("id", userId).single()

  return { data, error }
}

export const updateUserProfile = async (userId: string, updates: Partial<UserProfile>) => {
  const { data, error } = await supabase.from("user_profiles").update(updates).eq("id", userId).select().single()

  return { data, error }
}

export const getUserRepositories = async (userId: string) => {
  const { data, error } = await supabase
    .from("user_repositories")
    .select("*")
    .eq("user_id", userId)
    .order("priority_order", { ascending: true })

  return { data, error }
}

export const saveUserRepositories = async (
  repositories: Omit<UserRepository, "id" | "created_at" | "updated_at">[],
) => {
  const { data, error } = await supabase
    .from("user_repositories")
    .upsert(repositories, {
      onConflict: "user_id,github_repo_id",
      ignoreDuplicates: false,
    })
    .select()

  return { data, error }
}

export const updateRepositoryOrder = async (repositoryId: string, newOrder: number) => {
  const { data, error } = await supabase
    .from("user_repositories")
    .update({ priority_order: newOrder })
    .eq("id", repositoryId)
    .select()
    .single()

  return { data, error }
}

</code>

lib\utils.ts:
<code>
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

</code>

scripts\add-github-token-column.sql:
<code>
-- Add missing github_token column to user_profiles table
-- This fixes the profile loading issue where the account switcher gets stuck

-- Add github_token column if it doesn't exist
ALTER TABLE user_profiles 
ADD COLUMN IF NOT EXISTS github_token TEXT;

-- Add index for better performance on token lookups
CREATE INDEX IF NOT EXISTS idx_user_profiles_github_token 
ON user_profiles(github_token) 
WHERE github_token IS NOT NULL;

-- Update the table comment
COMMENT ON COLUMN user_profiles.github_token IS 'GitHub Personal Access Token for repository operations';

-- Verify the column was added
SELECT column_name, data_type, is_nullable 
FROM information_schema.columns 
WHERE table_name = 'user_profiles' 
AND column_name = 'github_token';

</code>

tests\oauth-token-persistence.spec.js:
<code>
const { test, expect } = require('@playwright/test');

test.describe('GitHub OAuth Token Persistence Test', () => {
  test('should persist GitHub token after sign out and re-login', async ({ page }) => {
    console.log('🎯 Starting GitHub OAuth Token Persistence Test...');
    
    // Navigate to production app
    await page.goto('https://neatrepo.vercel.app');
    await page.waitForLoadState('networkidle');
    
    console.log('✅ Navigated to NeatRepo');
    
    // Take initial screenshot
    await page.screenshot({ path: 'test-results/01-landing-page.png' });
    
    // Click "Get Started" or "Sign In" button to open auth forms
    const getStartedButton = page.locator('button:has-text("Get Started")').first();
    const signInButton = page.locator('button:has-text("Sign In")').first();
    
    if (await getStartedButton.isVisible()) {
      await getStartedButton.click();
      console.log('✅ Clicked Get Started button');
    } else if (await signInButton.isVisible()) {
      await signInButton.click();
      console.log('✅ Clicked Sign In button');
    } else {
      throw new Error('❌ No auth button found');
    }
    
    await page.waitForTimeout(1000);
    await page.screenshot({ path: 'test-results/02-auth-modal-opened.png' });
    
    // Look for GitHub OAuth button
    const githubButton = page.locator('button:has-text("Continue with GitHub")');
    await expect(githubButton).toBeVisible();
    console.log('✅ GitHub OAuth button found');
    
    // Click GitHub OAuth button
    await githubButton.click();
    console.log('✅ Clicked GitHub OAuth button');
    
    // Wait for GitHub OAuth redirect or popup
    await page.waitForTimeout(3000);
    
    // Check if we're redirected to GitHub or if there's an error
    const currentUrl = page.url();
    console.log(`🔗 Current URL: ${currentUrl}`);
    
    if (currentUrl.includes('github.com')) {
      console.log('🔄 Redirected to GitHub OAuth - Manual intervention needed');
      console.log('⚠️  This test requires manual GitHub login or pre-configured test account');
      
      // Wait for manual login (in real scenario, we'd use test credentials)
      await page.waitForTimeout(30000);
      
    } else if (currentUrl.includes('dashboard')) {
      console.log('✅ Already logged in - redirected to dashboard');
      
    } else {
      console.log('⚠️  Unexpected redirect or error occurred');
      await page.screenshot({ path: 'test-results/03-unexpected-state.png' });
    }
    
    // Check if we're on dashboard
    await page.waitForTimeout(2000);
    const finalUrl = page.url();
    console.log(`🎯 Final URL: ${finalUrl}`);
    
    if (finalUrl.includes('dashboard')) {
      console.log('✅ Successfully reached dashboard');
      await page.screenshot({ path: 'test-results/04-dashboard-reached.png' });
      
      // Check for GitHub token popup
      const tokenPopup = page.locator('[data-testid="github-token-popup"]');
      const isTokenPopupVisible = await tokenPopup.isVisible().catch(() => false);
      
      if (isTokenPopupVisible) {
        console.log('📝 GitHub token popup is visible (first time setup)');
        await page.screenshot({ path: 'test-results/05-token-popup-first-time.png' });
        
        // For testing, we'll dismiss the popup to simulate token setup
        const dismissButton = page.locator('button:has-text("Dismiss")');
        if (await dismissButton.isVisible()) {
          await dismissButton.click();
          console.log('✅ Dismissed token popup for testing');
        }
      } else {
        console.log('✅ No GitHub token popup (token already exists)');
      }
      
      // Now test the critical part: Sign out and re-login
      console.log('🔄 Testing sign out and re-login...');
      
      // Find and click sign out button
      const signOutButton = page.locator('button:has-text("Sign Out")');
      await expect(signOutButton).toBeVisible();
      await signOutButton.click();
      console.log('✅ Clicked Sign Out button');
      
      // Wait for redirect to homepage
      await page.waitForTimeout(3000);
      await page.screenshot({ path: 'test-results/06-after-signout.png' });
      
      // Verify we're back on homepage
      const homeUrl = page.url();
      console.log(`🏠 After sign out URL: ${homeUrl}`);
      
      // Now re-login with GitHub OAuth
      console.log('🔄 Re-logging in with GitHub OAuth...');
      
      // Click auth button again
      if (await getStartedButton.isVisible()) {
        await getStartedButton.click();
      } else if (await signInButton.isVisible()) {
        await signInButton.click();
      }
      
      await page.waitForTimeout(1000);
      
      // Click GitHub OAuth again
      const githubButtonSecond = page.locator('button:has-text("Continue with GitHub")');
      await githubButtonSecond.click();
      console.log('✅ Clicked GitHub OAuth button (second time)');
      
      // Wait for auth flow
      await page.waitForTimeout(5000);
      
      // Check if we reach dashboard again
      const secondLoginUrl = page.url();
      console.log(`🎯 Second login URL: ${secondLoginUrl}`);
      
      if (secondLoginUrl.includes('dashboard')) {
        console.log('✅ Successfully re-logged in to dashboard');
        await page.screenshot({ path: 'test-results/07-dashboard-second-login.png' });
        
        // CRITICAL TEST: Check if GitHub token popup appears again
        await page.waitForTimeout(2000);
        const tokenPopupSecond = page.locator('[data-testid="github-token-popup"]');
        const isTokenPopupVisibleSecond = await tokenPopupSecond.isVisible().catch(() => false);
        
        if (isTokenPopupVisibleSecond) {
          console.log('❌ CRITICAL BUG: GitHub token popup appeared again after re-login!');
          console.log('🐛 This means token persistence is broken');
          await page.screenshot({ path: 'test-results/08-BUG-token-popup-reappeared.png' });
          
          // This is the bug we need to fix
          throw new Error('CRITICAL BUG: GitHub token popup should not appear for existing users');
          
        } else {
          console.log('✅ PERFECT: No GitHub token popup on re-login');
          console.log('🎉 Token persistence is working correctly');
          await page.screenshot({ path: 'test-results/08-SUCCESS-no-popup-relogin.png' });
        }
        
      } else {
        console.log('⚠️  Failed to reach dashboard on second login');
        await page.screenshot({ path: 'test-results/07-second-login-failed.png' });
      }
      
    } else {
      console.log('❌ Failed to reach dashboard on first login');
      await page.screenshot({ path: 'test-results/04-dashboard-not-reached.png' });
    }
    
    console.log('🏁 GitHub OAuth Token Persistence Test completed');
  });
});

</code>

.aicodeprep-gui:
<code>
# .aicodeprep-gui LLM/AI context helper settings file
# This file stores your preferences (checked code files, window size) for this folder.
# Generated by aicodeprep-gui.
# Homepage: https://wuu73.org/aicp
# GitHub: https://github.com/detroittommy879/aicodeprep-gui
# ----------------------------------------------------------
# aicodeprep-gui preferences file version 1.0
version=1.0

[window]
width=1920
height=1009
splitter_state=AAAA/wAAAAEAAAACAAAAZgAAAIIB/////wEAAAACAA==

[files]
app\globals.css
app\layout.tsx
app\loading.tsx
app\page.tsx
app\api\analyze\route.ts
app\api\auth\callback\route.ts
app\api\bug-report\route.ts
app\api\session\route.ts
app\api\user\profile\route.ts
app\auth\error\page.tsx
app\bug-report\page.tsx
app\connect-github\page.tsx
app\dashboard\page.tsx
app\dashboard\components\ActionButtons.tsx
app\dashboard\components\ChatSidebar.tsx
app\dashboard\components\DashboardMetrics.tsx
app\dashboard\components\Modals.tsx
app\dashboard\components\RepoItem.tsx
app\dashboard\components\RepositoryList.tsx
app\dashboard\hooks\useChatAssistant.ts
app\dashboard\hooks\useDashboard.ts
app\dashboard\hooks\useDashboardModals.ts
app\dashboard\hooks\useRepositories.ts
app\dashboard\types\index.ts
app\debug\page.tsx
app\profile\page.tsx
app\signout\page.tsx
app\test-callback\page.tsx
app\test-sorting\page.tsx
components\auth-forms.tsx
components\auth-guard.tsx
components\auth-provider.tsx
components\dashboard-header.tsx
components\github-auth.tsx
components\github-connect-popup.tsx
components\github-token-popup.tsx
components\github-token-warning.tsx
components\navigation-error-boundary.tsx
components\oauth-debug.tsx
components\theme-provider.tsx
components\theme-toggle.tsx
components\token-management.tsx
components\token-warning-badge.tsx
components\auth\auth-context.tsx
components\ui\accordion.tsx
components\ui\alert-dialog.tsx
components\ui\alert.tsx
components\ui\aspect-ratio.tsx
components\ui\avatar.tsx
components\ui\badge.tsx
components\ui\breadcrumb.tsx
components\ui\button.tsx
components\ui\calendar.tsx
components\ui\card.tsx
components\ui\carousel.tsx
components\ui\chart.tsx
components\ui\checkbox.tsx
components\ui\collapsible.tsx
components\ui\command.tsx
components\ui\context-menu.tsx
components\ui\dialog.tsx
components\ui\drawer.tsx
components\ui\dropdown-menu.tsx
components\ui\form.tsx
components\ui\hover-card.tsx
components\ui\input-otp.tsx
components\ui\input.tsx
components\ui\label.tsx
components\ui\menubar.tsx
components\ui\navigation-menu.tsx
components\ui\pagination.tsx
components\ui\popover.tsx
components\ui\progress.tsx
components\ui\radio-group.tsx
components\ui\resizable.tsx
components\ui\scroll-area.tsx
components\ui\select.tsx
components\ui\separator.tsx
components\ui\sheet.tsx
components\ui\sidebar.tsx
components\ui\skeleton.tsx
components\ui\slider.tsx
components\ui\sonner.tsx
components\ui\switch.tsx
components\ui\table.tsx
components\ui\tabs.tsx
components\ui\textarea.tsx
components\ui\toast.tsx
components\ui\toaster.tsx
components\ui\toggle-group.tsx
components\ui\toggle.tsx
components\ui\tooltip.tsx
components\ui\use-mobile.tsx
components\ui\use-toast.ts
hooks\use-mobile.tsx
hooks\use-toast.ts
lib\ai-assistant.ts
lib\gemini.ts
lib\github-api.ts
lib\repository-manager.ts
lib\repository-sorter.ts
lib\supabase.ts
lib\utils.ts
lib\ai\types.ts
lib\ai\actions\.keep
lib\ai\actions\analyzeComplexity.ts
lib\ai\actions\createFile.ts
lib\ai\actions\createRepo.ts
lib\ai\actions\deleteRepo.ts
lib\ai\actions\handleGeneralResponse.ts
lib\ai\actions\handleInterviewAnswer.ts
lib\ai\actions\recommendCVRepos.ts
lib\ai\actions\recommendReposForJob.ts
lib\ai\actions\sortRepos.ts
lib\ai\actions\startInterview.ts
lib\ai\analysis\.keep
lib\ai\analysis\repositoryAnalysis.ts
lib\ai\prompts\.keep
lib\ai\prompts\analysisPrompts.ts
lib\auth\profile-service.ts

</code>

.gitignore:
<code>
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules

# next.js
/.next/
/out/

# production
/build

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# env files
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts
</code>

check-token-permissions.js:
<code>
#!/usr/bin/env node

const { Octokit } = require("@octokit/rest");
const fs = require('fs');
const path = require('path');

// Read .env.local file manually
function loadEnvFile() {
  try {
    const envPath = path.join(__dirname, '.env.local');
    const envContent = fs.readFileSync(envPath, 'utf8');
    const lines = envContent.split('\n');

    for (const line of lines) {
      const trimmed = line.trim();
      if (trimmed && !trimmed.startsWith('#')) {
        const [key, ...valueParts] = trimmed.split('=');
        if (key && valueParts.length > 0) {
          process.env[key] = valueParts.join('=');
        }
      }
    }
  } catch (error) {
    console.error('Error reading .env.local:', error.message);
  }
}

loadEnvFile();

async function checkTokenPermissions() {
  const token = process.env.GITHUB_TOKEN;
  
  if (!token) {
    console.error('❌ GITHUB_TOKEN not found in .env.local');
    process.exit(1);
  }

  console.log('🔍 Checking GitHub token permissions...');
  console.log('📝 Token:', token.substring(0, 10) + '...');

  const octokit = new Octokit({
    auth: token,
  });

  try {
    // 1. Check authenticated user
    console.log('\n1️⃣ Checking authenticated user...');
    const { data: user } = await octokit.rest.users.getAuthenticated();
    console.log(`✅ Authenticated as: ${user.login}`);
    console.log(`📧 Email: ${user.email || 'Not public'}`);
    console.log(`🔗 Profile: ${user.html_url}`);

    // 2. Check token scopes
    console.log('\n2️⃣ Checking token scopes...');
    const response = await octokit.request('HEAD /');
    const scopes = response.headers['x-oauth-scopes'];
    console.log(`🔐 Token scopes: ${scopes || 'No scopes found'}`);

    // 3. Check if we can list repositories
    console.log('\n3️⃣ Checking repository access...');
    const { data: repos } = await octokit.rest.repos.listForAuthenticatedUser({
      per_page: 5,
      sort: 'updated'
    });
    console.log(`📚 Found ${repos.length} repositories (showing first 5)`);
    
    repos.forEach((repo, index) => {
      console.log(`   ${index + 1}. ${repo.name} (${repo.private ? 'private' : 'public'})`);
      console.log(`      Permissions: admin=${repo.permissions?.admin}, push=${repo.permissions?.push}, pull=${repo.permissions?.pull}`);
    });

    // 4. Check specific repository permissions for pengetesan-delete
    console.log('\n4️⃣ Checking specific repository: pengetesan-delete...');
    try {
      const { data: repo } = await octokit.rest.repos.get({
        owner: user.login,
        repo: 'pengetesan-delete'
      });
      console.log(`✅ Repository found: ${repo.full_name}`);
      console.log(`🔐 Permissions: admin=${repo.permissions?.admin}, push=${repo.permissions?.push}, pull=${repo.permissions?.pull}`);
      
      if (repo.permissions?.admin) {
        console.log('✅ You have ADMIN access - can delete repository');
      } else {
        console.log('❌ You do NOT have ADMIN access - cannot delete repository');
      }
    } catch (error) {
      if (error.status === 404) {
        console.log('❌ Repository "pengetesan-delete" not found');
        console.log('   Possible reasons:');
        console.log('   - Repository does not exist');
        console.log('   - Repository name is incorrect');
        console.log('   - You do not have access to this repository');
      } else {
        console.log(`❌ Error checking repository: ${error.message}`);
      }
    }

    // 5. List all repositories to find the correct name
    console.log('\n5️⃣ Listing all repositories to find correct names...');
    const { data: allRepos } = await octokit.rest.repos.listForAuthenticatedUser({
      per_page: 100,
      sort: 'updated'
    });
    
    console.log(`📚 Total repositories: ${allRepos.length}`);
    console.log('🔍 Looking for repositories with "delete" or "test" in name:');
    
    const testRepos = allRepos.filter(repo => 
      repo.name.toLowerCase().includes('delete') || 
      repo.name.toLowerCase().includes('test') ||
      repo.name.toLowerCase().includes('pengetesan')
    );
    
    if (testRepos.length > 0) {
      testRepos.forEach(repo => {
        console.log(`   📁 ${repo.name} (${repo.private ? 'private' : 'public'})`);
        console.log(`      Admin: ${repo.permissions?.admin ? '✅' : '❌'}`);
        console.log(`      Full name: ${repo.full_name}`);
      });
    } else {
      console.log('   No repositories found with "delete", "test", or "pengetesan" in name');
    }

  } catch (error) {
    console.error('❌ Error checking token permissions:', error.message);
    if (error.status === 401) {
      console.error('🔐 Token is invalid or expired');
    } else if (error.status === 403) {
      console.error('🚫 Token does not have sufficient permissions');
    }
  }
}

checkTokenPermissions().catch(console.error);

</code>

components.json:
<code>
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "default",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "app/globals.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}
</code>

DEMO_SETUP.md:
<code>
# 🎬 NeatRepo Demo Setup Guide - GitHub Portfolio Organizer
*Create viral content showcasing the webapp that makes GitHub job-ready*

## 🚀 Core Features to Highlight (WOW Factors)

### 1. **🗑️ BULK DELETE OPERATIONS** ⭐ **MAIN ATTRACTION**
- **The Problem**: GitHub forces you to delete repos one by one (15 minutes for 15 repos)
- **Our Solution**: Select multiple repos, delete in one click (5 seconds)
- **WOW Factor**: 15 repos deleted in 5 seconds vs 15 minutes on GitHub
- **Safety**: Smart confirmations prevent accidents

### 2. **🎨 DRAG & DROP ORGANIZATION** 🎯 **VISUAL PORTFOLIO**
- **The Problem**: GitHub only has alphabetical sorting - looks unprofessional
- **Our Solution**: Visual drag & drop reordering untuk professional presentation
- **WOW Factor**: Professional portfolio layout vs messy GitHub list
- **Features**: Visual indicators, forked repo separation, custom grouping

### 3. **⚡ ULTRA-FAST PERFORMANCE** 🏆 **LIGHTNING SPEED**
- **The Problem**: GitHub is slow, clunky, takes 3-5 seconds to load repos
- **Our Solution**: Modern React app dengan intelligent caching
- **WOW Factor**: 25+ repositories loaded in 426ms (sub-1-second)
- **Technology**: Optimized performance, background sync, instant updates

### 4. **➕ COMPLETE REPOSITORY MANAGEMENT** ✅ **ALL-IN-ONE**
- **The Problem**: Need to switch between GitHub pages for different operations
- **Our Solution**: Create, rename, delete, organize - all in one place
- **WOW Factor**: Complete workflow tanpa meninggalkan NeatRepo
- **Features**: Repository creation, renaming, file management

### 5. **🎯 JOB-READY OPTIMIZATION** 💼 **CAREER FOCUSED**
- **The Problem**: GitHub profiles look messy and unprofessional to recruiters
- **Our Solution**: Smart sorting, professional presentation, portfolio modes
- **WOW Factor**: Transform messy GitHub into recruiter-ready portfolio
- **Features**: Portfolio mode, CV mode, complexity analysis, professional layout

### 6. **🧠 SMART FEATURES** (AI-Enhanced) 📊 **INTELLIGENT CAREER TOOLS**
- **The Problem**: No way to organize repos by skill level or job relevance
- **Our Solution**: Smart complexity analysis, job-specific repo picker, personal README generator
- **WOW Factor**: AI picks 4 best repos for "Frontend Developer" + personalized README in 2 minutes
- **Intelligence**: Job-focused automation + Nice/Brutal critique modes for improvement

---

## 🎯 Platform-Specific Demo Scripts

### 📱 TWITTER VERSION (Controversial & Viral)
**Duration**: 15-30 seconds
**Tone**: Dramatic, controversial, cringe

#### Viral Hook Options:
- "It's 2025 and GitHub STILL doesn't have bulk delete 🤦‍♂️"
- "I wasted 3 hours deleting repos manually. So I built this."
- "GitHub's UI is from 2008. We fixed it."
- "Microsoft owns GitHub but can't add basic features?"
- "POV: You have 50 old repos cluttering your GitHub"

#### Bulk Delete Demo Script (VIRAL VERSION):
```
[0-3s] "POV: You have 50 old repos cluttering your GitHub"
[3-8s] *Show messy GitHub profile with test repos*
[8-12s] *Open NeatRepo, show bulk select checkboxes*
[12-15s] *Select 15 repos with checkboxes*
[15-18s] *Click bulk delete, show confirmation*
[18-22s] *All repos deleted in 3 seconds*
[22-25s] "GitHub could never 💅"
[25-28s] "15 repos in 3 seconds vs 15 minutes on GitHub"
[28-30s] "Link in bio - it's FREE"
```

#### Alternative Scripts:

**Script A - AI Job Picker Focus:**
```
[0-3s] "Applying for Frontend Developer jobs?"
[3-6s] *Show messy GitHub with 30+ repos*
[6-9s] *Type job title: "Frontend Developer"*
[9-12s] *AI instantly picks 4 most relevant repos*
[12-15s] *Show selected repos: React projects, portfolios*
[15-18s] *Quick interview: "What's your coding passion?"*
[18-22s] *AI generates personalized README*
[22-25s] "Job-ready portfolio in 30 seconds"
[25-28s] "AI knows what recruiters want"
[28-30s] "Try it free - link in bio"
```

**Script B - Professional Portfolio Focus:**
```
[0-3s] "Your GitHub looks like a dumpster fire"
[3-8s] *Show cluttered, unprofessional GitHub profile*
[8-12s] *Open NeatRepo, drag & drop reorder repos*
[12-18s] *Show professional organization with visual indicators*
[18-22s] *Before/after comparison*
[22-25s] "Job-ready portfolio in 30 seconds"
[25-28s] "Recruiters will actually notice you"
[28-30s] "Try it free - link in bio"
```

**Script B - Performance Focus:**
```
[0-3s] "GitHub loading your repos..."
[3-6s] *Show GitHub spinning wheel*
[6-8s] "NeatRepo loading same repos..."
[8-10s] *Instant load - 426ms timer*
[10-15s] *Show smooth drag & drop, instant operations*
[15-18s] *Bulk delete 10 repos in 2 seconds*
[18-22s] "Sub-1-second vs GitHub's 5 seconds"
[22-25s] "Modern UI that actually works"
[25-30s] "Link in bio"
```

#### Viral Captions:
- "GitHub walked so NeatRepo could run 💯"
- "Developers deserve better tools"
- "RT if you've suffered from GitHub's UX"
- "POV: You never manually delete repos again"
- "This is what GitHub should have built"

---

### 💼 LINKEDIN VERSION (Professional & Career-Focused)
**Duration**: 45-60 seconds  
**Tone**: Professional, solution-focused, career-oriented

#### Professional Hook Options:
- "Transform your messy GitHub into a recruiter-ready portfolio"
- "Your GitHub profile could be costing you job opportunities"
- "How to organize your GitHub for maximum career impact"
- "Stop losing job opportunities because of poor GitHub organization"
- "Professional developers need professional portfolio tools"

#### Job-Ready Portfolio Script:
```
[0-5s] "Your GitHub profile determines your career opportunities"
[5-10s] *Show cluttered, unprofessional GitHub profile*
[10-15s] "But organizing it manually takes hours of work"
[15-20s] *Open NeatRepo, show bulk select interface*
[20-25s] *Bulk delete test repos in 3 seconds*
[25-30s] *Drag & drop reorder remaining repos professionally*
[30-35s] *Show smart sorting: Portfolio mode (simple→complex)*
[35-40s] *Show before/after: messy vs professional*
[40-45s] *Show performance: 426ms load vs GitHub's 3+ seconds*
[45-50s] "Professional portfolio organization in minutes, not hours"
[50-55s] "Used by developers landing jobs at top companies"
[55-60s] "Optimize your career: [link]"
```

#### Alternative Professional Scripts:

**Script A - Time ROI Focus:**
```
[0-5s] "Spent 3 hours organizing my GitHub for job applications"
[5-10s] *Show manual GitHub organization process*
[10-15s] "There has to be a better way"
[15-20s] *Open NeatRepo, bulk operations*
[20-30s] *Complete organization in 2 minutes*
[30-35s] *Show professional drag & drop reordering*
[35-40s] *Compare: 3 hours manual vs 2 minutes with NeatRepo*
[40-45s] "Time is money in job searching"
[45-50s] "Focus on coding, not organizing"
[50-55s] "Professional portfolio tools for serious developers"
[55-60s] "Try free: [link]"
```

**Script B - Recruiter Perspective Focus:**
```
[0-5s] "Recruiters spend 30 seconds on your GitHub profile"
[5-10s] *Show messy, disorganized repository list*
[10-15s] "First impression matters in tech hiring"
[15-25s] *Show NeatRepo professional organization*
[25-30s] *Visual indicators, clean layout, smart sorting*
[30-35s] *Show portfolio mode: simple→complex progression*
[35-40s] *Professional presentation that impresses recruiters*
[40-45s] "Stand out in a competitive job market"
[45-50s] "Professional GitHub = professional developer"
[50-55s] "Used by developers at Google, Meta, Netflix"
[55-60s] "Optimize your career: [link]"
```

#### Professional Benefits & ROI:
- ✅ **Time Savings**: 2 minutes vs 3 hours manual organization
- ✅ **Professional Presentation**: Impress recruiters in first 30 seconds
- ✅ **Career-Focused Organization**: Portfolio mode showcases learning journey
- ✅ **Competitive Advantage**: Stand out in crowded job market
- ✅ **Bulk Operations**: Clean up messy profiles instantly
- ✅ **Modern Performance**: Fast, responsive, professional interface

#### LinkedIn-Specific Call-to-Actions:
- "Connect with me to discuss developer career tools"
- "Share with developers preparing for job applications"
- "Comment: What's your biggest GitHub organization challenge?"
- "Tag a developer friend who needs portfolio cleanup"
- "Follow for more career-focused developer tools"

---

### 🤓 REDDIT/DEV FORUMS VERSION (Technical & Problem-Solving)
**Duration**: 60-90 seconds
**Tone**: Technical, community-focused, maker story

#### Technical Hook Options:
- "Built a tool for bulk GitHub operations because I was tired of clicking delete 50 times"
- "GitHub is missing basic bulk operations in 2025. So I built this."
- "Open source tool that solves GitHub's biggest UX problems"
- "Finally, bulk delete and professional portfolio organization for GitHub"
- "Spent weekend building what GitHub should have had years ago"

#### Technical Problem-Solving Script:
```
[0-5s] "GitHub is missing basic bulk operations in 2025. So I built this."
[5-10s] *Show GitHub's manual, repetitive deletion process*
[10-15s] *Open NeatRepo, show bulk select checkboxes*
[15-20s] *Select 15 repos, bulk delete in 3 seconds*
[20-25s] *Show drag & drop organization interface*
[25-35s] *Demo professional portfolio layout with visual indicators*
[35-40s] *Show performance metrics: 426ms load vs GitHub's 3+ seconds*
[40-50s] *Demo repository creation, renaming, file management*
[50-60s] *Show smart sorting: Portfolio mode vs CV mode*
[60-70s] *Show tech stack: Next.js, TypeScript, Supabase*
[70-75s] "Open source, looking for contributors and feedback"
[75-80s] "What GitHub features are you missing?"
[80-85s] "Built this because I was frustrated with GitHub's UX"
[85-90s] "Link in comments - it's completely free"
```

#### Alternative Technical Scripts:

**Script A - Performance & Architecture Focus:**
```
[0-5s] "Built GitHub portfolio organizer with sub-1-second performance"
[5-10s] *Show performance metrics: 426ms load time*
[10-20s] *Explain singleton pattern, intelligent caching*
[20-30s] *Demo bulk operations architecture*
[30-40s] *Show drag & drop implementation*
[40-50s] *Demo real-time updates and background sync*
[50-60s] *Explain tech stack and architecture decisions*
[60-70s] "Open source repo available, looking for code reviews"
[70-80s] "What would you optimize differently?"
[80-90s] "Link in comments for technical deep dive"
```

**Script B - Problem-Solving Focus:**
```
[0-5s] "GitHub's UX problems that needed solving"
[5-15s] *Show manual repo deletion, poor organization*
[15-25s] *Demo NeatRepo's bulk operations solution*
[25-35s] *Show professional portfolio organization*
[35-45s] *Demo job-ready features: Portfolio mode, CV mode*
[45-55s] *Show developer workflow improvements*
[55-65s] *Explain technical implementation challenges*
[65-75s] "Built with TypeScript, full type safety"
[75-80s] "Looking for developers to contribute"
[80-85s] "What GitHub UX problems annoy you most?"
[85-90s] "GitHub repo and live demo in comments"
```

#### Technical Highlights & Architecture:
- 🔧 **Modern Stack**: Next.js 14, React 18, TypeScript, Supabase
- ⚡ **Performance**: Singleton patterns, intelligent caching, streaming updates
- 🗑️ **Bulk Operations**: Efficient GitHub API integration for mass operations
- 🎨 **Drag & Drop**: Smooth @hello-pangea/dnd implementation
- 🔐 **Security**: Secure token management, enterprise-grade auth
- 📊 **Real-time**: Background sync, YouTube-style persistence
- 🎯 **Open Source**: Looking for contributors and code reviews
- 🚀 **Production Ready**: Comprehensive error handling, type safety

#### Reddit-Specific Technical CTAs:
- "Code review welcome - what would you optimize?"
- "Looking for frontend/backend developers to contribute"
- "What GitHub UX problems are you missing solutions for?"
- "Built this in a weekend - what should I add next?"
- "Open source repo in comments - star if you find it useful"
- "Beta testing with real developers - feedback appreciated"

---

## 🎥 Recording Setup

### Technical Requirements:
- **Resolution**: 1920x1080 (Full HD)
- **Frame Rate**: 60fps for smooth UI interactions
- **Recording Software**: OBS Studio / Loom / ScreenFlow
- **Browser**: Chrome Incognito (clean, no extensions)
- **Mouse**: Enable click highlighting
- **Audio**: Optional background music (platform-specific)

### Demo Data Preparation:
1. **Create 15-20 test repositories** with varied names:
   - Professional: `portfolio-website`, `react-dashboard`, `api-server`
   - Embarrassing: `test-repo-123`, `asdfgh`, `random-stuff` (for Twitter drama)
   - Mixed languages: JavaScript, Python, Java, etc.

2. **Prepare GitHub account** with cluttered profile
3. **Setup NeatRepo account** with clean state
4. **Test all features** before recording

---

## ✂️ Editing Guidelines

### Key Moments to Emphasize:
1. **Zoom in** on bulk select checkboxes (0.5s slow-mo)
2. **Zoom in** on delete confirmation dialog
3. **Speed up** boring navigation (2x speed)
4. **Slow down** the WOW moment (bulk delete action)
5. **Add text overlays** for emphasis

### Platform-Specific Editing:

#### Twitter:
- ⚡ Fast-paced, energetic
- 🎵 Trending audio/music
- 📱 Vertical format (9:16) for mobile
- 💥 Quick cuts, dramatic zooms
- 🔥 Emoji overlays and reactions

#### LinkedIn:
- 🎼 Professional background music
- 📐 Clean, minimal text overlays
- 🎯 Focus on business value
- 📊 Show before/after metrics
- 💼 Professional color scheme

#### Reddit:
- 🔧 Technical annotations
- 📝 Code snippets if relevant
- 🎯 Focus on functionality
- 📊 Performance metrics
- 🔍 Detailed feature explanations

---

## 🎯 Call-to-Action Strategies

### Twitter:
- "Link in bio 👆"
- "RT if you've suffered from GitHub's UX"
- "Tag a developer who needs this"
- "Comment 'NEED' for early access"

### LinkedIn:
- "Try it free at [link]"
- "Share with your developer network"
- "Comment your GitHub organization tips"
- "Connect if you found this helpful"

### Reddit:
- "Link in comments (mods please don't delete)"
- "Looking for beta testers and feedback"
- "Open source repo: [github link]"
- "Built this because I was frustrated with GitHub"

---

## 🔥 Viral Hooks & Controversy (Twitter Specific)

### Controversial Statements:
- "GitHub's UX team should be fired"
- "Microsoft ruined GitHub's innovation"
- "It's 2025 and GitHub feels like 2008"
- "Spent $7.5B on GitHub but can't add bulk delete"
- "GitHub devs don't use their own product"

### Engagement Bait:
- "Unpopular opinion: GitHub's UI is trash"
- "Hot take: GitHub needs competition"
- "Change my mind: GitHub is overrated"
- "This feature should be built into GitHub"

### Relatable Pain Points:
- "POV: Deleting 50 repos manually"
- "Me: *clicks delete 47 times*"
- "GitHub: Delete repos one by one 🤡"
- "Developers: We need bulk operations"
- "GitHub: Best I can do is dark mode"

---

## 📊 Success Metrics to Track

### Engagement Metrics:
- Views, likes, shares, comments
- Click-through rate to website
- Sign-up conversion rate
- Platform-specific metrics (RT, connections, upvotes)

### Platform Benchmarks:
- **Twitter**: 1000+ views, 50+ RTs, 10+ sign-ups
- **LinkedIn**: 500+ views, 25+ reactions, 5+ connections
- **Reddit**: 100+ upvotes, 20+ comments, 15+ sign-ups

---

## 🎬 Quick Demo Checklist

### Pre-Recording:
- [ ] Clean browser setup
- [ ] Test repositories created
- [ ] NeatRepo account ready
- [ ] Recording software configured
- [ ] Script memorized/notes ready

### During Recording:
- [ ] Clear, confident narration
- [ ] Smooth mouse movements
- [ ] Highlight key interactions
- [ ] Show before/after clearly
- [ ] Capture WOW moments

### Post-Recording:
- [ ] Edit for platform-specific audience
- [ ] Add appropriate music/effects
- [ ] Include clear call-to-action
- [ ] Test on mobile (especially for Twitter)
- [ ] Schedule for optimal posting times

---

## 🎭 Specific Demo Scenarios

### Scenario 1: "The Cleanup" (Most Viral)
**Setup**: GitHub profile with 20+ random/test repos
**Story**: "I'm applying for jobs and my GitHub looks like a dumpster fire"
**Action**: Bulk select all test repos → Delete in one click
**Result**: Clean, professional profile in 10 seconds

### Scenario 2: "The AI Job Picker" (Career-Focused)
**Setup**: GitHub profile with 30+ mixed repos (React, Python, random projects)
**Story**: "Applying for Frontend Developer position at Google"
**Action**: Type "Frontend Developer" → AI picks 4 best repos (React projects, portfolios)
**Result**: Perfect job-specific portfolio in 5 seconds

### Scenario 3: "The Personal README Interview" (Standout Feature)
**Setup**: Generic, boring README or no README
**Story**: "My README is generic and doesn't show who I am"
**Action**: Start quick interview → AI asks 5 personal questions → Generate custom README
**Result**: Personalized README with story, passion, and personality in 2 minutes

### Scenario 4: "The Brutal Critique Mode" (Controversial/Viral)
**Setup**: Messy GitHub profile with poor organization
**Story**: "I want honest feedback on my GitHub portfolio"
**Action**: Enable Brutal Mode → AI gives harsh but honest critique
**Result**: Shocking but helpful feedback that goes viral

### Scenario 5: "The Portfolio Builder"
**Setup**: Scattered repos across different technologies
**Story**: "Recruiter wants to see my React skills"
**Action**: Use portfolio template → Organize by technology
**Result**: Professional portfolio showcase

### Scenario 6: "The Time Saver"
**Setup**: Timer on screen showing manual deletion time
**Story**: "Let's see how long GitHub takes vs NeatRepo"
**Action**: Side-by-side comparison
**Result**: 15 minutes vs 15 seconds

---

## 🎪 Advanced Viral Tactics

### Twitter Engagement Hacks:
1. **Reply to GitHub's tweets** with your demo
2. **Quote tweet** developer complaints about GitHub
3. **Use trending hashtags**: #GitHub #Developer #Productivity
4. **Tag tech influencers** who complain about GitHub
5. **Post during peak hours**: 9-10 AM, 7-9 PM EST

### LinkedIn Growth Hacks:
1. **Post in developer groups** (React, JavaScript, etc.)
2. **Tag your connections** who are developers
3. **Use professional hashtags**: #SoftwareDevelopment #GitHub #Productivity
4. **Share in company pages** if you work at a tech company
5. **Cross-post** to your company's LinkedIn

### Reddit Strategy:
1. **Target subreddits**: r/programming, r/webdev, r/javascript, r/github
2. **Follow community rules** (some don't allow self-promotion)
3. **Engage genuinely** before posting your content
4. **Provide value first** (helpful comments, answers)
5. **Use "I built this" narrative** (developers love maker stories)

---

## 🔥 Viral Content Templates

### Twitter Thread Template:
```
🧵 Thread: Why GitHub's UX makes me want to cry

1/ It's 2025. GitHub is worth $7.5 billion.
   But I still have to delete repos ONE BY ONE 🤦‍♂️

2/ So I spent my weekend building what GitHub should have:
   [Demo video]

3/ Features GitHub SHOULD have:
   ✅ Bulk delete
   ✅ Portfolio templates
   ✅ Better organization
   ✅ Modern UI

4/ Try it free: [link]
   RT if you've suffered from GitHub's UX 😭
```

### LinkedIn Post Template:
```
🚀 How to optimize your GitHub profile for job applications:

Your GitHub is your developer resume. But organizing it manually takes hours.

I built a tool that:
✅ Bulk manages repositories
✅ Creates professional portfolios
✅ Organizes projects by technology
✅ Saves hours of manual work

[Demo video]

Perfect for developers preparing for job interviews.

Try it free: [link]

#SoftwareDevelopment #GitHub #JobSearch #Productivity
```

### Reddit Post Template:
```
Title: "Built a tool for bulk GitHub operations because I was tired of clicking delete 50 times"

Hey r/programming,

I got frustrated deleting old repos one by one on GitHub, so I built NeatRepo over the weekend.

Features:
- Bulk delete/archive repositories
- Portfolio templates for job applications
- Better organization than GitHub's interface
- Built with Next.js + Supabase

[Demo video/screenshots]

It's free and I'm looking for feedback. What other GitHub features are you missing?

GitHub: [repo link]
Live demo: [app link]

Would love your thoughts and bug reports!
```

---

## 🚀 **NEW FEATURES - VIRAL POTENTIAL**

### **🎯 AI Job Picker Demo Tips:**
- **Setup**: Create repos for different tech stacks (React, Python, Node.js, random projects)
- **Demo Flow**: Type job title → Show AI thinking → Reveal perfect 4 repo selection
- **Viral Hook**: "AI knows what recruiters want better than you do"
- **Best Platforms**: LinkedIn (career-focused), Twitter (AI hype)

### **📝 Personal README Interview Demo Tips:**
- **Setup**: Show boring, generic README first
- **Demo Flow**: Start interview → Show AI asking personal questions → Generate custom README
- **Viral Hook**: "First AI that actually gets to know you personally"
- **Best Platforms**: Twitter (personal story), LinkedIn (professional branding)

### **🔥 Brutal Critique Mode Demo Tips:**
- **Setup**: Messy, unprofessional GitHub profile
- **Demo Flow**: Enable Brutal Mode → Show harsh but honest AI feedback
- **Viral Hook**: "AI roasts my GitHub portfolio" (controversial content)
- **Best Platforms**: Twitter (controversy), Reddit (honest feedback culture)

### **⚡ Performance Comparison Demo Tips:**
- **Setup**: Side-by-side browser windows (GitHub vs NeatRepo)
- **Demo Flow**: Load same repos → Show timer → Highlight speed difference
- **Viral Hook**: "426ms vs 5+ seconds - this is embarrassing for GitHub"
- **Best Platforms**: Reddit (technical), Twitter (GitHub criticism)

---

## 🎬 **CONTENT CALENDAR SUGGESTIONS**

### **Week 1: Foundation Features**
- **Monday**: Bulk Delete Demo (Twitter viral)
- **Wednesday**: Professional Organization (LinkedIn)
- **Friday**: Performance Comparison (Reddit technical)

### **Week 2: AI Features**
- **Monday**: AI Job Picker Demo (LinkedIn career-focused)
- **Wednesday**: Personal README Interview (Twitter personal story)
- **Friday**: Brutal Critique Mode (Twitter controversial)

### **Week 3: Advanced Features**
- **Monday**: Complete Workflow Demo (all platforms)
- **Wednesday**: Developer Testimonials (LinkedIn social proof)
- **Friday**: Behind-the-scenes Building Process (Reddit maker story)

---

**Remember**: The goal is to make developers think "Holy shit, I need this!" within the first 5 seconds. Lead with the pain, deliver the solution, and make them feel stupid for not having it already. 🚀

**Pro Tip**: Record multiple versions of the same demo with different hooks/narratives. A/B test which performs better on each platform. The controversial Twitter version might flop on LinkedIn, but kill on Twitter. 📊

**New Features Strategy**: Start with bulk delete as main hook, then introduce AI features as "bonus" capabilities. This positions NeatRepo as essential tool first, smart tool second. 🧠

</code>

middleware.ts:
<code>
import { createServerClient, type CookieOptions } from '@supabase/ssr'
import { NextResponse, type NextRequest } from 'next/server'

export async function middleware(req: NextRequest) {
  const res = NextResponse.next({
    request: {
      headers: req.headers,
    },
  })

  try {
    const supabase = createServerClient(
      process.env.NEXT_PUBLIC_SUPABASE_URL!,
      process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
      {
        cookies: {
          get(name: string) {
            return req.cookies.get(name)?.value
          },
          set(name: string, value: string, options: CookieOptions) {
            res.cookies.set({ name, value, ...options })
          },
          remove(name: string, options: CookieOptions) {
            res.cookies.set({ name, value: '', ...options })
          },
        },
      }
    )

    // CRITICAL FIX: Skip middleware for dashboard - let client handle auth
    if (req.nextUrl.pathname === '/dashboard') {
      console.log('✅ MIDDLEWARE: Allowing dashboard access - client will handle auth')
      return res
    }

    const {
      data: { session },
      error,
    } = await supabase.auth.getSession()

    if (error) {
      console.error('🚨 MIDDLEWARE: Supabase session error:', error.message)
    }

    const protectedRoutes = ['/profile'] // Remove dashboard from protected routes
    const isProtectedRoute = protectedRoutes.some(route =>
      req.nextUrl.pathname.startsWith(route)
    )

    console.log('🔍 MIDDLEWARE: Session check:', {
      hasSession: !!session,
      userId: session?.user?.id,
      pathname: req.nextUrl.pathname,
      isProtectedRoute,
    })

    // 🔒 CRITICAL FIX: Add session validation to prevent user mixing
    if (session?.user) {
      console.log('🔍 MIDDLEWARE: Validating session for user:', session.user.id);

      // Ensure session has required user properties
      if (!session.user.id || !session.user.email) {
        console.error('🚨 MIDDLEWARE: Invalid session detected - missing user properties');
        // Clear potentially corrupted session
        await supabase.auth.signOut({ scope: 'local' });
        const redirectUrl = req.nextUrl.clone()
        redirectUrl.pathname = '/'
        return NextResponse.redirect(redirectUrl)
      }
    }

    if (isProtectedRoute && !session) {
      console.log(`🚫 MIDDLEWARE: No session, redirecting from protected route ${req.nextUrl.pathname} to home.`)
      const redirectUrl = req.nextUrl.clone()
      redirectUrl.pathname = '/'
      redirectUrl.search = '' // Clear any query params
      return NextResponse.redirect(redirectUrl)
    }

    if (isProtectedRoute && session) {
      const hasGitHubConnection = session.user?.app_metadata?.provider === 'github'
      if (!hasGitHubConnection && req.nextUrl.pathname !== '/connect-github') {
        console.log('🔗 MIDDLEWARE: User needs GitHub connection, redirecting to /connect-github')
        return NextResponse.redirect(new URL('/connect-github', req.url))
      }
    }
    
    if (req.nextUrl.pathname === '/connect-github' && !session) {
      console.log('🚫 MIDDLEWARE: Unauthenticated access to /connect-github, redirecting to home.')
      return NextResponse.redirect(new URL('/', req.url))
    }

    return res
  } catch (e) {
    console.error('❌ MIDDLEWARE: Unhandled error:', e)
    // If an error occurs, just pass the request through
    return NextResponse.next({
      request: {
        headers: req.headers,
      },
    })
  }
}

export const config = {
  matcher: [
    /*
     * Match all request paths except for the ones starting with:
     * - _next/static (static files)
     * - _next/image (image optimization files)
     * - favicon.ico (favicon file)
     * - api (API routes)
     */
    '/((?!_next/static|_next/image|favicon.ico|api).*)',
  ],
}

</code>

next.config.mjs:
<code>
/** @type {import('next').NextConfig} */
const nextConfig = {
  eslint: {
    ignoreDuringBuilds: true,
  },
  typescript: {
    ignoreBuildErrors: true,
  },
  images: {
    unoptimized: true,
  },
}

export default nextConfig
</code>

OAUTH_SETUP.md:
<code>
# GitHub OAuth Setup dengan Supabase

## Production-Ready OAuth Configuration

This application uses Supabase's built-in OAuth provider for secure GitHub authentication. All hardcoded values have been removed and proper environment variable configuration is required.

## Required Configuration

### 1. Supabase Dashboard
1. Buka [Supabase Dashboard](https://app.supabase.com)
2. Pilih project Anda
3. Pergi ke **Authentication** > **Providers**
4. Aktifkan **GitHub** provider
5. Masukkan GitHub OAuth App credentials:
   - **Client ID**: Your GitHub OAuth App Client ID
   - **Client Secret**: Your GitHub OAuth App Client Secret

### 2. GitHub OAuth App Settings
1. Buka [GitHub Developer Settings](https://github.com/settings/developers)
2. Pilih OAuth App Anda
3. Update **Authorization callback URL** menjadi:
   ```
   https://qhoqcuvdgueeisqhkqio.supabase.co/auth/v1/callback
   ```
   
   **PENTING**: URL callback harus menggunakan format Supabase, bukan `/api/github/callback` seperti sebelumnya.

### 3. Environment Variables
Create `.env.local` file with your project-specific values:
```env
# Supabase Configuration - Get from your Supabase project settings
NEXT_PUBLIC_SUPABASE_URL=https://your-project-id.supabase.co
NEXT_PUBLIC_SUPABASE_ANON_KEY=your-anon-key-here

# GitHub OAuth Configuration - Must match Supabase provider settings
GITHUB_CLIENT_ID=your-github-client-id
GITHUB_CLIENT_SECRET=your-github-client-secret

# Optional: For debugging
NEXT_PUBLIC_GITHUB_CLIENT_ID=your-github-client-id
```

## Perubahan yang Dilakukan

### 1. HomePage (`app/page.tsx`)
- ✅ Mengganti implementasi OAuth kustom dengan `supabase.auth.signInWithOAuth()`
- ✅ Menghapus logika manual untuk membuat URL GitHub OAuth
- ✅ Menggunakan `redirectTo: '/dashboard'` untuk redirect otomatis

### 2. AuthProvider (`components/auth-provider.tsx`)
- ✅ Membuat context untuk mengelola state authentication
- ✅ Menangani `onAuthStateChange` untuk update otomatis
- ✅ Membuat/update user profile otomatis saat login berhasil

### 3. Layout (`app/layout.tsx`)
- ✅ Menambahkan `AuthProvider` wrapper

### 4. Endpoint Cleanup
- ✅ Menghapus `/api/github/callback` yang tidak diperlukan
- ✅ Supabase menangani callback secara otomatis

## Testing OAuth Flow

1. Jalankan aplikasi: `npm run dev`
2. Buka `http://localhost:3000`
3. Klik tombol "Connect GitHub"
4. Anda akan diarahkan ke GitHub untuk authorization
5. Setelah approve, akan redirect ke `/dashboard`

## Troubleshooting

### Error: "The redirect_uri is not associated with this application"
- Pastikan callback URL di GitHub OAuth App adalah: `https://qhoqcuvdgueeisqhkqio.supabase.co/auth/v1/callback`
- Jangan gunakan `http://localhost:3001/api/github/callback`

### Error: "Invalid client_id"
- Pastikan Client ID di Supabase Dashboard sama dengan yang di GitHub OAuth App

### User tidak ter-create di database
- Periksa tabel `user_profiles` di Supabase
- AuthProvider akan otomatis membuat profile saat login pertama kali

## Database Schema

Pastikan tabel `user_profiles` memiliki struktur:
```sql
CREATE TABLE user_profiles (
  id UUID PRIMARY KEY REFERENCES auth.users(id),
  github_username TEXT,
  github_user_id BIGINT,
  display_name TEXT,
  avatar_url TEXT,
  bio TEXT,
  preferences JSONB DEFAULT '{}',
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW()
);
```

</code>

old_dashboard.tsx:
<code>
" u s e   c l i e n t " 
 
 
 
 i m p o r t   t y p e   R e a c t   f r o m   " r e a c t " 
 
 
 
 i m p o r t   {   u s e S t a t e ,   u s e E f f e c t ,   u s e R e f   }   f r o m   " r e a c t " 
 
 i m p o r t   {   u s e R o u t e r ,   u s e S e a r c h P a r a m s   }   f r o m   " n e x t / n a v i g a t i o n " 
 
 i m p o r t   {   C a r d ,   C a r d C o n t e n t ,   C a r d H e a d e r ,   C a r d T i t l e   }   f r o m   " @ / c o m p o n e n t s / u i / c a r d " 
 
 i m p o r t   {   B u t t o n   }   f r o m   " @ / c o m p o n e n t s / u i / b u t t o n " 
 
 i m p o r t   {   B a d g e   }   f r o m   " @ / c o m p o n e n t s / u i / b a d g e " 
 
 i m p o r t   {   I n p u t   }   f r o m   " @ / c o m p o n e n t s / u i / i n p u t " 
 
 i m p o r t   {   A v a t a r ,   A v a t a r F a l l b a c k ,   A v a t a r I m a g e   }   f r o m   " @ / c o m p o n e n t s / u i / a v a t a r " 
 
 i m p o r t   {   T h e m e T o g g l e   }   f r o m   " @ / c o m p o n e n t s / t h e m e - t o g g l e " 
 
 i m p o r t   { 
 
     G i t h u b , 
 
     S t a r , 
 
     G i t F o r k , 
 
     C l o c k , 
 
     S e t t i n g s , 
 
     L o g O u t , 
 
     P l u s , 
 
     G r i p V e r t i c a l , 
 
     F o l d e r , 
 
     C o d e , 
 
     F i l e T e x t , 
 
     L i g h t b u l b , 
 
     S e n d , 
 
     C h e v r o n D o w n , 
 
     C h e v r o n R i g h t , 
 
     M e s s a g e C i r c l e , 
 
     S q u a r e , 
 
     E y e , 
 
 }   f r o m   " l u c i d e - r e a c t " 
 
 
 
 i n t e r f a c e   G i t H u b U s e r   { 
 
     i d :   n u m b e r 
 
     l o g i n :   s t r i n g 
 
     n a m e :   s t r i n g 
 
     e m a i l :   s t r i n g 
 
     a v a t a r _ u r l :   s t r i n g 
 
     b i o :   s t r i n g 
 
     p u b l i c _ r e p o s :   n u m b e r 
 
 } 
 
 
 
 i n t e r f a c e   G i t H u b R e p o   { 
 
     i d :   n u m b e r 
 
     n a m e :   s t r i n g 
 
     f u l l _ n a m e :   s t r i n g 
 
     d e s c r i p t i o n :   s t r i n g 
 
     l a n g u a g e :   s t r i n g 
 
     s t a r g a z e r s _ c o u n t :   n u m b e r 
 
     f o r k s _ c o u n t :   n u m b e r 
 
     h t m l _ u r l :   s t r i n g 
 
     u p d a t e d _ a t :   s t r i n g 
 
     p r i v a t e :   b o o l e a n 
 
 } 
 
 
 
 i n t e r f a c e   U s e r S e s s i o n   { 
 
     u s e r :   G i t H u b U s e r 
 
     r e p o s i t o r i e s :   G i t H u b R e p o [ ] 
 
     a c c e s s _ t o k e n :   s t r i n g 
 
     a u t h e n t i c a t e d _ a t :   s t r i n g 
 
 } 
 
 
 
 i n t e r f a c e   C h a t M e s s a g e   { 
 
     i d :   s t r i n g 
 
     r o l e :   " u s e r "   |   " a s s i s t a n t " 
 
     c o n t e n t :   s t r i n g 
 
     t i m e s t a m p :   D a t e 
 
 } 
 
 
 
 e x p o r t   d e f a u l t   f u n c t i o n   D a s h b o a r d P a g e ( )   { 
 
     c o n s t   [ s e s s i o n ,   s e t S e s s i o n ]   =   u s e S t a t e < U s e r S e s s i o n   |   n u l l > ( n u l l ) 
 
     c o n s t   [ r e p o s i t o r i e s ,   s e t R e p o s i t o r i e s ]   =   u s e S t a t e < G i t H u b R e p o [ ] > ( [ ] ) 
 
     c o n s t   [ i s L o a d i n g ,   s e t I s L o a d i n g ]   =   u s e S t a t e ( t r u e ) 
 
     c o n s t   [ e r r o r ,   s e t E r r o r ]   =   u s e S t a t e < s t r i n g   |   n u l l > ( n u l l ) 
 
     c o n s t   [ c h a t M e s s a g e ,   s e t C h a t M e s s a g e ]   =   u s e S t a t e ( " " ) 
 
     c o n s t   [ c h a t M e s s a g e s ,   s e t C h a t M e s s a g e s ]   =   u s e S t a t e < C h a t M e s s a g e [ ] > ( [ ] ) 
 
     c o n s t   [ d r a g g e d R e p o ,   s e t D r a g g e d R e p o ]   =   u s e S t a t e < n u m b e r   |   n u l l > ( n u l l ) 
 
     c o n s t   [ e x p a n d e d R e p o s ,   s e t E x p a n d e d R e p o s ]   =   u s e S t a t e < S e t < n u m b e r > > ( n e w   S e t ( ) ) 
 
     c o n s t   [ h a s C h a n g e s ,   s e t H a s C h a n g e s ]   =   u s e S t a t e ( f a l s e ) 
 
     c o n s t   [ i s C h a t M i n i m i z e d ,   s e t I s C h a t M i n i m i z e d ]   =   u s e S t a t e ( f a l s e ) 
 
     c o n s t   [ i s A i T h i n k i n g ,   s e t I s A i T h i n k i n g ]   =   u s e S t a t e ( f a l s e ) 
 
     c o n s t   [ w e l c o m e T e x t ,   s e t W e l c o m e T e x t ]   =   u s e S t a t e ( " " ) 
 
     c o n s t   [ i s T y p i n g W e l c o m e ,   s e t I s T y p i n g W e l c o m e ]   =   u s e S t a t e ( t r u e ) 
 
     c o n s t   r o u t e r   =   u s e R o u t e r ( ) 
 
     c o n s t   s e a r c h P a r a m s   =   u s e S e a r c h P a r a m s ( ) 
 
     c o n s t   c h a t E n d R e f   =   u s e R e f < H T M L D i v E l e m e n t > ( n u l l ) 
 
 
 
     c o n s t   f u l l W e l c o m e T e x t   =   " W e l c o m e   t o   y o u r   G i t H u b   A I   A s s i s t a n t " 
 
 
 
     / /   T y p e w r i t e r   e f f e c t   f o r   w e l c o m e   m e s s a g e 
 
     u s e E f f e c t ( ( )   = >   { 
 
         i f   ( i s T y p i n g W e l c o m e   & &   s e s s i o n )   { 
 
             l e t   i n d e x   =   0 
 
             c o n s t   t i m e r   =   s e t I n t e r v a l ( ( )   = >   { 
 
                 i f   ( i n d e x   <   f u l l W e l c o m e T e x t . l e n g t h )   { 
 
                     s e t W e l c o m e T e x t ( f u l l W e l c o m e T e x t . s l i c e ( 0 ,   i n d e x   +   1 ) ) 
 
                     i n d e x + + 
 
                 }   e l s e   { 
 
                     s e t I s T y p i n g W e l c o m e ( f a l s e ) 
 
                     c l e a r I n t e r v a l ( t i m e r ) 
 
                 } 
 
             } ,   5 0 ) 
 
 
 
             r e t u r n   ( )   = >   c l e a r I n t e r v a l ( t i m e r ) 
 
         } 
 
     } ,   [ i s T y p i n g W e l c o m e ,   s e s s i o n ] ) 
 
 
 
     u s e E f f e c t ( ( )   = >   { 
 
         c o n s t   s u c c e s s   =   s e a r c h P a r a m s . g e t ( " s u c c e s s " ) 
 
         c o n s t   e r r o r P a r a m   =   s e a r c h P a r a m s . g e t ( " e r r o r " ) 
 
         c o n s t   o a u t h S u c c e s s   =   s e a r c h P a r a m s . g e t ( " o a u t h _ s u c c e s s " ) 
 
 
 
         i f   ( e r r o r P a r a m )   { 
 
             s e t E r r o r ( d e c o d e U R I C o m p o n e n t ( e r r o r P a r a m ) ) 
 
             s e t I s L o a d i n g ( f a l s e ) 
 
             r e t u r n 
 
         } 
 
 
 
         i f   ( s u c c e s s   = = =   " a u t h e n t i c a t e d "   | |   o a u t h S u c c e s s   = = =   " t r u e " )   { 
 
             f e t c h S e s s i o n D a t a ( ) 
 
         }   e l s e   { 
 
             f e t c h S e s s i o n D a t a ( ) 
 
         } 
 
     } ,   [ s e a r c h P a r a m s ] ) 
 
 
 
     u s e E f f e c t ( ( )   = >   { 
 
         c h a t E n d R e f . c u r r e n t ? . s c r o l l I n t o V i e w ( {   b e h a v i o r :   " s m o o t h "   } ) 
 
     } ,   [ c h a t M e s s a g e s ] ) 
 
 
 
     c o n s t   f e t c h S e s s i o n D a t a   =   a s y n c   ( )   = >   { 
 
         t r y   { 
 
             c o n s t   r e s p o n s e   =   a w a i t   f e t c h ( " / a p i / s e s s i o n " ) 
 
             i f   ( r e s p o n s e . o k )   { 
 
                 c o n s t   s e s s i o n D a t a   =   a w a i t   r e s p o n s e . j s o n ( ) 
 
                 s e t S e s s i o n ( s e s s i o n D a t a ) 
 
                 s e t R e p o s i t o r i e s ( s e s s i o n D a t a . r e p o s i t o r i e s   | |   [ ] ) 
 
             }   e l s e   { 
 
                 s e t E r r o r ( " N o   a c t i v e   s e s s i o n   f o u n d " ) 
 
             } 
 
         }   c a t c h   ( e r r )   { 
 
             c o n s o l e . e r r o r ( " F a i l e d   t o   f e t c h   s e s s i o n : " ,   e r r ) 
 
             s e t E r r o r ( " F a i l e d   t o   l o a d   s e s s i o n   d a t a " ) 
 
         }   f i n a l l y   { 
 
             s e t I s L o a d i n g ( f a l s e ) 
 
         } 
 
     } 
 
 
 
     c o n s t   h a n d l e S i g n O u t   =   a s y n c   ( )   = >   { 
 
         t r y   { 
 
             a w a i t   f e t c h ( " / a p i / s e s s i o n " ,   {   m e t h o d :   " D E L E T E "   } ) 
 
             s e t S e s s i o n ( n u l l ) 
 
             s e t R e p o s i t o r i e s ( [ ] ) 
 
             r o u t e r . p u s h ( " / " ) 
 
         }   c a t c h   ( e r r )   { 
 
             c o n s o l e . e r r o r ( " S i g n   o u t   e r r o r : " ,   e r r ) 
 
         } 
 
     } 
 
 
 
     c o n s t   h a n d l e D r a g S t a r t   =   ( e :   R e a c t . D r a g E v e n t ,   r e p o I d :   n u m b e r )   = >   { 
 
         s e t D r a g g e d R e p o ( r e p o I d ) 
 
         e . d a t a T r a n s f e r . e f f e c t A l l o w e d   =   " m o v e " 
 
     } 
 
 
 
     c o n s t   h a n d l e D r a g O v e r   =   ( e :   R e a c t . D r a g E v e n t )   = >   { 
 
         e . p r e v e n t D e f a u l t ( ) 
 
         e . d a t a T r a n s f e r . d r o p E f f e c t   =   " m o v e " 
 
     } 
 
 
 
     c o n s t   h a n d l e D r o p   =   ( e :   R e a c t . D r a g E v e n t ,   t a r g e t I n d e x :   n u m b e r )   = >   { 
 
         e . p r e v e n t D e f a u l t ( ) 
 
         i f   ( d r a g g e d R e p o   = = =   n u l l )   r e t u r n 
 
 
 
         c o n s t   d r a g g e d I n d e x   =   r e p o s i t o r i e s . f i n d I n d e x ( ( r e p o )   = >   r e p o . i d   = = =   d r a g g e d R e p o ) 
 
         i f   ( d r a g g e d I n d e x   = = =   - 1 )   r e t u r n 
 
 
 
         c o n s t   n e w R e p o s i t o r i e s   =   [ . . . r e p o s i t o r i e s ] 
 
         c o n s t   [ d r a g g e d I t e m ]   =   n e w R e p o s i t o r i e s . s p l i c e ( d r a g g e d I n d e x ,   1 ) 
 
         n e w R e p o s i t o r i e s . s p l i c e ( t a r g e t I n d e x ,   0 ,   d r a g g e d I t e m ) 
 
 
 
         s e t R e p o s i t o r i e s ( n e w R e p o s i t o r i e s ) 
 
         s e t D r a g g e d R e p o ( n u l l ) 
 
         s e t H a s C h a n g e s ( t r u e ) 
 
     } 
 
 
 
     c o n s t   t o g g l e R e p o E x p a n s i o n   =   ( r e p o I d :   n u m b e r )   = >   { 
 
         c o n s t   n e w E x p a n d e d   =   n e w   S e t ( e x p a n d e d R e p o s ) 
 
         i f   ( n e w E x p a n d e d . h a s ( r e p o I d ) )   { 
 
             n e w E x p a n d e d . d e l e t e ( r e p o I d ) 
 
         }   e l s e   { 
 
             n e w E x p a n d e d . a d d ( r e p o I d ) 
 
         } 
 
         s e t E x p a n d e d R e p o s ( n e w E x p a n d e d ) 
 
     } 
 
 
 
     c o n s t   h a n d l e S e n d M e s s a g e   =   a s y n c   ( )   = >   { 
 
         i f   ( ! c h a t M e s s a g e . t r i m ( ) )   r e t u r n 
 
 
 
         c o n s t   u s e r M e s s a g e :   C h a t M e s s a g e   =   { 
 
             i d :   D a t e . n o w ( ) . t o S t r i n g ( ) , 
 
             r o l e :   " u s e r " , 
 
             c o n t e n t :   c h a t M e s s a g e , 
 
             t i m e s t a m p :   n e w   D a t e ( ) , 
 
         } 
 
 
 
         s e t C h a t M e s s a g e s ( ( p r e v )   = >   [ . . . p r e v ,   u s e r M e s s a g e ] ) 
 
         s e t C h a t M e s s a g e ( " " ) 
 
         s e t I s A i T h i n k i n g ( t r u e ) 
 
 
 
         / /   S i m u l a t e   A I   r e s p o n s e 
 
         s e t T i m e o u t ( ( )   = >   { 
 
             c o n s t   a i M e s s a g e :   C h a t M e s s a g e   =   { 
 
                 i d :   ( D a t e . n o w ( )   +   1 ) . t o S t r i n g ( ) , 
 
                 r o l e :   " a s s i s t a n t " , 
 
                 c o n t e n t :   ` I   u n d e r s t a n d   y o u ' r e   a s k i n g   a b o u t :   " $ { u s e r M e s s a g e . c o n t e n t } " .   L e t   m e   a n a l y z e   y o u r   r e p o s i t o r i e s   a n d   p r o v i d e   s o m e   i n s i g h t s .   T h i s   i s   a   d e m o   r e s p o n s e   -   t h e   f u l l   A I   i n t e g r a t i o n   w i l l   b e   i m p l e m e n t e d   s o o n ! ` , 
 
                 t i m e s t a m p :   n e w   D a t e ( ) , 
 
             } 
 
             s e t C h a t M e s s a g e s ( ( p r e v )   = >   [ . . . p r e v ,   a i M e s s a g e ] ) 
 
             s e t I s A i T h i n k i n g ( f a l s e ) 
 
         } ,   2 0 0 0 ) 
 
     } 
 
 
 
     c o n s t   a p p l y C h a n g e s   =   ( )   = >   { 
 
         / /   T O D O :   I m p l e m e n t   a p p l y   c h a n g e s   f u n c t i o n a l i t y 
 
         c o n s o l e . l o g ( " A p p l y i n g   c h a n g e s   t o   r e p o s i t o r y   o r d e r . . . " ) 
 
         s e t H a s C h a n g e s ( f a l s e ) 
 
     } 
 
 
 
     c o n s t   g e t L a n g u a g e C o l o r   =   ( l a n g u a g e :   s t r i n g )   = >   { 
 
         c o n s t   c o l o r s :   {   [ k e y :   s t r i n g ] :   s t r i n g   }   =   { 
 
             J a v a S c r i p t :   " b g - y e l l o w - 5 0 0 " , 
 
             T y p e S c r i p t :   " b g - b l u e - 5 0 0 " , 
 
             P y t h o n :   " b g - g r e e n - 5 0 0 " , 
 
             J a v a :   " b g - r e d - 5 0 0 " , 
 
             " C + + " :   " b g - p u r p l e - 5 0 0 " , 
 
             G o :   " b g - c y a n - 5 0 0 " , 
 
             R u s t :   " b g - o r a n g e - 5 0 0 " , 
 
             P H P :   " b g - i n d i g o - 5 0 0 " , 
 
         } 
 
         r e t u r n   c o l o r s [ l a n g u a g e ]   | |   " b g - g r a y - 5 0 0 " 
 
     } 
 
 
 
     c o n s t   f o r m a t T i m e A g o   =   ( d a t e S t r i n g :   s t r i n g )   = >   { 
 
         c o n s t   d a t e   =   n e w   D a t e ( d a t e S t r i n g ) 
 
         c o n s t   n o w   =   n e w   D a t e ( ) 
 
         c o n s t   d i f f I n D a y s   =   M a t h . f l o o r ( ( n o w . g e t T i m e ( )   -   d a t e . g e t T i m e ( ) )   /   ( 1 0 0 0   *   6 0   *   6 0   *   2 4 ) ) 
 
 
 
         i f   ( d i f f I n D a y s   = = =   0 )   r e t u r n   " T o d a y " 
 
         i f   ( d i f f I n D a y s   = = =   1 )   r e t u r n   " 1   d a y   a g o " 
 
         i f   ( d i f f I n D a y s   <   7 )   r e t u r n   ` $ { d i f f I n D a y s }   d a y s   a g o ` 
 
         i f   ( d i f f I n D a y s   <   1 4 )   r e t u r n   " 1   w e e k   a g o " 
 
         i f   ( d i f f I n D a y s   <   3 0 )   r e t u r n   ` $ { M a t h . f l o o r ( d i f f I n D a y s   /   7 ) }   w e e k s   a g o ` 
 
         r e t u r n   ` $ { M a t h . f l o o r ( d i f f I n D a y s   /   3 0 ) }   m o n t h s   a g o ` 
 
     } 
 
 
 
     c o n s t   T h i n k i n g S p i n n e r   =   ( )   = >   { 
 
         c o n s t   [ s p i n n e r C h a r ,   s e t S p i n n e r C h a r ]   =   u s e S t a t e ( 0 ) 
 
         c o n s t   c h a r s   =   [ " | " ,   " / " ,   " - " ,   " \ \ " ] 
 
 
 
         u s e E f f e c t ( ( )   = >   { 
 
             c o n s t   i n t e r v a l   =   s e t I n t e r v a l ( ( )   = >   { 
 
                 s e t S p i n n e r C h a r ( ( p r e v )   = >   ( p r e v   +   1 )   %   c h a r s . l e n g t h ) 
 
             } ,   2 0 0 ) 
 
 
 
             r e t u r n   ( )   = >   c l e a r I n t e r v a l ( i n t e r v a l ) 
 
         } ,   [ ] ) 
 
 
 
         r e t u r n   < s p a n   c l a s s N a m e = " f o n t - m o n o " > { c h a r s [ s p i n n e r C h a r ] } < / s p a n > 
 
     } 
 
 
 
     i f   ( i s L o a d i n g )   { 
 
         r e t u r n   ( 
 
             < d i v   c l a s s N a m e = " m i n - h - s c r e e n   b g - b a c k g r o u n d   t e x t - f o r e g r o u n d   f l e x   i t e m s - c e n t e r   j u s t i f y - c e n t e r " > 
 
                 < d i v   c l a s s N a m e = " t e x t - c e n t e r " > 
 
                     < d i v   c l a s s N a m e = " a n i m a t e - s p i n   r o u n d e d - f u l l   h - 1 2   w - 1 2   b o r d e r - b - 2   b o r d e r - p u r p l e - 4 0 0   m x - a u t o   m b - 4 " > < / d i v > 
 
                     < p   c l a s s N a m e = " t e x t - m u t e d - f o r e g r o u n d " > L o a d i n g   y o u r   G i t H u b   d a t a . . . < / p > 
 
                 < / d i v > 
 
             < / d i v > 
 
         ) 
 
     } 
 
 
 
     i f   ( e r r o r   | |   ! s e s s i o n )   { 
 
         r e t u r n   ( 
 
             < d i v   c l a s s N a m e = " m i n - h - s c r e e n   b g - b a c k g r o u n d   t e x t - f o r e g r o u n d   f l e x   i t e m s - c e n t e r   j u s t i f y - c e n t e r " > 
 
                 < C a r d > 
 
                     < C a r d C o n t e n t   c l a s s N a m e = " p - 6   t e x t - c e n t e r " > 
 
                         < G i t h u b   c l a s s N a m e = " h - 1 2   w - 1 2   t e x t - m u t e d - f o r e g r o u n d   m x - a u t o   m b - 4 "   / > 
 
                         < h 2   c l a s s N a m e = " t e x t - x l   f o n t - b o l d   m b - 2 " > A u t h e n t i c a t i o n   R e q u i r e d < / h 2 > 
 
                         < p   c l a s s N a m e = " t e x t - m u t e d - f o r e g r o u n d   m b - 4 " > { e r r o r   | |   " P l e a s e   c o n n e c t   y o u r   G i t H u b   a c c o u n t " } < / p > 
 
                         < B u t t o n   o n C l i c k = { ( )   = >   r o u t e r . p u s h ( " / " ) }   c l a s s N a m e = " b g - p u r p l e - 6 0 0   h o v e r : b g - p u r p l e - 7 0 0 " > 
 
                             < G i t h u b   c l a s s N a m e = " h - 4   w - 4   m r - 2 "   / > 
 
                             C o n n e c t   G i t H u b 
 
                         < / B u t t o n > 
 
                     < / C a r d C o n t e n t > 
 
                 < / C a r d > 
 
             < / d i v > 
 
         ) 
 
     } 
 
 
 
     c o n s t   p u b l i c R e p o s   =   r e p o s i t o r i e s . f i l t e r ( ( r e p o )   = >   ! r e p o . p r i v a t e ) . l e n g t h 
 
     c o n s t   p r i v a t e R e p o s   =   r e p o s i t o r i e s . f i l t e r ( ( r e p o )   = >   r e p o . p r i v a t e ) . l e n g t h 
 
     c o n s t   t o t a l S t a r s   =   r e p o s i t o r i e s . r e d u c e ( ( a c c ,   r e p o )   = >   a c c   +   r e p o . s t a r g a z e r s _ c o u n t ,   0 ) 
 
     c o n s t   o r g a n i z e d R e p o s   =   r e p o s i t o r i e s . f i l t e r ( ( r e p o )   = >   r e p o . d e s c r i p t i o n   & &   r e p o . d e s c r i p t i o n . l e n g t h   >   2 0 ) . l e n g t h 
 
 
 
     r e t u r n   ( 
 
         < d i v   c l a s s N a m e = " m i n - h - s c r e e n   b g - b a c k g r o u n d   t e x t - f o r e g r o u n d " > 
 
             { / *   H e a d e r   * / } 
 
             < h e a d e r   c l a s s N a m e = " b o r d e r - b   b o r d e r - b o r d e r   b g - c a r d " > 
 
                 < d i v   c l a s s N a m e = " c o n t a i n e r   m x - a u t o   p x - 6   p y - 4 " > 
 
                     < d i v   c l a s s N a m e = " f l e x   i t e m s - c e n t e r   j u s t i f y - b e t w e e n " > 
 
                         < d i v   c l a s s N a m e = " f l e x   i t e m s - c e n t e r   s p a c e - x - 4 " > 
 
                             < d i v   c l a s s N a m e = " f l e x   i t e m s - c e n t e r   s p a c e - x - 2 " > 
 
                                 < G i t h u b   c l a s s N a m e = " h - 6   w - 6 "   / > 
 
                                 < s p a n   c l a s s N a m e = " t e x t - l g   f o n t - s e m i b o l d " > G i t H u b   T a i l o r e d   A I < / s p a n > 
 
                             < / d i v > 
 
                             < n a v   c l a s s N a m e = " f l e x   i t e m s - c e n t e r   s p a c e - x - 6 " > 
 
                                 < s p a n   c l a s s N a m e = " f o n t - m e d i u m " > D a s h b o a r d < / s p a n > 
 
                             < / n a v > 
 
                         < / d i v > 
 
 
 
                         < d i v   c l a s s N a m e = " f l e x   i t e m s - c e n t e r   s p a c e - x - 4 " > 
 
                             < T h e m e T o g g l e   / > 
 
                             < d i v   c l a s s N a m e = " f l e x   i t e m s - c e n t e r   s p a c e - x - 2 " > 
 
                                 < A v a t a r   c l a s s N a m e = " h - 8   w - 8 " > 
 
                                     < A v a t a r I m a g e   s r c = { s e s s i o n . u s e r . a v a t a r _ u r l   | |   " / p l a c e h o l d e r . s v g " }   a l t = { s e s s i o n . u s e r . l o g i n }   / > 
 
                                     < A v a t a r F a l l b a c k > { s e s s i o n . u s e r . l o g i n . c h a r A t ( 0 ) . t o U p p e r C a s e ( ) } < / A v a t a r F a l l b a c k > 
 
                                 < / A v a t a r > 
 
                                 < d i v   c l a s s N a m e = " t e x t - s m " > 
 
                                     < d i v   c l a s s N a m e = " f o n t - m e d i u m " > { s e s s i o n . u s e r . l o g i n } < / d i v > 
 
                                     < d i v   c l a s s N a m e = " t e x t - m u t e d - f o r e g r o u n d " > @ { s e s s i o n . u s e r . l o g i n } < / d i v > 
 
                                 < / d i v > 
 
                             < / d i v > 
 
                             < B u t t o n   v a r i a n t = " g h o s t "   s i z e = " s m "   c l a s s N a m e = " t e x t - m u t e d - f o r e g r o u n d   h o v e r : t e x t - f o r e g r o u n d " > 
 
                                 < S e t t i n g s   c l a s s N a m e = " h - 4   w - 4 "   / > 
 
                             < / B u t t o n > 
 
                             < B u t t o n 
 
                                 v a r i a n t = " g h o s t " 
 
                                 s i z e = " s m " 
 
                                 o n C l i c k = { h a n d l e S i g n O u t } 
 
                                 c l a s s N a m e = " t e x t - m u t e d - f o r e g r o u n d   h o v e r : t e x t - f o r e g r o u n d " 
 
                             > 
 
                                 < L o g O u t   c l a s s N a m e = " h - 4   w - 4 "   / > 
 
                             < / B u t t o n > 
 
                         < / d i v > 
 
                     < / d i v > 
 
                 < / d i v > 
 
             < / h e a d e r > 
 
 
 
             < d i v   c l a s s N a m e = " c o n t a i n e r   m x - a u t o   p x - 6   p y - 8 " > 
 
                 { / *   W e l c o m e   S e c t i o n   * / } 
 
                 < d i v   c l a s s N a m e = " m b - 8 " > 
 
                     < h 1   c l a s s N a m e = " t e x t - 3 x l   f o n t - b o l d   m b - 2 " > W e l c o m e   b a c k ,   { s e s s i o n . u s e r . l o g i n } !      < / h 1 > 
 
                     < p   c l a s s N a m e = " t e x t - m u t e d - f o r e g r o u n d " > R e a d y   t o   o r g a n i z e   y o u r   G i t H u b   r e p o s i t o r i e s   a n d   m a k e   t h e m   j o b - r e a d y ? < / p > 
 
                 < / d i v > 
 
 
 
                 { / *   S t a t s   C a r d s   * / } 
 
                 < d i v   c l a s s N a m e = " g r i d   m d : g r i d - c o l s - 3   g a p - 6   m b - 8 " > 
 
                     < C a r d > 
 
                         < C a r d C o n t e n t   c l a s s N a m e = " p - 6 " > 
 
                             < d i v   c l a s s N a m e = " f l e x   i t e m s - c e n t e r   j u s t i f y - b e t w e e n " > 
 
                                 < d i v > 
 
                                     < p   c l a s s N a m e = " t e x t - m u t e d - f o r e g r o u n d   t e x t - s m   m b - 1 " > T o t a l   R e p o s i t o r i e s < / p > 
 
                                     < p   c l a s s N a m e = " t e x t - 3 x l   f o n t - b o l d " > { r e p o s i t o r i e s . l e n g t h } < / p > 
 
                                     < p   c l a s s N a m e = " t e x t - m u t e d - f o r e g r o u n d   t e x t - s m " > 
 
                                         { p u b l i c R e p o s }   p u b l i c ,   { p r i v a t e R e p o s }   p r i v a t e 
 
                                     < / p > 
 
                                 < / d i v > 
 
                                 < F o l d e r   c l a s s N a m e = " h - 8   w - 8   t e x t - m u t e d - f o r e g r o u n d "   / > 
 
                             < / d i v > 
 
                         < / C a r d C o n t e n t > 
 
                     < / C a r d > 
 
 
 
                     < C a r d > 
 
                         < C a r d C o n t e n t   c l a s s N a m e = " p - 6 " > 
 
                             < d i v   c l a s s N a m e = " f l e x   i t e m s - c e n t e r   j u s t i f y - b e t w e e n " > 
 
                                 < d i v > 
 
                                     < p   c l a s s N a m e = " t e x t - m u t e d - f o r e g r o u n d   t e x t - s m   m b - 1 " > O r g a n i z e d < / p > 
 
                                     < p   c l a s s N a m e = " t e x t - 3 x l   f o n t - b o l d " > { o r g a n i z e d R e p o s } < / p > 
 
                                     < p   c l a s s N a m e = " t e x t - m u t e d - f o r e g r o u n d   t e x t - s m " > R e p o s i t o r i e s   w i t h   d e t a i l e d   d e s c r i p t i o n s < / p > 
 
                                 < / d i v > 
 
                                 < d i v   c l a s s N a m e = " f l e x   i t e m s - c e n t e r " > 
 
                                     < P l u s   c l a s s N a m e = " h - 8   w - 8   t e x t - m u t e d - f o r e g r o u n d "   / > 
 
                                 < / d i v > 
 
                             < / d i v > 
 
                         < / C a r d C o n t e n t > 
 
                     < / C a r d > 
 
 
 
                     < C a r d > 
 
                         < C a r d C o n t e n t   c l a s s N a m e = " p - 6 " > 
 
                             < d i v   c l a s s N a m e = " f l e x   i t e m s - c e n t e r   j u s t i f y - b e t w e e n " > 
 
                                 < d i v > 
 
                                     < p   c l a s s N a m e = " t e x t - m u t e d - f o r e g r o u n d   t e x t - s m   m b - 1 " > T o t a l   S t a r s < / p > 
 
                                     < p   c l a s s N a m e = " t e x t - 3 x l   f o n t - b o l d " > { t o t a l S t a r s } < / p > 
 
                                     < p   c l a s s N a m e = " t e x t - m u t e d - f o r e g r o u n d   t e x t - s m " > C o m b i n e d   s t a r s   a c r o s s   a l l   r e p o s i t o r i e s < / p > 
 
                                 < / d i v > 
 
                                 < S t a r   c l a s s N a m e = " h - 8   w - 8   t e x t - m u t e d - f o r e g r o u n d "   / > 
 
                             < / d i v > 
 
                         < / C a r d C o n t e n t > 
 
                     < / C a r d > 
 
                 < / d i v > 
 
 
 
                 { / *   M a i n   C o n t e n t   * / } 
 
                 < d i v   c l a s s N a m e = " g r i d   l g : g r i d - c o l s - 3   g a p - 8 " > 
 
                     { / *   R e p o s i t o r i e s   L i s t   * / } 
 
                     < d i v   c l a s s N a m e = " l g : c o l - s p a n - 2 " > 
 
                         < C a r d > 
 
                             < C a r d H e a d e r > 
 
                                 < C a r d T i t l e   c l a s s N a m e = " f l e x   i t e m s - c e n t e r   g a p - 2 " > 
 
                                     < F o l d e r   c l a s s N a m e = " h - 5   w - 5 "   / > 
 
                                     Y o u r   R e p o s i t o r i e s 
 
                                 < / C a r d T i t l e > 
 
                                 < p   c l a s s N a m e = " t e x t - m u t e d - f o r e g r o u n d   t e x t - s m " > 
 
                                     D r a g   a n d   d r o p   t o   p r i o r i t i z e   r e p o s i t o r i e s   f o r   y o u r   p o r t f o l i o 
 
                                 < / p > 
 
                             < / C a r d H e a d e r > 
 
                             < C a r d C o n t e n t   c l a s s N a m e = " p - 0 " > 
 
                                 < d i v   c l a s s N a m e = " s p a c e - y - 0 " > 
 
                                     { r e p o s i t o r i e s . m a p ( ( r e p o ,   i n d e x )   = >   ( 
 
                                         < d i v   k e y = { r e p o . i d }   c l a s s N a m e = " b o r d e r - b   b o r d e r - b o r d e r   l a s t : b o r d e r - b - 0 " > 
 
                                             < d i v 
 
                                                 d r a g g a b l e 
 
                                                 o n D r a g S t a r t = { ( e )   = >   h a n d l e D r a g S t a r t ( e ,   r e p o . i d ) } 
 
                                                 o n D r a g O v e r = { h a n d l e D r a g O v e r } 
 
                                                 o n D r o p = { ( e )   = >   h a n d l e D r o p ( e ,   i n d e x ) } 
 
                                                 c l a s s N a m e = " f l e x   i t e m s - c e n t e r   p - 4   h o v e r : b g - a c c e n t / 5 0   c u r s o r - m o v e   t r a n s i t i o n - c o l o r s " 
 
                                             > 
 
                                                 < G r i p V e r t i c a l   c l a s s N a m e = " h - 4   w - 4   t e x t - m u t e d - f o r e g r o u n d   m r - 3 "   / > 
 
                                                 < B u t t o n 
 
                                                     v a r i a n t = " g h o s t " 
 
                                                     s i z e = " s m " 
 
                                                     o n C l i c k = { ( )   = >   t o g g l e R e p o E x p a n s i o n ( r e p o . i d ) } 
 
                                                     c l a s s N a m e = " p - 0   h - a u t o   m r - 2   t e x t - m u t e d - f o r e g r o u n d   h o v e r : t e x t - f o r e g r o u n d " 
 
                                                 > 
 
                                                     { e x p a n d e d R e p o s . h a s ( r e p o . i d )   ?   ( 
 
                                                         < C h e v r o n D o w n   c l a s s N a m e = " h - 4   w - 4 "   / > 
 
                                                     )   :   ( 
 
                                                         < C h e v r o n R i g h t   c l a s s N a m e = " h - 4   w - 4 "   / > 
 
                                                     ) } 
 
                                                 < / B u t t o n > 
 
                                                 < F o l d e r   c l a s s N a m e = " h - 4   w - 4   t e x t - b l u e - 4 0 0   m r - 3 "   / > 
 
                                                 < d i v   c l a s s N a m e = " f l e x - 1   m i n - w - 0 " > 
 
                                                     < d i v   c l a s s N a m e = " f l e x   i t e m s - c e n t e r   g a p - 2   m b - 1 " > 
 
                                                         < s p a n   c l a s s N a m e = " f o n t - m e d i u m   t e x t - b l u e - 4 0 0   h o v e r : u n d e r l i n e   c u r s o r - p o i n t e r " > 
 
                                                             { r e p o . n a m e } 
 
                                                         < / s p a n > 
 
                                                         < d i v   c l a s s N a m e = " f l e x   i t e m s - c e n t e r   g a p - 2   t e x t - x s   t e x t - m u t e d - f o r e g r o u n d " > 
 
                                                             { r e p o . l a n g u a g e   & &   ( 
 
                                                                 < B a d g e   v a r i a n t = " s e c o n d a r y "   c l a s s N a m e = " b g - b l u e - 6 0 0   t e x t - w h i t e   t e x t - x s " > 
 
                                                                     { r e p o . l a n g u a g e } 
 
                                                                 < / B a d g e > 
 
                                                             ) } 
 
                                                             < d i v   c l a s s N a m e = " f l e x   i t e m s - c e n t e r   g a p - 1 " > 
 
                                                                 < S t a r   c l a s s N a m e = " h - 3   w - 3 "   / > 
 
                                                                 { r e p o . s t a r g a z e r s _ c o u n t } 
 
                                                             < / d i v > 
 
                                                             < d i v   c l a s s N a m e = " f l e x   i t e m s - c e n t e r   g a p - 1 " > 
 
                                                                 < G i t F o r k   c l a s s N a m e = " h - 3   w - 3 "   / > 
 
                                                                 { r e p o . f o r k s _ c o u n t } 
 
                                                             < / d i v > 
 
                                                             < d i v   c l a s s N a m e = " f l e x   i t e m s - c e n t e r   g a p - 1 " > 
 
                                                                 < C l o c k   c l a s s N a m e = " h - 3   w - 3 "   / > 
 
                                                                 { f o r m a t T i m e A g o ( r e p o . u p d a t e d _ a t ) } 
 
                                                             < / d i v > 
 
                                                         < / d i v > 
 
                                                     < / d i v > 
 
                                                     { r e p o . d e s c r i p t i o n   & &   ( 
 
                                                         < p   c l a s s N a m e = " t e x t - m u t e d - f o r e g r o u n d   t e x t - s m   t r u n c a t e " > { r e p o . d e s c r i p t i o n } < / p > 
 
                                                     ) } 
 
                                                 < / d i v > 
 
                                             < / d i v > 
 
 
 
                                             { / *   E x p a n d e d   R e p o s i t o r y   D e t a i l s   * / } 
 
                                             { e x p a n d e d R e p o s . h a s ( r e p o . i d )   & &   ( 
 
                                                 < d i v   c l a s s N a m e = " b g - a c c e n t / 2 0   p - 4   b o r d e r - t   b o r d e r - b o r d e r " > 
 
                                                     < d i v   c l a s s N a m e = " g r i d   m d : g r i d - c o l s - 2   g a p - 4 " > 
 
                                                         < d i v > 
 
                                                             < h 4   c l a s s N a m e = " f o n t - s e m i b o l d   m b - 2 " > R e p o s i t o r y   D e t a i l s < / h 4 > 
 
                                                             < d i v   c l a s s N a m e = " s p a c e - y - 2   t e x t - s m " > 
 
                                                                 < d i v   c l a s s N a m e = " f l e x   j u s t i f y - b e t w e e n " > 
 
                                                                     < s p a n   c l a s s N a m e = " t e x t - m u t e d - f o r e g r o u n d " > F u l l   N a m e : < / s p a n > 
 
                                                                     < s p a n > { r e p o . f u l l _ n a m e } < / s p a n > 
 
                                                                 < / d i v > 
 
                                                                 < d i v   c l a s s N a m e = " f l e x   j u s t i f y - b e t w e e n " > 
 
                                                                     < s p a n   c l a s s N a m e = " t e x t - m u t e d - f o r e g r o u n d " > L a n g u a g e : < / s p a n > 
 
                                                                     < s p a n > { r e p o . l a n g u a g e   | |   " N o t   s p e c i f i e d " } < / s p a n > 
 
                                                                 < / d i v > 
 
                                                                 < d i v   c l a s s N a m e = " f l e x   j u s t i f y - b e t w e e n " > 
 
                                                                     < s p a n   c l a s s N a m e = " t e x t - m u t e d - f o r e g r o u n d " > V i s i b i l i t y : < / s p a n > 
 
                                                                     < s p a n > { r e p o . p r i v a t e   ?   " P r i v a t e "   :   " P u b l i c " } < / s p a n > 
 
                                                                 < / d i v > 
 
                                                                 < d i v   c l a s s N a m e = " f l e x   j u s t i f y - b e t w e e n " > 
 
                                                                     < s p a n   c l a s s N a m e = " t e x t - m u t e d - f o r e g r o u n d " > L a s t   U p d a t e d : < / s p a n > 
 
                                                                     < s p a n > { f o r m a t T i m e A g o ( r e p o . u p d a t e d _ a t ) } < / s p a n > 
 
                                                                 < / d i v > 
 
                                                             < / d i v > 
 
                                                         < / d i v > 
 
                                                         < d i v > 
 
                                                             < h 4   c l a s s N a m e = " f o n t - s e m i b o l d   m b - 2 " > Q u i c k   A c t i o n s < / h 4 > 
 
                                                             < d i v   c l a s s N a m e = " s p a c e - y - 2 " > 
 
                                                                 < B u t t o n   s i z e = " s m "   v a r i a n t = " o u t l i n e "   c l a s s N a m e = " w - f u l l   j u s t i f y - s t a r t   b g - t r a n s p a r e n t " > 
 
                                                                     < E y e   c l a s s N a m e = " h - 4   w - 4   m r - 2 "   / > 
 
                                                                     P r e v i e w   C h a n g e s 
 
                                                                 < / B u t t o n > 
 
                                                                 < B u t t o n   s i z e = " s m "   v a r i a n t = " o u t l i n e "   c l a s s N a m e = " w - f u l l   j u s t i f y - s t a r t   b g - t r a n s p a r e n t " > 
 
                                                                     < F i l e T e x t   c l a s s N a m e = " h - 4   w - 4   m r - 2 "   / > 
 
                                                                     G e n e r a t e   R E A D M E 
 
                                                                 < / B u t t o n > 
 
                                                                 < B u t t o n 
 
                                                                     s i z e = " s m " 
 
                                                                     v a r i a n t = " o u t l i n e " 
 
                                                                     c l a s s N a m e = " w - f u l l   j u s t i f y - s t a r t   b g - t r a n s p a r e n t " 
 
                                                                     a s C h i l d 
 
                                                                 > 
 
                                                                     < a   h r e f = { r e p o . h t m l _ u r l }   t a r g e t = " _ b l a n k "   r e l = " n o o p e n e r   n o r e f e r r e r " > 
 
                                                                         < G i t h u b   c l a s s N a m e = " h - 4   w - 4   m r - 2 "   / > 
 
                                                                         V i e w   o n   G i t H u b 
 
                                                                     < / a > 
 
                                                                 < / B u t t o n > 
 
                                                             < / d i v > 
 
                                                         < / d i v > 
 
                                                     < / d i v > 
 
                                                 < / d i v > 
 
                                             ) } 
 
                                         < / d i v > 
 
                                     ) ) } 
 
                                 < / d i v > 
 
                             < / C a r d C o n t e n t > 
 
                         < / C a r d > 
 
 
 
                         { / *   A p p l y   C h a n g e s   B u t t o n   -   O n l y   s h o w   w h e n   t h e r e   a r e   c h a n g e s   * / } 
 
                         { h a s C h a n g e s   & &   ( 
 
                             < d i v   c l a s s N a m e = " m t - 4 " > 
 
                                 < B u t t o n   o n C l i c k = { a p p l y C h a n g e s }   c l a s s N a m e = " b g - g r e e n - 6 0 0   h o v e r : b g - g r e e n - 7 0 0   w - f u l l " > 
 
                                     A p p l y   C h a n g e s 
 
                                 < / B u t t o n > 
 
                             < / d i v > 
 
                         ) } 
 
                     < / d i v > 
 
 
 
                     { / *   A I   A s s i s t a n t   * / } 
 
                     < d i v   c l a s s N a m e = " l g : c o l - s p a n - 1 " > 
 
                         { ! i s C h a t M i n i m i z e d   ?   ( 
 
                             < C a r d > 
 
                                 < C a r d H e a d e r   c l a s s N a m e = " p b - 3 " > 
 
                                     < d i v   c l a s s N a m e = " f l e x   i t e m s - c e n t e r   g a p - 2 " > 
 
                                         < d i v   c l a s s N a m e = " f l e x   g a p - 1 " > 
 
                                             < d i v   c l a s s N a m e = " w - 3   h - 3   b g - r e d - 5 0 0   r o u n d e d - f u l l " > < / d i v > 
 
                                             < B u t t o n 
 
                                                 v a r i a n t = " g h o s t " 
 
                                                 s i z e = " s m " 
 
                                                 o n C l i c k = { ( )   = >   s e t I s C h a t M i n i m i z e d ( t r u e ) } 
 
                                                 c l a s s N a m e = " w - 3   h - 3   b g - y e l l o w - 5 0 0   r o u n d e d - f u l l   p - 0   h o v e r : b g - y e l l o w - 6 0 0 " 
 
                                             / > 
 
                                             < d i v   c l a s s N a m e = " w - 3   h - 3   b g - g r e e n - 5 0 0   r o u n d e d - f u l l " > < / d i v > 
 
                                         < / d i v > 
 
                                         < s p a n   c l a s s N a m e = " t e x t - s m   f o n t - m e d i u m   m l - 2 " > A I   A s s i s t a n t < / s p a n > 
 
                                     < / d i v > 
 
                                 < / C a r d H e a d e r > 
 
                                 < C a r d C o n t e n t   c l a s s N a m e = " s p a c e - y - 4 " > 
 
                                     < d i v   c l a s s N a m e = " b g - b a c k g r o u n d   r o u n d e d - l g   p - 4   b o r d e r   b o r d e r - b o r d e r   m a x - h - 9 6   o v e r f l o w - y - a u t o " > 
 
                                         < d i v   c l a s s N a m e = " f l e x   i t e m s - c e n t e r   g a p - 2   m b - 3 " > 
 
                                             < G i t h u b   c l a s s N a m e = " h - 6   w - 6 "   / > 
 
                                         < / d i v > 
 
                                         < h 3   c l a s s N a m e = " f o n t - s e m i b o l d   m b - 2 " > 
 
                                             { i s T y p i n g W e l c o m e   ?   ( 
 
                                                 < s p a n > 
 
                                                     { w e l c o m e T e x t } 
 
                                                     < s p a n   c l a s s N a m e = " a n i m a t e - p u l s e " > | < / s p a n > 
 
                                                 < / s p a n > 
 
                                             )   :   ( 
 
                                                 w e l c o m e T e x t 
 
                                             ) } 
 
                                         < / h 3 > 
 
                                         { ! i s T y p i n g W e l c o m e   & &   ( 
 
                                             < p   c l a s s N a m e = " t e x t - m u t e d - f o r e g r o u n d   t e x t - s m   m b - 4 " > 
 
                                                 A s k   m e   a n y t h i n g   a b o u t   y o u r   r e p o s i t o r i e s ,   c o d e   s t r u c t u r e ,   o r   g e t   s u g g e s t i o n s   f o r   i m p r o v e m e n t s . 
 
                                             < / p > 
 
                                         ) } 
 
 
 
                                         { ! i s T y p i n g W e l c o m e   & &   ( 
 
                                             < d i v   c l a s s N a m e = " s p a c e - y - 2   m b - 4 " > 
 
                                                 < B u t t o n   v a r i a n t = " o u t l i n e "   s i z e = " s m "   c l a s s N a m e = " w - f u l l   j u s t i f y - s t a r t   b g - t r a n s p a r e n t " > 
 
                                                     < C o d e   c l a s s N a m e = " h - 4   w - 4   m r - 2 "   / > 
 
                                                     A n a l y z e   S t r u c t u r e 
 
                                                 < / B u t t o n > 
 
                                                 < B u t t o n   v a r i a n t = " o u t l i n e "   s i z e = " s m "   c l a s s N a m e = " w - f u l l   j u s t i f y - s t a r t   b g - t r a n s p a r e n t " > 
 
                                                     < F i l e T e x t   c l a s s N a m e = " h - 4   w - 4   m r - 2 "   / > 
 
                                                     G e n e r a t e   R E A D M E 
 
                                                 < / B u t t o n > 
 
                                                 < B u t t o n   v a r i a n t = " o u t l i n e "   s i z e = " s m "   c l a s s N a m e = " w - f u l l   j u s t i f y - s t a r t   b g - t r a n s p a r e n t " > 
 
                                                     < L i g h t b u l b   c l a s s N a m e = " h - 4   w - 4   m r - 2 "   / > 
 
                                                     G e t   S u g g e s t i o n s 
 
                                                 < / B u t t o n > 
 
                                             < / d i v > 
 
                                         ) } 
 
 
 
                                         { / *   C h a t   M e s s a g e s   * / } 
 
                                         < d i v   c l a s s N a m e = " s p a c e - y - 3   m a x - h - 4 8   o v e r f l o w - y - a u t o " > 
 
                                             { c h a t M e s s a g e s . m a p ( ( m e s s a g e )   = >   ( 
 
                                                 < d i v 
 
                                                     k e y = { m e s s a g e . i d } 
 
                                                     c l a s s N a m e = { ` f l e x   $ { m e s s a g e . r o l e   = = =   " u s e r "   ?   " j u s t i f y - e n d "   :   " j u s t i f y - s t a r t " } ` } 
 
                                                 > 
 
                                                     < d i v 
 
                                                         c l a s s N a m e = { ` m a x - w - x s   p - 2   r o u n d e d - l g   t e x t - s m   $ { 
 
                                                             m e s s a g e . r o l e   = = =   " u s e r " 
 
                                                                 ?   " b g - b l u e - 6 0 0   t e x t - w h i t e " 
 
                                                                 :   " b g - a c c e n t   t e x t - f o r e g r o u n d   b o r d e r   b o r d e r - b o r d e r " 
 
                                                         } ` } 
 
                                                     > 
 
                                                         { m e s s a g e . c o n t e n t } 
 
                                                     < / d i v > 
 
                                                 < / d i v > 
 
                                             ) ) } 
 
                                             { i s A i T h i n k i n g   & &   ( 
 
                                                 < d i v   c l a s s N a m e = " f l e x   j u s t i f y - s t a r t " > 
 
                                                     < d i v   c l a s s N a m e = " b g - a c c e n t   t e x t - f o r e g r o u n d   b o r d e r   b o r d e r - b o r d e r   p - 2   r o u n d e d - l g   t e x t - s m   f l e x   i t e m s - c e n t e r   g a p - 2 " > 
 
                                                         < T h i n k i n g S p i n n e r   / > 
 
                                                         < s p a n > A I   i s   t h i n k i n g . . . < / s p a n > 
 
                                                         < B u t t o n 
 
                                                             v a r i a n t = " g h o s t " 
 
                                                             s i z e = " s m " 
 
                                                             o n C l i c k = { ( )   = >   s e t I s A i T h i n k i n g ( f a l s e ) } 
 
                                                             c l a s s N a m e = " p - 0   h - a u t o   m l - 2 " 
 
                                                         > 
 
                                                             < S q u a r e   c l a s s N a m e = " h - 3   w - 3   t e x t - r e d - 5 0 0   f i l l - c u r r e n t "   / > 
 
                                                         < / B u t t o n > 
 
                                                     < / d i v > 
 
                                                 < / d i v > 
 
                                             ) } 
 
                                             < d i v   r e f = { c h a t E n d R e f }   / > 
 
                                         < / d i v > 
 
                                     < / d i v > 
 
 
 
                                     { ! i s T y p i n g W e l c o m e   & &   ( 
 
                                         < d i v   c l a s s N a m e = " s p a c e - y - 3 " > 
 
                                             < d i v   c l a s s N a m e = " f l e x   g a p - 2 " > 
 
                                                 < I n p u t 
 
                                                     p l a c e h o l d e r = " A s k   a b o u t   y o u r   r e p o s i t o r i e s . . . " 
 
                                                     v a l u e = { c h a t M e s s a g e } 
 
                                                     o n C h a n g e = { ( e )   = >   s e t C h a t M e s s a g e ( e . t a r g e t . v a l u e ) } 
 
                                                     o n K e y P r e s s = { ( e )   = >   e . k e y   = = =   " E n t e r "   & &   h a n d l e S e n d M e s s a g e ( ) } 
 
                                                     c l a s s N a m e = " b g - b a c k g r o u n d   b o r d e r - b o r d e r " 
 
                                                 / > 
 
                                                 { c h a t M e s s a g e . t r i m ( )   & &   ( 
 
                                                     < B u t t o n   o n C l i c k = { h a n d l e S e n d M e s s a g e }   s i z e = " s m "   c l a s s N a m e = " b g - p u r p l e - 6 0 0   h o v e r : b g - p u r p l e - 7 0 0 " > 
 
                                                         < S e n d   c l a s s N a m e = " h - 4   w - 4 "   / > 
 
                                                     < / B u t t o n > 
 
                                                 ) } 
 
                                             < / d i v > 
 
                                         < / d i v > 
 
                                     ) } 
 
                                 < / C a r d C o n t e n t > 
 
                             < / C a r d > 
 
                         )   :   ( 
 
                             / *   M i n i m i z e d   C h a t   B u b b l e   * / 
 
                             < d i v   c l a s s N a m e = " f i x e d   b o t t o m - 6   r i g h t - 6   z - 5 0 " > 
 
                                 < B u t t o n 
 
                                     o n C l i c k = { ( )   = >   s e t I s C h a t M i n i m i z e d ( f a l s e ) } 
 
                                     c l a s s N a m e = " w - 1 4   h - 1 4   r o u n d e d - f u l l   b g - p u r p l e - 6 0 0   h o v e r : b g - p u r p l e - 7 0 0   s h a d o w - l g " 
 
                                 > 
 
                                     < M e s s a g e C i r c l e   c l a s s N a m e = " h - 6   w - 6 "   / > 
 
                                 < / B u t t o n > 
 
                             < / d i v > 
 
                         ) } 
 
                     < / d i v > 
 
                 < / d i v > 
 
             < / d i v > 
 
         < / d i v > 
 
     ) 
 
 } 
 
 
</code>

package.json:
<code>
{
  "name": "neatrepo",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "build": "next build",
    "dev": "next dev",
    "lint": "next lint",
    "start": "next start"
  },
  "dependencies": {
    "@google/generative-ai": "latest",
    "@hello-pangea/dnd": "^18.0.1",
    "@hookform/resolvers": "^5.2.0",
    "@octokit/rest": "^22.0.0",
    "@radix-ui/react-accordion": "^1.2.11",
    "@radix-ui/react-alert-dialog": "^1.1.14",
    "@radix-ui/react-aspect-ratio": "^1.1.7",
    "@radix-ui/react-avatar": "latest",
    "@radix-ui/react-checkbox": "^1.3.2",
    "@radix-ui/react-collapsible": "^1.1.11",
    "@radix-ui/react-context-menu": "^2.2.15",
    "@radix-ui/react-dialog": "^1.1.14",
    "@radix-ui/react-dropdown-menu": "^2.1.15",
    "@radix-ui/react-hover-card": "^1.1.14",
    "@radix-ui/react-label": "^2.1.7",
    "@radix-ui/react-menubar": "^1.1.15",
    "@radix-ui/react-navigation-menu": "^1.2.13",
    "@radix-ui/react-popover": "^1.1.14",
    "@radix-ui/react-progress": "^1.1.7",
    "@radix-ui/react-radio-group": "^1.3.7",
    "@radix-ui/react-scroll-area": "^1.2.9",
    "@radix-ui/react-select": "^2.2.5",
    "@radix-ui/react-separator": "^1.1.7",
    "@radix-ui/react-slider": "^1.3.5",
    "@radix-ui/react-slot": "^1.2.3",
    "@radix-ui/react-switch": "^1.2.5",
    "@radix-ui/react-tabs": "^1.1.12",
    "@radix-ui/react-toggle": "^1.1.9",
    "@radix-ui/react-toggle-group": "^1.1.10",
    "@radix-ui/react-tooltip": "^1.2.7",
    "@supabase/ssr": "^0.6.1",
    "@supabase/supabase-js": "latest",
    "@types/nodemailer": "^6.4.17",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "cmdk": "^1.1.1",
    "date-fns": "^4.1.0",
    "embla-carousel-react": "^8.6.0",
    "framer-motion": "^10.16.16",
    "input-otp": "^1.4.2",
    "lucide-react": "^0.526.0",
    "next": "14.2.16",
    "next-themes": "latest",
    "nodemailer": "^7.0.5",
    "react": "^18",
    "react-day-picker": "^9.8.1",
    "react-dom": "^18",
    "react-hook-form": "^7.61.1",
    "react-resizable-panels": "^3.0.3",
    "recharts": "2.15.4",
    "sonner": "^2.0.6",
    "tailwind-merge": "^3.3.1",
    "tailwindcss-animate": "^1.0.7",
    "vaul": "^1.1.2",
    "zod": "^4.0.10"
  },
  "devDependencies": {
    "@playwright/test": "^1.54.1",
    "@types/node": "^22.17.0",
    "@types/react": "^18.3.23",
    "@types/react-dom": "^18",
    "autoprefixer": "^10.0.1",
    "eslint": "^8",
    "eslint-config-next": "14.0.0",
    "postcss": "^8.5",
    "tailwindcss": "^3.3.0",
    "typescript": "^5"
  }
}

</code>

postcss.config.mjs:
<code>
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
  },
};

export default config;

</code>

tailwind.config.ts:
<code>
import type { Config } from "tailwindcss"

const config = {
  darkMode: ["class"],
  content: [
    "./pages/**/*.{ts,tsx}",
    "./components/**/*.{ts,tsx}",
    "./app/**/*.{ts,tsx}",
    "./src/**/*.{ts,tsx}",
    "*.{js,ts,jsx,tsx,mdx}",
  ],
  prefix: "",
  theme: {
  	container: {
  		center: true,
  		padding: '2rem',
  		screens: {
  			'2xl': '1400px'
  		}
  	},
  	extend: {
  		colors: {
  			border: 'hsl(var(--border))',
  			input: 'hsl(var(--input))',
  			ring: 'hsl(var(--ring))',
  			background: 'hsl(var(--background))',
  			foreground: 'hsl(var(--foreground))',
  			primary: {
  				DEFAULT: 'hsl(var(--primary))',
  				foreground: 'hsl(var(--primary-foreground))'
  			},
  			secondary: {
  				DEFAULT: 'hsl(var(--secondary))',
  				foreground: 'hsl(var(--secondary-foreground))'
  			},
  			destructive: {
  				DEFAULT: 'hsl(var(--destructive))',
  				foreground: 'hsl(var(--destructive-foreground))'
  			},
  			muted: {
  				DEFAULT: 'hsl(var(--muted))',
  				foreground: 'hsl(var(--muted-foreground))'
  			},
  			accent: {
  				DEFAULT: 'hsl(var(--accent))',
  				foreground: 'hsl(var(--accent-foreground))'
  			},
  			popover: {
  				DEFAULT: 'hsl(var(--popover))',
  				foreground: 'hsl(var(--popover-foreground))'
  			},
  			card: {
  				DEFAULT: 'hsl(var(--card))',
  				foreground: 'hsl(var(--card-foreground))'
  			},
  			sidebar: {
  				DEFAULT: 'hsl(var(--sidebar-background))',
  				foreground: 'hsl(var(--sidebar-foreground))',
  				primary: 'hsl(var(--sidebar-primary))',
  				'primary-foreground': 'hsl(var(--sidebar-primary-foreground))',
  				accent: 'hsl(var(--sidebar-accent))',
  				'accent-foreground': 'hsl(var(--sidebar-accent-foreground))',
  				border: 'hsl(var(--sidebar-border))',
  				ring: 'hsl(var(--sidebar-ring))',
  				'primary-foreground': 'hsl(var(--sidebar-primary-foreground))',
  				'accent-foreground': 'hsl(var(--sidebar-accent-foreground))'
  			}
  		},
  		borderRadius: {
  			lg: 'var(--radius)',
  			md: 'calc(var(--radius) - 2px)',
  			sm: 'calc(var(--radius) - 4px)'
  		},
  		keyframes: {
  			'accordion-down': {
  				from: {
  					height: '0'
  				},
  				to: {
  					height: 'var(--radix-accordion-content-height)'
  				}
  			},
  			'accordion-up': {
  				from: {
  					height: 'var(--radix-accordion-content-height)'
  				},
  				to: {
  					height: '0'
  				}
  			},
  			'accordion-down': {
  				from: {
  					height: '0'
  				},
  				to: {
  					height: 'var(--radix-accordion-content-height)'
  				}
  			},
  			'accordion-up': {
  				from: {
  					height: 'var(--radix-accordion-content-height)'
  				},
  				to: {
  					height: '0'
  				}
  			}
  		},
  		animation: {
  			'accordion-down': 'accordion-down 0.2s ease-out',
  			'accordion-up': 'accordion-up 0.2s ease-out',
  			'accordion-down': 'accordion-down 0.2s ease-out',
  			'accordion-up': 'accordion-up 0.2s ease-out'
  		}
  	}
  },
  plugins: [require("tailwindcss-animate")],
} satisfies Config

export default config

</code>

test-pat-popup.js:
<code>
// PAT Popup Test Script
// Run this in browser console to test the PAT popup fix

console.log('🧪 PAT POPUP TEST SCRIPT');

// Function to clear all PAT-related localStorage
function clearPATStorage() {
  const keys = Object.keys(localStorage);
  const patKeys = keys.filter(key => 
    key.includes('token_popup_dismissed_') || 
    key.includes('token_popup_skipped_permanently_')
  );
  
  console.log('🧹 Clearing PAT localStorage keys:', patKeys);
  patKeys.forEach(key => localStorage.removeItem(key));
  
  console.log('✅ PAT localStorage cleared');
}

// Function to check current PAT storage state
function checkPATStorage() {
  const keys = Object.keys(localStorage);
  const patKeys = keys.filter(key => 
    key.includes('token_popup_dismissed_') || 
    key.includes('token_popup_skipped_permanently_')
  );
  
  console.log('🔍 Current PAT localStorage state:');
  patKeys.forEach(key => {
    console.log(`  ${key}: ${localStorage.getItem(key)}`);
  });
  
  if (patKeys.length === 0) {
    console.log('  No PAT localStorage keys found');
  }
}

// Function to simulate fresh user test
function simulateFreshUser() {
  console.log('🆕 Simulating fresh user test...');
  clearPATStorage();
  console.log('✅ Ready for fresh user test - refresh page and login with new GitHub account');
}

// Export functions to global scope for easy testing
window.clearPATStorage = clearPATStorage;
window.checkPATStorage = checkPATStorage;
window.simulateFreshUser = simulateFreshUser;

console.log('🎯 Available test functions:');
console.log('  clearPATStorage() - Clear all PAT localStorage');
console.log('  checkPATStorage() - Check current PAT localStorage state');
console.log('  simulateFreshUser() - Clear storage and prepare for fresh user test');

// Run initial check
checkPATStorage();
</code>

test-personality-persistence.html:
<code>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Personality Mode Persistence Test</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            background-color: #1a1a1a;
            color: #ffffff;
        }
        .test-section {
            background-color: #2a2a2a;
            padding: 20px;
            margin: 20px 0;
            border-radius: 8px;
            border: 1px solid #444;
        }
        button {
            background-color: #0066cc;
            color: white;
            border: none;
            padding: 10px 20px;
            margin: 5px;
            border-radius: 4px;
            cursor: pointer;
        }
        button:hover {
            background-color: #0052a3;
        }
        .critic-mode {
            background-color: #cc3300 !important;
        }
        .critic-mode:hover {
            background-color: #a32800 !important;
        }
        .status {
            padding: 10px;
            margin: 10px 0;
            border-radius: 4px;
            font-weight: bold;
        }
        .success {
            background-color: #004d00;
            color: #00ff00;
        }
        .error {
            background-color: #4d0000;
            color: #ff0000;
        }
        .info {
            background-color: #003d4d;
            color: #00ccff;
        }
    </style>
</head>
<body>
    <h1>🎭 Personality Mode Persistence Test</h1>
    <p>This test simulates the localStorage persistence functionality for the personality mode bug fix.</p>

    <div class="test-section">
        <h2>Current State</h2>
        <div id="currentState" class="status info">Loading...</div>
        <button id="toggleMode" onclick="togglePersonalityMode()">Toggle Mode</button>
        <button onclick="clearStorage()">Clear Storage</button>
        <button onclick="refreshTest()">Simulate Page Refresh</button>
    </div>

    <div class="test-section">
        <h2>OAuth URL Cleanup Test</h2>
        <div id="urlStatus" class="status info">Current URL is clean</div>
        <button onclick="addOAuthErrors()">Add OAuth Errors to URL</button>
        <button onclick="cleanOAuthErrors()">Clean OAuth Errors</button>
    </div>

    <div class="test-section">
        <h2>Test Log</h2>
        <div id="testLog" style="background-color: #000; padding: 10px; border-radius: 4px; font-family: monospace; font-size: 12px; max-height: 300px; overflow-y: auto;"></div>
    </div>

    <script>
        let isCriticMode = false;

        function log(message) {
            const timestamp = new Date().toLocaleTimeString();
            const logDiv = document.getElementById('testLog');
            logDiv.innerHTML += `[${timestamp}] ${message}\n`;
            logDiv.scrollTop = logDiv.scrollHeight;
            console.log(message);
        }

        function updateUI() {
            const stateDiv = document.getElementById('currentState');
            const toggleBtn = document.getElementById('toggleMode');
            
            if (isCriticMode) {
                stateDiv.textContent = '🔥 Critic Mode (Brutal)';
                stateDiv.className = 'status error';
                toggleBtn.textContent = 'Switch to Nice Mode';
                toggleBtn.className = 'critic-mode';
            } else {
                stateDiv.textContent = '😊 Nice Mode';
                stateDiv.className = 'status success';
                toggleBtn.textContent = 'Switch to Critic Mode';
                toggleBtn.className = '';
            }
        }

        function loadPersonalityMode() {
            try {
                const saved = localStorage.getItem('personality_critic_mode');
                if (saved !== null) {
                    isCriticMode = JSON.parse(saved);
                    log('🎭 Restored personality mode from localStorage: ' + (isCriticMode ? 'Critic' : 'Nice'));
                } else {
                    log('🎭 No saved personality mode found, using default (Nice)');
                }
            } catch (error) {
                log('❌ Failed to load personality mode: ' + error.message);
            }
            updateUI();
        }

        function savePersonalityMode() {
            try {
                localStorage.setItem('personality_critic_mode', JSON.stringify(isCriticMode));
                log('🎭 Saved personality mode to localStorage: ' + (isCriticMode ? 'Critic' : 'Nice'));
            } catch (error) {
                log('❌ Failed to save personality mode: ' + error.message);
            }
        }

        function togglePersonalityMode() {
            isCriticMode = !isCriticMode;
            savePersonalityMode();
            updateUI();
            log('🔄 Toggled personality mode to: ' + (isCriticMode ? 'Critic' : 'Nice'));
        }

        function clearStorage() {
            localStorage.removeItem('personality_critic_mode');
            isCriticMode = false;
            updateUI();
            log('🗑️ Cleared personality mode from localStorage');
        }

        function refreshTest() {
            log('🔄 Simulating page refresh...');
            setTimeout(() => {
                loadPersonalityMode();
                log('✅ Page refresh simulation complete');
            }, 500);
        }

        function addOAuthErrors() {
            const url = new URL(window.location.href);
            url.searchParams.set('error', 'server_error');
            url.searchParams.set('error_code', 'unexpected_failure');
            url.searchParams.set('error_description', 'Unable to exchange external code: test123');
            window.history.replaceState({}, '', url.toString());
            updateURLStatus();
            log('🔧 Added OAuth error parameters to URL');
        }

        function cleanOAuthErrors() {
            const currentUrl = new URL(window.location.href);
            const hasOAuthError = currentUrl.searchParams.has('error') || 
                                 currentUrl.searchParams.has('error_code') || 
                                 currentUrl.searchParams.has('error_description');

            if (hasOAuthError) {
                log('🔧 OAuth error parameters detected in URL, cleaning up...');
                
                currentUrl.searchParams.delete('error');
                currentUrl.searchParams.delete('error_code');
                currentUrl.searchParams.delete('error_description');
                
                if (currentUrl.hash.includes('error=')) {
                    currentUrl.hash = '';
                }
                
                window.history.replaceState({}, '', currentUrl.toString());
                log('✅ OAuth error parameters cleaned from URL');
            } else {
                log('ℹ️ No OAuth error parameters found in URL');
            }
            updateURLStatus();
        }

        function updateURLStatus() {
            const url = new URL(window.location.href);
            const hasErrors = url.searchParams.has('error') || 
                             url.searchParams.has('error_code') || 
                             url.searchParams.has('error_description');
            
            const statusDiv = document.getElementById('urlStatus');
            if (hasErrors) {
                statusDiv.textContent = '⚠️ OAuth error parameters detected in URL';
                statusDiv.className = 'status error';
            } else {
                statusDiv.textContent = '✅ Current URL is clean';
                statusDiv.className = 'status success';
            }
        }

        // Initialize on page load
        window.addEventListener('load', () => {
            log('🚀 Personality Mode Persistence Test initialized');
            loadPersonalityMode();
            updateURLStatus();
            
            // Auto-clean OAuth errors on load (simulating the fix)
            setTimeout(cleanOAuthErrors, 100);
        });
    </script>
</body>
</html>

</code>

tsconfig.json:
<code>
{
  "compilerOptions": {
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "target": "ES6",
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}

</code>



Please analyze this code for: Error handling, Edge cases, Performance optimization, Best practices, Please do not unnecessarily remove any comments or code. Generate the code with clear comments explaining the logic.