import { NextRequest, NextResponse } from 'next/server'
import nodemailer from 'nodemailer'
import { createClient } from '@supabase/supabase-js'

// Initialize Supabase client
const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
)

export async function POST(request: NextRequest) {
  try {
    const formData = await request.formData()
    
    // Extract form fields
    const userEmail = formData.get('userEmail') as string
    const bugTitle = formData.get('bugTitle') as string
    const bugDescription = formData.get('bugDescription') as string
    const stepsToReproduce = formData.get('stepsToReproduce') as string
    const expectedBehavior = formData.get('expectedBehavior') as string
    const actualBehavior = formData.get('actualBehavior') as string
    const browserInfo = formData.get('browserInfo') as string
    const additionalInfo = formData.get('additionalInfo') as string
    const timestamp = formData.get('timestamp') as string
    const url = formData.get('url') as string
    const referrer = formData.get('referrer') as string

    // Extract and upload screenshots to Supabase
    const screenshotUrls: string[] = []
    const attachments: { filename: string; content: Buffer; cid: string }[] = []
    for (const [key, value] of formData.entries()) {
      if (key.startsWith('screenshot_') && value instanceof File) {
        try {
          const fileExt = value.name.split('.').pop()
          const fileName = `bug-reports/${Date.now()}-${Math.random().toString(36).substring(2)}.${fileExt}`

          const { data, error } = await supabase.storage
            .from('bug-reports') // Using dedicated bug-reports bucket
            .upload(fileName, value, {
              contentType: value.type,
              upsert: false
            })

          if (error) {
            console.error('Error uploading screenshot:', error)
            // Continue without this screenshot rather than failing completely
          } else {
            // Get public URL
            const { data: { publicUrl } } = supabase.storage
              .from('bug-reports')
              .getPublicUrl(fileName)

            screenshotUrls.push(publicUrl)

            // Prepare inline attachment for email (download from uploaded File)
            const arrayBuffer = await value.arrayBuffer()
            attachments.push({
              filename: value.name,
              content: Buffer.from(arrayBuffer),
              cid: `screenshot-${attachments.length}`
            })
          }
        } catch (uploadError) {
          console.error('Screenshot upload error:', uploadError)
          // Continue without this screenshot
        }
      }
    }

    // Validate required fields
    if (!userEmail || !bugTitle || !bugDescription) {
      return NextResponse.json(
        { error: 'Missing required fields' },
        { status: 400 }
      )
    }

    // Determine if SMTP email service is configured
    const emailServiceAvailable = !!process.env.SMTP_USER && !!process.env.SMTP_PASS;

    // Create email transporter only if service is available
    const transporter = emailServiceAvailable
      ? nodemailer.createTransport({
          service: 'gmail',
          auth: {
            user: process.env.SMTP_USER,
            pass: process.env.SMTP_PASS
          }
        })
      : null;

    // Format email content (plain text for fallback)
    const textContent = `
🐛 NEW BUG REPORT - NeatRepo

📧 Reporter Email: ${userEmail}
🕒 Timestamp: ${new Date(timestamp).toLocaleString('id-ID', { timeZone: 'Asia/Jakarta' })}
🌐 URL: ${url}
🔗 Referrer: ${referrer || 'Direct access'}

═══════════════════════════════════════

📋 BUG TITLE:
${bugTitle}

📝 DETAILED DESCRIPTION:
${bugDescription}

${stepsToReproduce ? `🔄 STEPS TO REPRODUCE:
${stepsToReproduce}

` : ''}${expectedBehavior ? `✅ EXPECTED BEHAVIOR:
${expectedBehavior}

` : ''}${actualBehavior ? `❌ ACTUAL BEHAVIOR:
${actualBehavior}

` : ''}🌐 BROWSER INFO:
${browserInfo}

${additionalInfo ? `ℹ️ ADDITIONAL INFO:
${additionalInfo}

` : ''}═══════════════════════════════════════

📸 Screenshots: ${screenshotUrls.length} file(s) uploaded to Supabase
${screenshotUrls.length > 0 ? `
🔗 Screenshot URLs:
${screenshotUrls.map((url, index) => `${index + 1}. ${url}`).join('\n')}
` : ''}
🔧 Auto-generated by NeatRepo Bug Report System
    `

    // HTML version with inline images
    const htmlContent = `
      <h2>🐛 NEW BUG REPORT - NeatRepo</h2>
      <p><strong>Reporter Email:</strong> ${userEmail}<br/>
      <strong>Timestamp:</strong> ${new Date(timestamp).toLocaleString('id-ID', { timeZone: 'Asia/Jakarta' })}<br/>
      <strong>URL:</strong> <a href="${url}">${url}</a><br/>
      <strong>Referrer:</strong> ${referrer || 'Direct access'}</p>
      <hr/>
      <h3>📋 BUG TITLE</h3>
      <p>${bugTitle}</p>
      <h3>📝 DETAILED DESCRIPTION</h3>
      <p>${bugDescription.replace(/\n/g,'<br/>')}</p>
      ${stepsToReproduce ? `<h3>🔄 STEPS TO REPRODUCE</h3><p>${stepsToReproduce.replace(/\n/g,'<br/>')}</p>` : ''}
      ${expectedBehavior ? `<h3>✅ EXPECTED BEHAVIOR</h3><p>${expectedBehavior.replace(/\n/g,'<br/>')}</p>` : ''}
      ${actualBehavior ? `<h3>❌ ACTUAL BEHAVIOR</h3><p>${actualBehavior.replace(/\n/g,'<br/>')}</p>` : ''}
      <h3>🌐 BROWSER INFO</h3>
      <p>${browserInfo}</p>
      ${additionalInfo ? `<h3>ℹ️ ADDITIONAL INFO</h3><p>${additionalInfo.replace(/\n/g,'<br/>')}</p>` : ''}
      <hr/>
      <h3>📸 Screenshots (${attachments.length})</h3>
      ${attachments.map((att, idx) => `<p><img src="cid:${att.cid}" style="max-width:100%;border:1px solid #ccc" alt="screenshot ${idx+1}"/></p>`).join('')}
      <p>🔧 Auto-generated by NeatRepo Bug Report System</p>
    `;

    // Send email if the service is available
    if (emailServiceAvailable && transporter) {
      await transporter.sendMail({
        from: process.env.SMTP_USER!,
        to: 'prada.202201006@student.stikomyos.ac.id',
        replyTo: userEmail,
        subject: `🐛 Bug Report: ${bugTitle} - NeatRepo`,
        text: textContent,
        html: htmlContent,
        attachments
        // No attachments needed since screenshots are in Supabase with URLs
      })
    } else {
      console.log('📭 Email service not configured – bug report stored with screenshots in Supabase.')
    }

    return NextResponse.json({ 
      success: true, 
      message: 'Bug report sent successfully' 
    })

  } catch (error) {
    console.error('Error sending bug report:', error)
    return NextResponse.json(
      { error: 'Failed to send bug report' },
      { status: 500 }
    )
  }
}
