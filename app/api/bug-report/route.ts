import { NextRequest, NextResponse } from 'next/server'
import nodemailer from 'nodemailer'

export async function POST(request: NextRequest) {
  try {
    const formData = await request.formData()
    
    // Extract form fields
    const userEmail = formData.get('userEmail') as string
    const bugTitle = formData.get('bugTitle') as string
    const bugDescription = formData.get('bugDescription') as string
    const stepsToReproduce = formData.get('stepsToReproduce') as string
    const expectedBehavior = formData.get('expectedBehavior') as string
    const actualBehavior = formData.get('actualBehavior') as string
    const browserInfo = formData.get('browserInfo') as string
    const additionalInfo = formData.get('additionalInfo') as string
    const timestamp = formData.get('timestamp') as string
    const url = formData.get('url') as string
    const referrer = formData.get('referrer') as string

    // Extract screenshots
    const screenshots: { filename: string; content: Buffer }[] = []
    for (const [key, value] of formData.entries()) {
      if (key.startsWith('screenshot_') && value instanceof File) {
        const buffer = Buffer.from(await value.arrayBuffer())
        screenshots.push({
          filename: value.name,
          content: buffer
        })
      }
    }

    // Validate required fields
    if (!userEmail || !bugTitle || !bugDescription) {
      return NextResponse.json(
        { error: 'Missing required fields' },
        { status: 400 }
      )
    }

    // Create email transporter
    const transporter = nodemailer.createTransporter({
      service: 'gmail',
      auth: {
        user: process.env.SMTP_USER,
        pass: process.env.SMTP_PASS
      }
    })

    // Format email content
    const emailContent = `
üêõ NEW BUG REPORT - NeatRepo

üìß Reporter Email: ${userEmail}
üïí Timestamp: ${new Date(timestamp).toLocaleString('id-ID', { timeZone: 'Asia/Jakarta' })}
üåê URL: ${url}
üîó Referrer: ${referrer || 'Direct access'}

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

üìã BUG TITLE:
${bugTitle}

üìù DETAILED DESCRIPTION:
${bugDescription}

${stepsToReproduce ? `üîÑ STEPS TO REPRODUCE:
${stepsToReproduce}

` : ''}${expectedBehavior ? `‚úÖ EXPECTED BEHAVIOR:
${expectedBehavior}

` : ''}${actualBehavior ? `‚ùå ACTUAL BEHAVIOR:
${actualBehavior}

` : ''}üåê BROWSER INFO:
${browserInfo}

${additionalInfo ? `‚ÑπÔ∏è ADDITIONAL INFO:
${additionalInfo}

` : ''}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

üì∏ Screenshots: ${screenshots.length} file(s) attached
üîß Auto-generated by NeatRepo Bug Report System
    `

    // Prepare email attachments
    const attachments = screenshots.map((screenshot, index) => ({
      filename: `screenshot_${index + 1}_${screenshot.filename}`,
      content: screenshot.content,
      contentType: 'image/*'
    }))

    // Send email
    await transporter.sendMail({
      from: process.env.SMTP_USER,
      to: 'prada.202201006@student.stikomyos.ac.id',
      replyTo: userEmail,
      subject: `üêõ Bug Report: ${bugTitle} - NeatRepo`,
      text: emailContent,
      attachments
    })

    return NextResponse.json({ 
      success: true, 
      message: 'Bug report sent successfully' 
    })

  } catch (error) {
    console.error('Error sending bug report:', error)
    return NextResponse.json(
      { error: 'Failed to send bug report' },
      { status: 500 }
    )
  }
}
