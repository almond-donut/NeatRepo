import { NextRequest, NextResponse } from 'next/server'
import nodemailer from 'nodemailer'
import { createClient } from '@supabase/supabase-js'

// Initialize Supabase client
const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
)

export async function POST(request: NextRequest) {
  try {
    const formData = await request.formData()
    
    // Extract form fields
    const userEmail = formData.get('userEmail') as string
    const bugTitle = formData.get('bugTitle') as string
    const bugDescription = formData.get('bugDescription') as string
    const stepsToReproduce = formData.get('stepsToReproduce') as string
    const expectedBehavior = formData.get('expectedBehavior') as string
    const actualBehavior = formData.get('actualBehavior') as string
    const browserInfo = formData.get('browserInfo') as string
    const additionalInfo = formData.get('additionalInfo') as string
    const timestamp = formData.get('timestamp') as string
    const url = formData.get('url') as string
    const referrer = formData.get('referrer') as string

    // Extract and upload screenshots to Supabase
    const screenshotUrls: string[] = []
    for (const [key, value] of formData.entries()) {
      if (key.startsWith('screenshot_') && value instanceof File) {
        try {
          const fileExt = value.name.split('.').pop()
          const fileName = `bug-reports/${Date.now()}-${Math.random().toString(36).substring(2)}.${fileExt}`

          const { data, error } = await supabase.storage
            .from('bug-reports') // Using dedicated bug-reports bucket
            .upload(fileName, value, {
              contentType: value.type,
              upsert: false
            })

          if (error) {
            console.error('Error uploading screenshot:', error)
            // Continue without this screenshot rather than failing completely
          } else {
            // Get public URL
            const { data: { publicUrl } } = supabase.storage
              .from('bug-reports')
              .getPublicUrl(fileName)

            screenshotUrls.push(publicUrl)
          }
        } catch (uploadError) {
          console.error('Screenshot upload error:', uploadError)
          // Continue without this screenshot
        }
      }
    }

    // Validate required fields
    if (!userEmail || !bugTitle || !bugDescription) {
      return NextResponse.json(
        { error: 'Missing required fields' },
        { status: 400 }
      )
    }

    // Check if email configuration is available
    if (!process.env.SMTP_USER || !process.env.SMTP_PASS) {
      console.error('Email configuration missing')
      return NextResponse.json(
        { error: 'Email service not configured' },
        { status: 503 }
      )
    }

    // Create email transporter
    const transporter = nodemailer.createTransporter({
      service: 'gmail',
      auth: {
        user: process.env.SMTP_USER,
        pass: process.env.SMTP_PASS
      }
    })

    // Format email content
    const emailContent = `
üêõ NEW BUG REPORT - NeatRepo

üìß Reporter Email: ${userEmail}
üïí Timestamp: ${new Date(timestamp).toLocaleString('id-ID', { timeZone: 'Asia/Jakarta' })}
üåê URL: ${url}
üîó Referrer: ${referrer || 'Direct access'}

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

üìã BUG TITLE:
${bugTitle}

üìù DETAILED DESCRIPTION:
${bugDescription}

${stepsToReproduce ? `üîÑ STEPS TO REPRODUCE:
${stepsToReproduce}

` : ''}${expectedBehavior ? `‚úÖ EXPECTED BEHAVIOR:
${expectedBehavior}

` : ''}${actualBehavior ? `‚ùå ACTUAL BEHAVIOR:
${actualBehavior}

` : ''}üåê BROWSER INFO:
${browserInfo}

${additionalInfo ? `‚ÑπÔ∏è ADDITIONAL INFO:
${additionalInfo}

` : ''}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

üì∏ Screenshots: ${screenshotUrls.length} file(s) uploaded to Supabase
${screenshotUrls.length > 0 ? `
üîó Screenshot URLs:
${screenshotUrls.map((url, index) => `${index + 1}. ${url}`).join('\n')}
` : ''}
üîß Auto-generated by NeatRepo Bug Report System
    `

    // Send email (only if SMTP is configured)
    if (process.env.SMTP_USER && process.env.SMTP_PASS) {
      await transporter.sendMail({
        from: process.env.SMTP_USER,
        to: 'prada.202201006@student.stikomyos.ac.id',
        replyTo: userEmail,
        subject: `üêõ Bug Report: ${bugTitle} - NeatRepo`,
        text: emailContent
        // No attachments needed since screenshots are in Supabase with URLs
      })
    } else {
      console.log('Email not configured, bug report saved with screenshots in Supabase')
    }

    return NextResponse.json({ 
      success: true, 
      message: 'Bug report sent successfully' 
    })

  } catch (error) {
    console.error('Error sending bug report:', error)
    return NextResponse.json(
      { error: 'Failed to send bug report' },
      { status: 500 }
    )
  }
}
